CUSTOMERSERVICE_UPDATE, Pair.of(extServiceCreate_severalDelivery_request, extOneServiceCreateResponse)
);;
initProductScenario(productPathesToExpectedResources, Map.of());

final var orderPathesToExpectedResources = Map.of(
ORDER_CREATE, Pair.of(extOrderWithSeveralDeliveryServiceCreateRequest, extOrderWithSeveralDeliveryServiceCreateResponse),
ORDER_GET_BY_CLIENT_ORDER_ID, Pair.<Resource, Resource>of(null, null)
);

initOrderScenario(
orderPathesToExpectedResources,
Map.of(ORDER_GET_BY_CLIENT_ORDER_ID, HttpStatus.BAD_REQUEST),
Map.of("expected_starfish_order_id", "test_starfish_order_id",
"expected_order_cancellation_reason", CancellationReason.NO_REASON.name(),
"expected_client_order_id", "documentId___28.09.2022")
);

customPostScenarioFromResource("/v1/order",
orderWithSeveralDeliveryServicesRequest, orderWithSeveralDeliveryServicesResponse, true, 200);

if (sfOrderServer.getDispatcher() instanceof final StarfishOrderDispatcher orderDispatcher) {
assertEquals(2, orderDispatcher.getValidDispatches(), "Check dispatched ORDER requests");
}
if (sfProductServer.getDispatcher() instanceof final StarfishProductDispatcher productDispatcher) {
assertEquals(2, productDispatcher.getValidDispatches(), "Check dispatched PRODUCT requests");
}
}

@Test
@DisplayName("Ð£ÑÐ¿ÐµÑˆÐ½Ð¾Ðµ ÑÐ¾Ð·Ð´Ð°Ð½Ð¸Ðµ Ð·Ð°ÐºÐ°Ð·Ð° c Ð¾Ð´Ð½Ð¾Ð¹ Ð¿Ð¾Ð·Ð¸Ñ†Ð¸ÐµÐ¹ Ð¿Ð¾Ð¼ÐµÑ‡ÐµÐ½Ð½Ð¾Ð¹ Ð½Ð° ÑƒÐ´Ð°Ð»ÐµÐ½Ð¸Ðµ")
@SqlGroup({
@Sql(value = "/db/order/truncate_order_entities.sql", executionPhase = BEFORE_TEST_METHOD),
@Sql(value = "/db/order/truncate_order_entities.sql", executionPhase = AFTER_TEST_METHOD),
})
@Disabled
public void createSimpleOrderWithDeletedProduct() {
initProductScenario();

final var orderPathesToExpectedResources = Map.of(
ORDER_CREATE, Pair.of(extOneItemDeletedOrderCreateRequest, extOneItemDeletedOrderCreateResponse),
ORDER_GET_BY_CLIENT_ORDER_ID, Pair.<Resource, Resource>of(null, null)
);

initOrderScenario(
orderPathesToExpectedResources,
Map.of(ORDER_GET_BY_CLIENT_ORDER_ID, HttpStatus.BAD_REQUEST),
Map.of("expected_starfish_order_id", "test_starfish_order_id",
"expected_order_cancellation_reason", CancellationReason.NO_REASON.name(),
"expected_client_order_id", "documentId___27.12.2022")
);

customPostScenarioFromResource("/v1/order",
deletedOneItemOrderRequest, deletedOneItemOrderResponse, true, 200);

if (sfOrderServer.getDispatcher() instanceof final StarfishOrderDispatcher orderDispatcher) {
assertEquals(2, orderDispatcher.getValidDispatches(), "Check dispatched ORDER requests");
}
if (sfProductServer.getDispatcher() instanceof final StarfishProductDispatcher productDispatcher) {
assertEquals(1, productDispatcher.getValidDispatches(), "Check dispatched PRODUCT requests");
}
}

@Test
@DisplayName("Ð£ÑÐ¿ÐµÑˆÐ½Ð¾Ðµ ÑÐ¾Ð·Ð´Ð°Ð½Ð¸Ðµ Ð·Ð°ÐºÐ°Ð·Ð° Ð¿Ð¾Ð¼ÐµÑ‡ÐµÐ½Ð½Ð¾Ð³Ð¾ Ð½Ð° ÑƒÐ´Ð°Ð»ÐµÐ½Ð¸Ðµ")
@SqlGroup({
@Sql(value = "/db/order/truncate_order_entities.sql", executionPhase = BEFORE_TEST_METHOD),
@Sql(value = "/db/order/truncate_order_entities.sql", executionPhase = AFTER_TEST_METHOD),
})
@Disabled
public void createDeletedOrder() {
initProductScenario();

final var orderPathsToExpectedResources = Map.of(
ORDER_CREATE, Pair.of(extDeletedOrderCreateRequest, extDeletedOrderCreateResponse),
ORDER_GET_BY_CLIENT_ORDER_ID, Pair.<Resource, Resource>of(null, null),
ORDER_DELETE, Pair.<Resource, Resource>of(null, null)
);

initOrderScenario(
orderPathsToExpectedResources,
Map.of(ORDER_GET_BY_CLIENT_ORDER_ID, HttpStatus.BAD_REQUEST),
Map.of("expected_starfish_order_id", "test_starfish_deleted_order_id",
"expected_order_cancellation_reason", CancellationReason.NO_REASON.name(),
"expected_client_order_id", "documentId___27.12.2022")
);

final var bpmPathsToExpectedResources = Map.of(
BPM_SEND_MESSAGE, Pair.of(bpmnReq, bpmnRes)
);

initBpmScenario(
bpmPathsToExpectedResources,
Map.of("messageId", "MESSAGE_ORDER_DELETED",
"orderId", "test_starfish_deleted_order_id")
);

customPostScenarioFromResource("/v1/order",
deletedOrderRequest, deletedOrderResponse, true, 200);

if (sfOrderServer.getDispatcher() instanceof final StarfishOrderDispatcher orderDispatcher) {
assertEquals(3, orderDispatcher.getValidDispatches(), "Check dispatched ORDER requests");
}
if (sfProductServer.getDispatcher() instanceof final StarfishProductDispatcher productDispatcher) {
assertEquals(1, productDispatcher.getValidDispatches(), "Check dispatched PRODUCT requests");
}
}

@Test
@DisplayName("ÐÐµÐ²Ð°Ð»Ð¸Ð´Ð½Ñ‹Ð¹ Ð·Ð°Ð¿Ñ€Ð¾Ñ")
public void invalidRequestCreateOrder() {
customPostScenarioFromResource("/v1/order",
invalidRequest, invalidRequestResponse, true, 400);

if (sfOrderServer.getDispatcher() instanceof final StarfishOrderDispatcher orderDispatcher) {
assertEquals(0, orderDispatcher.getValidDispatches(), "Check dispatched ORDER requests");
}
if (sfProductServer.getDispatcher() instanceof final StarfishProductDispatcher productDispatcher) {
assertEquals(0, productDispatcher.getValidDispatches(), "Check dispatched PRODUCT requests");
}
}

@Test
@DisplayName("order.documentItems[i].positionCode <= 0")
public void invalidPositionCodeValue() {
customPostScenarioFromResource("/v1/order",
invalidPositionCodeValueRequest, invalidPositionCodeValueResponse, true, 400);

if (sfOrderServer.getDispatcher() instanceof final StarfishOrderDispatcher orderDispatcher) {
assertEquals(0, orderDispatcher.getValidDispatches(), "Check dispatched ORDER requests");
}
if (sfProductServer.getDispatcher() instanceof final StarfishProductDispatcher productDispatcher) {
assertEquals(0, productDispatcher.getValidDispatches(), "Check dispatched PRODUCT requests");
}
}

@Test
@DisplayName("Ð”ÑƒÐ±Ð»Ð¸Ñ€ÑƒÑŽÑ‰Ð¸ÐµÑÑ positionCode Ð² documentItems")
public void duplicatedPositionCodes() {
customPostScenarioFromResource("/v1/order",
duplicatedPositionCodesRequest, duplicatedPositionCodesResponse, true, 400);

if (sfOrderServer.getDispatcher() instanceof final StarfishOrderDispatcher orderDispatcher) {
assertEquals(0, orderDispatcher.getValidDispatches(), "Check dispatched ORDER requests");
}
if (sfProductServer.getDispatcher() instanceof final StarfishProductDispatcher productDispatcher) {
assertEquals(0, productDispatcher.getValidDispatches(), "Check dispatched PRODUCT requests");
}
}

@Test
@DisplayName("Ð•ÑÐ»Ð¸ ÑÑ‚Ð°Ñ‚ÑƒÑ Ð¿Ð¾Ð·Ð¸Ñ†Ð¸Ð¸ Ð·Ð°ÐºÐ°Ð·Ð° CANCELED Ñ‚Ð¾ Ð´Ð¾Ð»Ð¶Ð½Ð¾ Ð±Ñ‹Ñ‚ÑŒ positionCancellationReason Ð¾Ð±ÑÐ·Ð°Ñ‚ÐµÐ»ÑŒÐ½Ñ‹Ð¼.")
public void requiredPositionCancellationReason() {
customPostScenarioFromResource("/v1/order",
requiredPositionCancellationReasonRequest, requiredPositionCancellationReasonResponse, true, 400);

if (sfOrderServer.getDispatcher() instanceof final StarfishOrderDispatcher orderDispatcher) {
assertEquals(0, orderDispatcher.getValidDispatches(), "Check dispatched ORDER requests");
}
if (sfProductServer.getDispatcher() instanceof final StarfishProductDispatcher productDispatcher) {
assertEquals(0, productDispatcher.getValidDispatches(), "Check dispatched PRODUCT requests");
}
}

private void initCreateOrderScenario(final Resource expectedRequest,
final Resource expectedResponse) {
initCreateOrderScenario(expectedRequest, expectedResponse, null);
}

@SuppressWarnings("PMD.UnusedPrivateMethod")
private void initCreateOrderScenario(final Resource expectedRequest,
final Resource expectedResponse,
final String expectedSfOrderId) {
final var dispatcherDatas = new ArrayList<DispatcherData>();

final var orderCreateDispatcherData = DispatcherData.builder()
.path("/order/create")
.httpMethod(HttpMethod.POST.toString())
.expectedRequest(expectedRequest)
.expectedResponse(expectedResponse)
.status(HttpStatus.OK)
.build();
dispatcherDatas.add(orderCreateDispatcherData);

if (StringUtils.isNotBlank(expectedSfOrderId)) {
final var orderMarkDeletedDispatcherData = DispatcherData.builder()
.path(String.format("/order/%s", expectedSfOrderId))
.httpMethod(HttpMethod.DELETE.toString())
.expectedRequest(null)
.expectedResponse(new ByteArrayResource("Order is deleted".getBytes(StandardCharsets.UTF_8)))
.status(HttpStatus.OK)
.build();
dispatcherDatas.add(orderMarkDeletedDispatcherData);
}
var dispatcher = new StarfishOrderDispatcher(dispatcherDatas);
sfOrderServer.setDispatcher(dispatcher);
}

@SuppressWarnings("PMD.UnusedPrivateMethod")
private void initProductScenario() {
final var productUpdateDispatcherData = DispatcherData.builder()
.path("/product/update")
.httpMethod(HttpMethod.POST.toString())
.expectedRequest(extOneItemProductCreateRequest)
.expectedResponse(extOneItemProductCreateResponse)
.status(HttpStatus.OK)
.build();
final var customerServiceDispatcherData = DispatcherData.builder()
.path("/customerservice/list")
.httpMethod(HttpMethod.POST.toString())
.expectedRequest(extOneServiceCreateRequest)
.expectedResponse(extOneServiceCreateResponse)
.status(HttpStatus.OK)
.build();
var dispatcher = new StarfishProductDispatcher(List.of(
productUpdateDispatcherData, customerServiceDispatcherData));
sfProductServer.setDispatcher(dispatcher);
}

private void initProductScenario(Map<ProductPath, Pair<Resource, Resource>> pathToExpectedResources,
Map<String, Object> pathTemplateParameters) {
final var dispatcherDatas = new ArrayList<DispatcherData>();

if (pathToExpectedResources.containsKey(PRODUCT_UPDATE)) {
final var resourceResourcePair = pathToExpectedResources.get(PRODUCT_UPDATE);
dispatcherDatas.add(
PRODUCT_UPDATE.buildDispatcherData(
resourceResourcePair, HttpMethod.POST, HttpStatus.OK, pathTemplateParameters));
}

if (pathToExpectedResources.containsKey(CUSTOMERSERVICE_UPDATE)) {
final var resourceResourcePair = pathToExpectedResources.get(CUSTOMERSERVICE_UPDATE);
dispatcherDatas.add(
CUSTOMERSERVICE_UPDATE.buildDispatcherData(
resourceResourcePair, HttpMethod.POST, HttpStatus.OK, pathTemplateParameters));
}

var dispatcher = new StarfishProductDispatcher(dispatcherDatas);
sfProductServer.setDispatcher(dispatcher);
}
}


File: /evrazropos/EMI_evraz_oms_aggregation_service/src/test/java/ru/liga/evraz/aggregation/module/order/ReloadOrdersTest.java
Content:
package ru.liga.evraz.aggregation.module.order;

import lombok.SneakyThrows;
import org.apache.commons.lang3.tuple.Pair;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.test.autoconfigure.web.reactive.AutoConfigureWebTestClient;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.context.annotation.Import;
import org.springframework.core.io.FileSystemResource;
import org.springframework.core.io.Resource;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.test.annotation.DirtiesContext;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.jdbc.SqlGroup;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import ru.liga.evraz.aggregation.base.BaseIntegrationTest;
import ru.liga.evraz.aggregation.config.TestConfig;
import ru.liga.evraz.aggregation.config.path.ProductPath;
import ru.liga.evraz.aggregation.dispatcher.DispatcherData;
import ru.liga.evraz.aggregation.dispatcher.StarfishOrderDispatcher;
import ru.liga.evraz.aggregation.dispatcher.StarfishProductDispatcher;
import ru.liga.evraz.aggregation.domain.model.order.enums.CancellationReason;
import ru.liga.evraz.aggregation.kafka.TestTestKafkaOrderReloadConsumer;

import java.io.File;
import java.util.ArrayList;
import java.util.Map;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.AFTER_TEST_METHOD;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.BEFORE_TEST_METHOD;
import static ru.liga.evraz.aggregation.config.path.OrderPath.ORDERS_DETAILS_UPDATE;
import static ru.liga.evraz.aggregation.config.path.OrderPath.ORDERS_SHIPPING_UPDATE_TEMPLATE;
import static ru.liga.evraz.aggregation.config.path.OrderPath.ORDER_CUSTOMERS_LEGAL_ENTITY_UPDATE;
import static ru.liga.evraz.aggregation.config.path.OrderPath.ORDER_CUSTOMER_UPDATE;
import static ru.liga.evraz.aggregation.config.path.OrderPath.ORDER_CUSTOM_ATTRIBUTES_UPDATE;
import static ru.liga.evraz.aggregation.config.path.OrderPath.ORDER_DETAILS_UPDATE;
import static ru.liga.evraz.aggregation.config.path.OrderPath.ORDER_ITEMS_UPDATE_TEMPLATE;
import static ru.liga.evraz.aggregation.config.path.OrderPath.ORDER_ITEM_SERVICES_UPDATE_TEMPLATE;
import static ru.liga.evraz.aggregation.config.path.OrderPath.ORDER_SET_CANCELLATION_REASON;
import static ru.liga.evraz.aggregation.config.path.OrderPath.ORDER_SHIPPING_UPDATE_TEMPLATE;
import static ru.liga.evraz.aggregation.config.path.ProductPath.CUSTOMERSERVICE_UPDATE;
import static ru.liga.evraz.aggregation.config.path.ProductPath.PRODUCT_UPDATE;

@ActiveProfiles("test")
@AutoConfigureWebTestClient(timeout = "5s")
@DisplayName("Ð¢ÐµÑÑ‚ Ð¿ÐµÑ€ÐµÐ²Ñ‹Ð³Ñ€ÑƒÐ·ÐºÐ¸ Ð·Ð°ÐºÐ°Ð·Ð¾Ð² Ð¸Ð· Ð‘Ð” ÑÐµÑ€Ð²Ð¸ÑÐ° Ð² SF")
@DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_EACH_TEST_METHOD)
@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, properties = {"aggregation.kafka.concurrency=1"})
@Import(TestConfig.class)
class ReloadOrdersTest extends BaseIntegrationTest {

private static final String DB_CLEANER = "/db/order/truncate_order_entities.sql";
private static final String DB_FILL = "/db/order/reload_orders_data.sql";

@Value("classpath:api/order/reload/response.json")
private Resource orderReloadResponse;

@Autowired
private TestTestKafkaOrderReloadConsumer consumer;

@Value("classpath:external/order/details/order_details_reload_order_request.json")
private Resource extOrderDetailsUpdateRequest;
@Value("classpath:/external/order/details/order_details_update_response.json")
private Resource extOrderDetailsUpdateResponse;
@Value("classpath:external/order/item/update/update_items_request_for_reload_order.json")
private Resource extOrderItemsUpdateRequest;
@Value("classpath:/external/order/item/update/update_items_response.json")
private Resource extOrderItemsUpdateResponse;
@Value("classpath:external/order/custom_attributes/update_custom_attributes_request_for_reload_order.json")
private Resource extOrderCustomAttributesUpdateRequest;
@Value("classpath:/external/order/custom_attributes/update_custom_attributes_response.json")
private Resource extOrderCustomAttributesUpdateResponse;
@Value("classpath:external/order/customer/order_customer_update_for_reload_order.json")
private Resource extOrderCustomerUpdateWithoutContactsRequest;
@Value("classpath:/external/order/customer/order_customer_update_response.json")
private Resource extOrderCustomerUpdateResponse;
@Value("classpath:external/order/item_service/update/update_item_service_request_for_reload_order.json")
private Resource extOrderItemServicesUpdateRequest;
@Value("classpath:/external/order/item_service/update/update_item_service_response.json")
private Resource extOrderItemServicesUpdateResponse;
@Value("classpath:external/order/shipping/update/update_shipping_request_for_reload_order.json")
private Resource extOrderShippingUpdateRequest;
@Value("classpath:/external/order/shipping/update/update_shipping_response.json")
private Resource extOrderShippingUpdateResponse;
@Value("classpath:/external/order/set_cancellation_reason/update_order_cancellation_reason_response.json")
private Resource extOrderCancellationReasonUpdateResponse;
@Value("classpath:/external/product/customer_service/reloadOrdersSuccess_Req.json")
private Resource extCustomerServiceCatalogRequest_reloadOrdersSuccess;
@Value("classpath:/external/product/customer_service/service_create_response.json")
private Resource extCustomerServiceCatalogResponse;
@Value("classpath:external/order/legal_entities/order_customers_legal_entity_update_request.json")
private Resource legalEntityUpdateRequest;
@Value("classpath:external/order/legal_entities/order_customers_legal_entity_update_response.json")
private Resource legalEntityUpdateResponse;

@AfterEach
void finish() {
if (sfOrderServer.getDispatcher() instanceof final StarfishOrderDispatcher orderDispatcher) {
orderDispatcher.reset();
}
}

@Test
@DisplayName("Ð£ÑÐ¿ÐµÑˆÐ½Ð°Ñ Ð¿ÐµÑ€ÐµÐ²Ñ‹Ð³Ñ€ÑƒÐ·ÐºÐ° Ð·Ð°ÐºÐ°Ð·Ð¾Ð² Ð² SF")
@SneakyThrows
@SqlGroup({
@Sql(value = DB_CLEANER, executionPhase = BEFORE_TEST_METHOD),
@Sql(value = DB_FILL, executionPhase = BEFORE_TEST_METHOD),
@Sql(value = DB_CLEANER, executionPhase = AFTER_TEST_METHOD)
})
public void reloadOrdersSuccess() {

final var productPathesToExpectedResources = Map.of(
CUSTOMERSERVICE_UPDATE, Pair.of(extCustomerServiceCatalogRequest_reloadOrdersSuccess, extCustomerServiceCatalogResponse)
);
initProductScenario(productPathesToExpectedResources, Map.of());

final var pathsToExpectedResources = Map.of(
ORDER_DETAILS_UPDATE, Pair.of(extOrderDetailsUpdateRequest, extOrderDetailsUpdateResponse),
ORDERS_DETAILS_UPDATE, Pair.of(extOrderDetailsUpdateRequest, extOrderDetailsUpdateResponse),
ORDER_CUSTOM_ATTRIBUTES_UPDATE, Pair.of(extOrderCustomAttributesUpdateRequest, extOrderCustomAttributesUpdateResponse),
ORDER_CUSTOMER_UPDATE, Pair.of(extOrderCustomerUpdateWithoutContactsRequest, extOrderCustomerUpdateResponse),
ORDER_ITEMS_UPDATE_TEMPLATE, Pair.of(extOrderItemsUpdateRequest, extOrderItemsUpdateResponse),
ORDER_ITEM_SERVICES_UPDATE_TEMPLATE, Pair.of(extOrderItemServicesUpdateRequest, extOrderItemServicesUpdateResponse),
ORDER_SHIPPING_UPDATE_TEMPLATE, Pair.of(extOrderShippingUpdateRequest, extOrderShippingUpdateResponse),
ORDERS_SHIPPING_UPDATE_TEMPLATE, Pair.of(extOrderShippingUpdateRequest, extOrderShippingUpdateResponse),
ORDER_SET_CANCELLATION_REASON, Pair.<Resource, Resource>of(null, extOrderCancellationReasonUpdateResponse),
ORDER_CUSTOMERS_LEGAL_ENTITY_UPDATE, Pair.<Resource, Resource>of(legalEntityUpdateRequest, legalEntityUpdateResponse)
);

initOrderScenario(
pathsToExpectedResources,
Map.of("expected_starfish_order_id", "test_starfish24_erp_guid",
"expected_order_cancellation_reason", CancellationReason.NO_REASON.name(),
"expected_customer_id", "test-customer_guid",
"legalEntityId", "test-client_guid")
);

final var url = "/v1/orders/reload";
File file = new File(getClass()
.getClassLoader()
.getResource("files/file.csv")
.getFile());

HttpHeaders headers = new HttpHeaders();
headers.setBearerAuth(INTEGRATION_TOKEN);
headers.setContentType(MediaType.MULTIPART_FORM_DATA);

MultiValueMap<String, Object> body = new LinkedMultiValueMap<>();
