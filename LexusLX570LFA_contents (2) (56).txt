body.add("file", new FileSystemResource(file));
HttpEntity<MultiValueMap<String, Object>> request = new HttpEntity<>(body, headers);
var response = restTemplate.exchange(url, HttpMethod.POST, request,
String.class);

consumer.getLatch().await(TIMEOUT.getSeconds(), TimeUnit.SECONDS);

assertEquals(200, response.getStatusCodeValue());
compareResult(response.getBody(), orderReloadResponse);

if (sfOrderServer.getDispatcher() instanceof final StarfishOrderDispatcher orderDispatcher) {
assertEquals(7, orderDispatcher.getValidDispatches(), "Check dispatched ORDER requests");
}
}

/**
* Ð—Ð°Ð³Ð»ÑƒÑˆÐºÐ¸.
*
* @param pathToExpectedResources   - Ð¼Ð°Ð¿Ð° {@link ProductPath} Ð¿ÑƒÑ‚Ð¸ Ðº product-service Ð½Ð° Ð¿Ð°Ñ€Ñƒ Ð¾Ñ‚Ð²ÐµÑ‚-Ð·Ð°Ð¿Ñ€Ð¾Ñ
* Ð´Ð»Ñ Ñ‚ÐµÐºÑƒÑ‰ÐµÐ³Ð¾ Ð¾Ð±Ñ€Ð°Ñ‰ÐµÐ½Ð¸Ñ.
* @param pathTemplateParameters    - Ð·Ð½Ð°Ñ‡ÐµÐ½Ð¸Ñ Ð´Ð»Ñ ÑˆÐ°Ð±Ð»Ð¾Ð½Ð¾Ð² {@link ProductPath} Ð¿ÑƒÑ‚Ð¸.
*/
@SuppressWarnings("PMD.UnusedPrivateMethod")
private void initProductScenario(Map<ProductPath, Pair<Resource, Resource>> pathToExpectedResources,
Map<String, Object> pathTemplateParameters) {
final var dispatcherDatas = new ArrayList<DispatcherData>();

if (pathToExpectedResources.containsKey(PRODUCT_UPDATE)) {
final var resourceResourcePair = pathToExpectedResources.get(PRODUCT_UPDATE);
dispatcherDatas.add(
PRODUCT_UPDATE.buildDispatcherData(
resourceResourcePair, HttpMethod.POST, HttpStatus.OK, pathTemplateParameters));
}

if (pathToExpectedResources.containsKey(CUSTOMERSERVICE_UPDATE)) {
final var resourceResourcePair = pathToExpectedResources.get(CUSTOMERSERVICE_UPDATE);
dispatcherDatas.add(
CUSTOMERSERVICE_UPDATE.buildDispatcherData(
resourceResourcePair, HttpMethod.POST, HttpStatus.OK, pathTemplateParameters));
}

var dispatcher = new StarfishProductDispatcher(dispatcherDatas);
sfProductServer.setDispatcher(dispatcher);
}
}


File: /evrazropos/EMI_evraz_oms_aggregation_service/src/test/java/ru/liga/evraz/aggregation/module/order/UpdateOrderTest.java
Content:
package ru.liga.evraz.aggregation.module.order;

import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.tuple.Pair;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.test.autoconfigure.web.reactive.AutoConfigureWebTestClient;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.core.io.ByteArrayResource;
import org.springframework.core.io.Resource;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.test.annotation.DirtiesContext;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.jdbc.SqlGroup;
import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;
import ru.liga.evraz.aggregation.base.BaseIntegrationTest;
import ru.liga.evraz.aggregation.config.path.OrderPath;
import ru.liga.evraz.aggregation.config.path.ProductPath;
import ru.liga.evraz.aggregation.dispatcher.DispatcherData;
import ru.liga.evraz.aggregation.dispatcher.StarfishOrderDispatcher;
import ru.liga.evraz.aggregation.dispatcher.StarfishProductDispatcher;
import ru.liga.evraz.aggregation.domain.model.order.enums.CancellationReason;
import ru.liga.evraz.aggregation.domain.repository.ProductSkuRepository;

import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.AFTER_TEST_METHOD;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.BEFORE_TEST_METHOD;
import static ru.liga.evraz.aggregation.config.path.BpmPath.BPM_SEND_MESSAGE;
import static ru.liga.evraz.aggregation.config.path.OrderPath.ORDERS_DETAILS_UPDATE;
import static ru.liga.evraz.aggregation.config.path.OrderPath.ORDERS_SHIPPING_UPDATE_TEMPLATE;
import static ru.liga.evraz.aggregation.config.path.OrderPath.ORDER_CREATE;
import static ru.liga.evraz.aggregation.config.path.OrderPath.ORDER_CUSTOMERS_LEGAL_ENTITY_UPDATE;
import static ru.liga.evraz.aggregation.config.path.OrderPath.ORDER_CUSTOMER_UPDATE;
import static ru.liga.evraz.aggregation.config.path.OrderPath.ORDER_CUSTOM_ATTRIBUTES_UPDATE;
import static ru.liga.evraz.aggregation.config.path.OrderPath.ORDER_DELETE;
import static ru.liga.evraz.aggregation.config.path.OrderPath.ORDER_DETAILS_UPDATE;
import static ru.liga.evraz.aggregation.config.path.OrderPath.ORDER_GET_BY_CLIENT_ORDER_ID;
import static ru.liga.evraz.aggregation.config.path.OrderPath.ORDER_ITEMS_UPDATE_TEMPLATE;
import static ru.liga.evraz.aggregation.config.path.OrderPath.ORDER_ITEM_SERVICES_UPDATE_TEMPLATE;
import static ru.liga.evraz.aggregation.config.path.OrderPath.ORDER_SET_CANCELLATION_REASON;
import static ru.liga.evraz.aggregation.config.path.OrderPath.ORDER_SHIPPING_UPDATE_TEMPLATE;
import static ru.liga.evraz.aggregation.config.path.ProductPath.CUSTOMERSERVICE_UPDATE;
import static ru.liga.evraz.aggregation.config.path.ProductPath.PRODUCT_UPDATE;

@Slf4j
@ActiveProfiles("test")
@AutoConfigureWebTestClient(timeout = "5s")
@DisplayName("Ð¢ÐµÑÑ‚Ñ‹ Ð¾Ð±Ð½Ð¾Ð²Ð»ÐµÐ½Ð¸Ñ Ð·Ð°ÐºÐ°Ð·Ð¾Ð², Ð¿Ð¾Ð»ÑƒÑ‡ÐµÐ½Ð½Ñ‹Ñ… Ð¾Ñ‚ 1Ð¡")
@DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_EACH_TEST_METHOD)
@SpringJUnitConfig
@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
class UpdateOrderTest extends BaseIntegrationTest {

@Autowired
private ProductSkuRepository productSkuRepository;

@Value("classpath:/api/order/update/invalidRequest_oneItem.json")
private Resource invalidRequest;

@Value("classpath:/api/order/update/invalidRequest_response.json")
private Resource invalidRequestResponse;

@Value("classpath:/api/order/update/already_exists_request.json")
private Resource orderAlreadyExistsRequest;

@Value("classpath:/api/order/update/already_exists_response.json")
private Resource orderAlreadyExistsResponse;

@Value("classpath:/api/order/update/already_exists_request_for_OA.json")
private Resource orderAlreadyExistsRequest_forOrderAttributes;

@Value("classpath:/api/order/update/already_exists_response_for_OA.json")
private Resource orderAlreadyExistsResponse_forOrderAttributes;

// EXTERNAL

// Product
@Value("classpath:/external/product/product/product_create_request.json")
private Resource extOneItemProductCreateRequest;

@Value("classpath:/external/product/product/product_create_response.json")
private Resource extOneItemProductCreateResponse;

@Value("classpath:/external/product/product/product_create_request_for_OA.json")
private Resource extOneItemProductCreateRequest_forOrderAttributes;

@Value("classpath:/external/product/customer_service/service_create_request.json")
private Resource extOneServiceCreateRequest;

@Value("classpath:/external/product/customer_service/service_create_response.json")
private Resource extOneServiceCreateResponse;

// Order
@Value("classpath:/external/order/by_client_order_id/getOrderByClientOrderId_response.json")
private Resource extOrderGetByClientOrderIdResponse;

@Value("classpath:/external/order/create/order_with_service_create_request.json")
private Resource extOrderWithServiceCreateRequest;

@Value("classpath:/external/order/create/order_with_service_create_on_update_request.json")
private Resource extOrderWithServiceCreateOnUpdateRequest;

@Value("classpath:/external/order/create/order_with_service_create_response.json")
private Resource extOrderWithServiceCreateResponse;

@Value("classpath:/external/order/details/order_details_update_request_with_OA.json")
private Resource extOrderDetailsUpdateRequest_withOrderAttributes;

@Value("classpath:/external/order/details/order_details_update_request.json")
private Resource extOrderDetailsUpdateRequest;

@Value("classpath:/external/order/details/order_details_update_response.json")
private Resource extOrderDetailsUpdateResponse;

@Value("classpath:/external/order/item/update/update_items_request_with_OA.json")
private Resource extOrderItemsUpdateRequest_withOrderAttributes;

@Value("classpath:external/order/item/update/update_items_request_with_OA_orderExistsInStarfish.json")
private Resource extOrderItemsUpdateRequest_withOrderAttributes_orderExistsInStarfish;

@Value("classpath:/external/order/item/update/update_items_request.json")
private Resource extOrderItemsUpdateRequest;

@Value("classpath:/external/order/item/update/update_items_response.json")
private Resource extOrderItemsUpdateResponse;

@Value("classpath:/external/order/custom_attributes/update_custom_attributes_request_with_OA.json")
private Resource extOrderCustomAttributesUpdateRequest_withOrderAttributes;

@Value("classpath:/external/order/custom_attributes/update_custom_attributes_request.json")
private Resource extOrderCustomAttributesUpdateRequest;

@Value("classpath:/external/order/custom_attributes/update_custom_attributes_response.json")
private Resource extOrderCustomAttributesUpdateResponse;

@Value("classpath:/external/order/customer/order_customer_update_request.json")
private Resource extOrderCustomerUpdateRequest;

@Value("classpath:/external/order/customer/order_customer_update_without_contacts_request.json")
private Resource extOrderCustomerUpdateWithoutContactsRequest;

@Value("classpath:/external/order/customer/order_customer_update_response.json")
private Resource extOrderCustomerUpdateResponse;

@Value("classpath:/external/order/item_service/update/update_item_service_request_with_OA.json")
private Resource extOrderItemServicesUpdateRequest_withOrderAttributes;

@Value("classpath:external/order/item_service/update/update_item_service_request_with_OA_withoutStarfishOrderId_orderExistsInStarfish.json")
private Resource extOrderItemServicesUpdateRequest_withOrderAttributes_withoutStarfishOrderId_orderExistsInStarfish;

@Value("classpath:/external/order/item_service/update/update_item_service_request.json")
private Resource extOrderItemServicesUpdateRequest;

@Value("classpath:/external/order/item_service/update/update_item_service_response.json")
private Resource extOrderItemServicesUpdateResponse;

@Value("classpath:/external/order/shipping/update/update_shipping_request.json")
private Resource extOrderShippingUpdateRequest;

@Value("classpath:/external/order/shipping/update/update_shipping_request_for_order_update.json")
private Resource extOrderShippingUpdateForOrderUpdateRequest;

@Value("classpath:/external/order/shipping/update/update_shipping_response.json")
private Resource extOrderShippingUpdateResponse;

@Value("classpath:/external/order/set_cancellation_reason/update_order_cancellation_reason_response.json")
private Resource extOrderCancellationReasonUpdateResponse;

// BPM - service
@Value("classpath:external/bpm/message_order_deleted_req.json")
private Resource bpmnReq;
@Value("classpath:external/bpm/message_order_deleted_resp.json")
private Resource bpmnRes;

@Value("classpath:external/order/legal_entities/order_customers_legal_entity_update_request.json")
private Resource legalEntityUpdateRequest;
@Value("classpath:external/order/legal_entities/order_customers_legal_entity_update_response.json")
private Resource legalEntityUpdateResponse;

@Test
@DisplayName("Ð£ÑÐ¿ÐµÑˆÐ½Ð¾Ðµ Ð¾Ð±Ð½Ð¾Ð²Ð»ÐµÐ½Ð¸Ðµ Ð·Ð°ÐºÐ°Ð·Ð°")
@SqlGroup({
@Sql(value = "/db/order/truncate_order_entities.sql", executionPhase = BEFORE_TEST_METHOD),
@Sql(scripts = "/db/order/order_created_with_shipping_erp_guid.sql", executionPhase = BEFORE_TEST_METHOD),
@Sql(value = "/db/order/truncate_order_entities.sql", executionPhase = AFTER_TEST_METHOD),
})
public void updateOrder() {
assertEquals(5, productSkuRepository.findAll().size());

final var pathesToExpectedResources = Map.of(
ORDER_CREATE, Pair.of(extOrderWithServiceCreateRequest, extOrderWithServiceCreateResponse),
//ORDER_DETAILS_UPDATE, Pair.of(extOrderDetailsUpdateRequest, extOrderDetailsUpdateResponse),
ORDERS_DETAILS_UPDATE, Pair.of(extOrderDetailsUpdateRequest, extOrderDetailsUpdateResponse),
ORDER_CUSTOM_ATTRIBUTES_UPDATE, Pair.of(extOrderCustomAttributesUpdateRequest, extOrderCustomAttributesUpdateResponse),
ORDER_CUSTOMER_UPDATE, Pair.of(extOrderCustomerUpdateWithoutContactsRequest, extOrderCustomerUpdateResponse),
ORDER_ITEMS_UPDATE_TEMPLATE, Pair.of(extOrderItemsUpdateRequest, extOrderItemsUpdateResponse),
ORDER_ITEM_SERVICES_UPDATE_TEMPLATE, Pair.of(extOrderItemServicesUpdateRequest, extOrderItemServicesUpdateResponse),
ORDERS_SHIPPING_UPDATE_TEMPLATE, Pair.of(extOrderShippingUpdateForOrderUpdateRequest, extOrderShippingUpdateResponse),
ORDER_SET_CANCELLATION_REASON, Pair.<Resource, Resource>of(null, extOrderCancellationReasonUpdateResponse),
ORDER_DELETE, Pair.<Resource, Resource>of(null, null),
ORDER_CUSTOMERS_LEGAL_ENTITY_UPDATE, Pair.<Resource, Resource>of(legalEntityUpdateRequest, legalEntityUpdateResponse)
);

initProductScenario();
initOrderScenario(
pathesToExpectedResources,
Map.of("expected_starfish_order_id", "test_starfish24_erp_guid",
"expected_order_cancellation_reason", CancellationReason.NO_REASON.name(),
"expected_customer_id", "test-customer_guid",
"legalEntityId", "test-client_guid")
);

final var bpmPathsToExpectedResources = Map.of(
BPM_SEND_MESSAGE, Pair.of(bpmnReq, bpmnRes)
);

initBpmScenario(
bpmPathsToExpectedResources,
Map.of("messageId", "MESSAGE_ORDER_DELETED",
"orderId", "test_starfish24_erp_guid")
);

customPostScenarioFromResource("/v1/order",
orderAlreadyExistsRequest, orderAlreadyExistsResponse, true, 200);

// ÐŸÑ€Ð¾Ð²ÐµÑ€ÑÐµÐ¼ Ñ‡Ñ‚Ð¾ ProductSku Ð½Ðµ Ñ€Ð°ÑÑˆÐ¸Ñ€Ð¸Ð»Ð¸ÑÑŒ
assertEquals(7, productSkuRepository.findAll().size());

if (sfOrderServer.getDispatcher() instanceof final StarfishOrderDispatcher orderDispatcher) {
assertEquals(7, orderDispatcher.getValidDispatches(), "Check dispatched ORDER requests");
}
if (sfProductServer.getDispatcher() instanceof final StarfishProductDispatcher productDispatcher) {
assertEquals(2, productDispatcher.getValidDispatches(), "Check dispatched PRODUCT requests");
}
}

@Test
@DisplayName("Ð£ÑÐ¿ÐµÑˆÐ½Ð¾Ðµ Ð¾Ð±Ð½Ð¾Ð²Ð»ÐµÐ½Ð¸Ðµ Ð·Ð°ÐºÐ°Ð·Ð° Ñ Ð¾Ð±Ð¾Ð³Ð°Ñ‰ÐµÐ½Ð¸ÐµÐ¼ Ð”Ð¾Ð¿. ÐÑ‚Ñ€Ð¸Ð±ÑƒÑ‚Ð°Ð¼Ð¸ Ð—Ð°ÐºÐ°Ð·Ð°1")
@SqlGroup({
@Sql(value = "/db/order/truncate_order_entities.sql", executionPhase = BEFORE_TEST_METHOD),
@Sql(scripts = "/db/order/order_created_with_order_attributes.sql", executionPhase = BEFORE_TEST_METHOD),
@Sql(value = "/db/order/truncate_order_entities.sql", executionPhase = AFTER_TEST_METHOD),
})
public void updateOrderWithOrderAttributes() {
assertEquals(5, productSkuRepository.findAll().size());

final var orderPathesToExpectedResources = Map.of(
/*ORDER_CREATE, Pair.of(extOrderWithServiceCreateRequest, extOrderWithServiceCreateResponse),*/
ORDERS_DETAILS_UPDATE, Pair.of(extOrderDetailsUpdateRequest_withOrderAttributes, extOrderDetailsUpdateResponse),
ORDER_CUSTOM_ATTRIBUTES_UPDATE, Pair.of(extOrderCustomAttributesUpdateRequest_withOrderAttributes, extOrderCustomAttributesUpdateResponse),
ORDER_CUSTOMER_UPDATE, Pair.of(extOrderCustomerUpdateRequest, extOrderCustomerUpdateResponse),
ORDER_ITEMS_UPDATE_TEMPLATE, Pair.of(extOrderItemsUpdateRequest_withOrderAttributes, extOrderItemsUpdateResponse),
ORDER_ITEM_SERVICES_UPDATE_TEMPLATE, Pair.of(extOrderItemServicesUpdateRequest_withOrderAttributes, extOrderItemServicesUpdateResponse),
ORDERS_SHIPPING_UPDATE_TEMPLATE, Pair.of(extOrderShippingUpdateRequest, extOrderShippingUpdateResponse),
ORDER_SET_CANCELLATION_REASON, Pair.<Resource, Resource>of(null, extOrderCancellationReasonUpdateResponse),
ORDER_DELETE, Pair.<Resource, Resource>of(null, null),
ORDER_CUSTOMERS_LEGAL_ENTITY_UPDATE, Pair.<Resource, Resource>of(legalEntityUpdateRequest, legalEntityUpdateResponse)
);

final var productPathesToExpectedResources = Map.of(
PRODUCT_UPDATE, Pair.of(extOneItemProductCreateRequest_forOrderAttributes, extOneItemProductCreateResponse),
CUSTOMERSERVICE_UPDATE, Pair.of(extOneServiceCreateRequest, extOneServiceCreateResponse)
);

initProductScenario(productPathesToExpectedResources, Map.of());
initOrderScenario(
orderPathesToExpectedResources,
Map.of("expected_starfish_order_id", "test_starfish24_erp_guid",
"expected_order_cancellation_reason", CancellationReason.NO_REASON.name(),
"expected_customer_id", "test-customer_guid",
"legalEntityId", "test-client_guid")
);

final var bpmPathsToExpectedResources = Map.of(
BPM_SEND_MESSAGE, Pair.of(bpmnReq, bpmnRes)
);

initBpmScenario(
bpmPathsToExpectedResources,
Map.of("messageId", "MESSAGE_ORDER_DELETED",
"orderId", "test_starfish24_erp_guid")
);

customPostScenarioFromResource("/v1/order",
orderAlreadyExistsRequest_forOrderAttributes, orderAlreadyExistsResponse_forOrderAttributes, true, 200);

// ÐŸÑ€Ð¾Ð²ÐµÑ€ÑÐµÐ¼ Ñ‡Ñ‚Ð¾ ProductSku Ð½Ðµ Ñ€Ð°ÑÑˆÐ¸Ñ€Ð¸Ð»Ð¸ÑÑŒ
assertEquals(7, productSkuRepository.findAll().size());

if (sfOrderServer.getDispatcher() instanceof final StarfishOrderDispatcher orderDispatcher) {
assertEquals(7, orderDispatcher.getValidDispatches(), "Check dispatched ORDER requests");
}
if (sfProductServer.getDispatcher() instanceof final StarfishProductDispatcher productDispatcher) {
assertEquals(2, productDispatcher.getValidDispatches(), "Check dispatched PRODUCT requests");
}
}

@Test
@DisplayName("Ð£ÑÐ¿ÐµÑˆÐ½Ð¾Ðµ Ð¾Ð±Ð½Ð¾Ð²Ð»ÐµÐ½Ð¸Ðµ Ð·Ð°ÐºÐ°Ð·Ð° Ñ Ð¾Ð±Ð¾Ð³Ð°Ñ‰ÐµÐ½Ð¸ÐµÐ¼ Ð”Ð¾Ð¿. ÐÑ‚Ñ€Ð¸Ð±ÑƒÑ‚Ð°Ð¼Ð¸ Ð—Ð°ÐºÐ°Ð·Ð°2")
@SqlGroup({
@Sql(value = "/db/order/truncate_order_entities.sql", executionPhase = BEFORE_TEST_METHOD),
@Sql(scripts = "/db/order/order_created_with_order_attributes_for_similar_items.sql", executionPhase = BEFORE_TEST_METHOD),
@Sql(value = "/db/order/truncate_order_entities.sql", executionPhase = AFTER_TEST_METHOD),
})
public void updateOrderWithOrderAttributes_with_similar_items() {
assertEquals(2, productSkuRepository.findAll().size());

final var orderPathesToExpectedResources = Map.of(
ORDER_CREATE, Pair.of(extOrderWithServiceCreateRequest, extOrderWithServiceCreateResponse),
ORDERS_DETAILS_UPDATE, Pair.of(extOrderDetailsUpdateRequest_withOrderAttributes, extOrderDetailsUpdateResponse),
ORDER_CUSTOM_ATTRIBUTES_UPDATE, Pair.of(extOrderCustomAttributesUpdateRequest_withOrderAttributes, extOrderCustomAttributesUpdateResponse),
ORDER_CUSTOMER_UPDATE, Pair.of(extOrderCustomerUpdateRequest, extOrderCustomerUpdateResponse),
ORDER_ITEMS_UPDATE_TEMPLATE, Pair.of(extOrderItemsUpdateRequest_withOrderAttributes, extOrderItemsUpdateResponse),
ORDER_ITEM_SERVICES_UPDATE_TEMPLATE, Pair.of(extOrderItemServicesUpdateRequest_withOrderAttributes, extOrderItemServicesUpdateResponse),
ORDERS_SHIPPING_UPDATE_TEMPLATE, Pair.of(extOrderShippingUpdateRequest, extOrderShippingUpdateResponse),
ORDER_SET_CANCELLATION_REASON, Pair.<Resource, Resource>of(null, extOrderCancellationReasonUpdateResponse),
ORDER_DELETE, Pair.<Resource, Resource>of(null, null),
