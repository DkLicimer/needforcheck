private static final String UPDATE_VARIABLES_URL = "/event/handle/update-variables";

@Value("classpath:api/event_handler/update_process_variables_request.json")
private Resource updateProcessVariablesRequest;
@Value("classpath:api/event_handler/update_process_variables_response.json")
private Resource updateProcessVariablesResponse;
@Value("classpath:external/event_handler/order/get_order_custom_attributes_request.json")
private Resource getCustomAttributesRequest;
@Value("classpath:external/event_handler/order/get_order_custom_attributes_response.json")
private Resource getCustomAttributesResponse;
@Value("classpath:external/event_handler/order/get_order_request.json")
private Resource getOrderByIdRequest;
@Value("classpath:external/event_handler/order/get_order_response.json")
private Resource getOrderByIdResponse;
@Value("classpath:external/event_handler/bpm/set_process_variables_request.json")
private Resource setProcessVariablesRequest;
@Value("classpath:external/event_handler/bpm/set_process_variables_response.json")
private Resource setProcessVariablesResponse;

@Test
@DisplayName("Ð£ÑÐ¿ÐµÑˆÐ½Ð¾Ðµ Ð¾Ñ‚Ð¿Ñ€Ð°Ð²ÐºÐ° Ð¿ÐµÑ€ÐµÐ¼ÐµÐ½Ð½Ñ‹Ñ… Ð¿Ñ€Ð¾Ñ†ÐµÑÑÐ° Ð² camunda")
public void setProcessVariablesSuccess() {

final var pathsToExpectedResources = Map.of(
ORDER_GET_CUSTOM_ATTRIBUTES, Pair.of(getCustomAttributesRequest, getCustomAttributesResponse),
ORDER_GET_BY_ORDER_ID, Pair.of(getOrderByIdRequest, getOrderByIdResponse),
BPM_SET_VARIABLES, Pair.of(setProcessVariablesRequest, setProcessVariablesResponse)
);

final var pathTemplateParameters = new HashMap<String, Object>() {{
put("orderId", SF_ORDER_ID);
}};

initHttpMockServersScenario(pathsToExpectedResources, pathTemplateParameters);

customPostScenarioFromResource(UPDATE_VARIABLES_URL, updateProcessVariablesRequest, updateProcessVariablesResponse, true, 200);
}

private <E extends BaseEnum> void initHttpMockServersScenario(
Map<E, Pair<Resource, Resource>> pathToExpectedResources,
Map<String, Object> pathTemplateParameters) {
initGetOrderWithCustomAttributesScenario(pathToExpectedResources, Map.of(), pathTemplateParameters);
initSetProcessVariablesScenario(pathToExpectedResources, Map.of(), pathTemplateParameters);
}

private <E extends BaseEnum> void initGetOrderWithCustomAttributesScenario(
Map<E, Pair<Resource, Resource>> pathToExpectedResources,
Map<E, HttpStatus> pathsToExpectedHttpStatus,
Map<String, Object> pathTemplateParameters) {

final var dispatcherDatas = new ArrayList<DispatcherData>();

if (pathToExpectedResources.containsKey(ORDER_GET_BY_ORDER_ID)) {
final var resourceResourcePair = pathToExpectedResources.get(ORDER_GET_BY_ORDER_ID);
dispatcherDatas.add(
ORDER_GET_BY_ORDER_ID.buildDispatcherData(
resourceResourcePair, HttpMethod.GET, HttpStatus.OK, pathTemplateParameters));
}

if (pathToExpectedResources.containsKey(ORDER_GET_CUSTOM_ATTRIBUTES)) {
final var resourceResourcePair = pathToExpectedResources.get(ORDER_GET_CUSTOM_ATTRIBUTES);
dispatcherDatas.add(
ORDER_GET_CUSTOM_ATTRIBUTES.buildDispatcherData(
resourceResourcePair, HttpMethod.GET, HttpStatus.OK, pathTemplateParameters));
}

var dispatcher = new StarfishOrderDispatcher(dispatcherDatas);
sfOrderServer.setDispatcher(dispatcher);
}

private <E extends BaseEnum> void initSetProcessVariablesScenario(
Map<E, Pair<Resource, Resource>> pathToExpectedResources,
Map<E, HttpStatus> pathsToExpectedHttpStatus,
Map<String, Object> pathTemplateParameters) {

final var dispatcherDatas = new ArrayList<DispatcherData>();

if (pathToExpectedResources.containsKey(BPM_SET_VARIABLES)) {
final var resourceResourcePair = pathToExpectedResources.get(BPM_SET_VARIABLES);
dispatcherDatas.add(
BPM_SET_VARIABLES.buildDispatcherData(
resourceResourcePair, HttpMethod.POST, HttpStatus.OK, pathTemplateParameters));
}

var dispatcher = new BpmDispatcher(dispatcherDatas);
bpmServer.setDispatcher(dispatcher);
}
}


File: /evrazropos/EMI_evraz_oms_aggregation_service/src/test/java/ru/liga/evraz/aggregation/module/erp_task/ErpTaskModuleTest.java
Content:
package ru.liga.evraz.aggregation.module.erp_task;

import lombok.SneakyThrows;
import lombok.extern.slf4j.Slf4j;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.test.autoconfigure.web.reactive.AutoConfigureWebTestClient;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.core.io.Resource;
import org.springframework.test.annotation.DirtiesContext;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.jdbc.SqlGroup;
import ru.liga.evraz.aggregation.adapter.db.CommandUuidGenerator;
import ru.liga.evraz.aggregation.adapter.db.ErpTaskJpaRepository;
import ru.liga.evraz.aggregation.adapter.db.ErpTaskUuidGenerator;
import ru.liga.evraz.aggregation.adapter.http.out.feign.ErpTaskFeignWrapper;
import ru.liga.evraz.aggregation.base.BaseIntegrationTest;
import ru.liga.evraz.aggregation.domain.model.order.enums.ErpTaskStatus;

import static org.assertj.core.api.AssertionsForClassTypes.assertThat;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.doReturn;

/**
* @author Anton Oleynikov {@literal <antonleynikov@gmail.com>}
*/
@Slf4j
@ActiveProfiles("test")
@AutoConfigureWebTestClient(timeout = "5s")
@DisplayName("ÐœÐ¾Ð´ÑƒÐ»ÑŒ Ñ‚ÐµÑÑ‚ Ð¿Ð¾ Ñ€Ð°Ð±Ð¾Ñ‚Ðµ Ñ Ð·Ð°Ð´Ð°Ñ‡Ð°Ð¼Ð¸ 1Ð¡")
@DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_EACH_TEST_METHOD)
@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
public class ErpTaskModuleTest extends BaseIntegrationTest {
@Value("classpath:/api/erp_task/task_success_request_1.json")
private Resource taskSuccessRequest1;

@Value("classpath:/api/erp_task/task_success_response_1.json")
private Resource taskSuccessResponse1;

@Value("classpath:/api/erp_task/task_success_request_2.json")
private Resource taskSuccessRequest2;

@Value("classpath:/api/erp_task/task_success_response_2.json")
private Resource taskSuccessResponse2;

@Value("classpath:/api/erp_task/task_failed_request_1.json")
private Resource taskFailedRequest1;

@Value("classpath:/api/erp_task/task_failed_response_1.json")
private Resource taskFailedResponse1;

@MockBean
private ErpTaskFeignWrapper erpTaskFeignWrapper;

@MockBean
private ErpTaskUuidGenerator erpTaskUuidGenerator;

@MockBean
private CommandUuidGenerator commandUuidGenerator;

@Autowired
private ErpTaskJpaRepository erpTaskJpaRepository;

@Test
@DisplayName("Ð£ÑÐ¿ÐµÑˆÐ½Ð¾Ðµ ÑÐ¾Ð·Ð´Ð°Ð½Ð¸Ðµ Ð·Ð°Ð´Ð°Ñ‡Ð¸ 1Ð¡")
@SqlGroup({
@Sql(scripts = "/db/erp_task/fill-db-1.sql")})
@SneakyThrows
void updateTaskSuccess() {
doReturn("b41db9b3-27d6-4c00-a6e6-c15b7df73306").when(erpTaskUuidGenerator).generateUuid();
doReturn("test-command-guid").when(commandUuidGenerator).generateUuid();
doReturn(true).when(erpTaskFeignWrapper).sendErpTask(any());

customPostScenarioFromResource("/v1/erp/task",
taskSuccessRequest1, taskSuccessResponse1, true, 200);
}

@Test
@DisplayName("Ð£ÑÐ¿ÐµÑˆÐ½Ð¾Ðµ ÑÐ¾Ð·Ð´Ð°Ð½Ð¸Ðµ Ð·Ð°Ð´Ð°Ñ‡Ð¸ 1Ð¡ Ñ responsibleId")
@SqlGroup({
@Sql(scripts = "/db/erp_task/fill-db-1.sql")})
@SneakyThrows
void updateTaskSuccess2() {
doReturn("b41db9b3-27d6-4c00-a6e6-c15b7df73307").when(erpTaskUuidGenerator).generateUuid();
doReturn(true).when(erpTaskFeignWrapper).sendErpTask(any());
doReturn("test-command-guid-2").when(commandUuidGenerator).generateUuid();


customPostScenarioFromResource("/v1/erp/task",
taskSuccessRequest2, taskSuccessResponse2, true, 200);
}

@Test
@DisplayName("ÐžÑˆÐ¸Ð±ÐºÐ° Ð¿Ñ€Ð¸ ÑÐ¾Ð·Ð´Ð°Ð½Ð¸Ðµ Ð·Ð°Ð´Ð°Ñ‡Ð¸ 1Ð¡ Ñ responsibleId")
@SqlGroup({
@Sql(scripts = "/db/erp_task/fill-db-1.sql")})
@SneakyThrows
void updateTaskFailed1() {
customPostScenarioFromResource("/v1/erp/task",
taskFailedRequest1, taskFailedResponse1, 400);
}

@Value("classpath:api/erp_task/send_command_status/update_erp_tak_status_request.json")
private Resource updateErpTaskStatusRequest;
@Value("classpath:api/erp_task/send_command_status/update_erp_tak_status_response.json")
private Resource updateErpTaskStatusResponse;
@Value("classpath:api/erp_task/send_command_status/update_erp_tak_status_request_wo_responsible.json")
private Resource updateErpTaskStatusRequestWoResponsible;

@Test
@DisplayName("Ð£ÑÐ¿ÐµÑˆÐ½Ð¾Ðµ Ð¾Ð±Ð½Ð¾Ð²Ð»ÐµÐ½Ð¸Ðµ ÑÑ‚Ð°Ñ‚ÑƒÑÐ° Ð·Ð°Ð´Ð°Ñ‡Ð¸ ERP")
@SneakyThrows
@SqlGroup({
@Sql(scripts = "/db/erp_task/fill_erp-db-2.sql")})
public void success() {
final var guid = "test-erp-task-commandGuid";

customPostScenarioFromResource("/v1/erp/task/status", updateErpTaskStatusRequest, updateErpTaskStatusResponse, true, 200);


final var entity = erpTaskJpaRepository.findById(guid).get();

Assertions.assertAll(
() -> assertThat(entity.getErpStatus()).isEqualTo(ErpTaskStatus.IN_PROGRESS),
() -> assertThat(entity.getDecision()).isEqualTo("decided"),
() -> assertThat(entity.getResponsibleFullName()).isEqualTo("ÐšÑƒÐ·Ð½ÐµÑ†Ð¾Ð² Ð")
);
}

@Test
@DisplayName("Ð£ÑÐ¿ÐµÑˆÐ½Ð¾Ðµ Ð¾Ð±Ð½Ð¾Ð²Ð»ÐµÐ½Ð¸Ðµ ÑÑ‚Ð°Ñ‚ÑƒÑÐ° Ð·Ð°Ð´Ð°Ñ‡Ð¸ ERP Ð±ÐµÐ· ÐžÑ‚Ð²ÐµÑ‚ÑÑ‚Ð²ÐµÐ½Ð½Ð¾Ð³Ð¾")
@SneakyThrows
@SqlGroup({
@Sql(scripts = "/db/erp_task/fill_erp-db-2.sql")})
public void update_wo_responsible() {
final var guid = "test-erp-task-commandGuid-2";

customPostScenarioFromResource("/v1/erp/task/status", updateErpTaskStatusRequestWoResponsible, updateErpTaskStatusResponse, true, 200);


final var entity = erpTaskJpaRepository.findById(guid).get();

Assertions.assertAll(
() -> assertThat(entity.getResponsibleId()).isNull(),
() -> assertThat(entity.getResponsibleEmail()).isNull(),
() -> assertThat(entity.getResponsibleFullName()).isNull()
);
}

}


File: /evrazropos/EMI_evraz_oms_aggregation_service/src/test/java/ru/liga/evraz/aggregation/module/delivery_attribute/CreateDeliveryAttributeTest.java
Content:
package ru.liga.evraz.aggregation.module.delivery_attribute;

import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.tuple.Pair;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.test.autoconfigure.web.reactive.AutoConfigureWebTestClient;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.core.io.Resource;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.test.annotation.DirtiesContext;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.jdbc.SqlGroup;
import ru.liga.evraz.aggregation.base.BaseIntegrationTest;
import ru.liga.evraz.aggregation.config.path.ProductPath;
import ru.liga.evraz.aggregation.dispatcher.DispatcherData;
import ru.liga.evraz.aggregation.dispatcher.StarfishOrderDispatcher;
import ru.liga.evraz.aggregation.dispatcher.StarfishProductDispatcher;
import ru.liga.evraz.aggregation.domain.model.order.enums.CancellationReason;

import java.util.ArrayList;
import java.util.Map;
import java.util.concurrent.Executor;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.AFTER_TEST_METHOD;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.BEFORE_TEST_METHOD;
import static ru.liga.evraz.aggregation.config.path.OrderPath.ORDERS_DETAILS_UPDATE;
import static ru.liga.evraz.aggregation.config.path.OrderPath.ORDERS_SHIPPING_UPDATE_TEMPLATE;
import static ru.liga.evraz.aggregation.config.path.OrderPath.ORDER_CUSTOMERS_LEGAL_ENTITY_UPDATE;
import static ru.liga.evraz.aggregation.config.path.OrderPath.ORDER_CUSTOMER_UPDATE;
import static ru.liga.evraz.aggregation.config.path.OrderPath.ORDER_CUSTOM_ATTRIBUTES_UPDATE;
import static ru.liga.evraz.aggregation.config.path.OrderPath.ORDER_DETAILS_UPDATE;
import static ru.liga.evraz.aggregation.config.path.OrderPath.ORDER_ITEMS_UPDATE_TEMPLATE;
import static ru.liga.evraz.aggregation.config.path.OrderPath.ORDER_ITEM_SERVICES_UPDATE_TEMPLATE;
import static ru.liga.evraz.aggregation.config.path.OrderPath.ORDER_SHIPPING_UPDATE_TEMPLATE;
import static ru.liga.evraz.aggregation.config.path.ProductPath.CUSTOMERSERVICE_UPDATE;
import static ru.liga.evraz.aggregation.config.path.ProductPath.PRODUCT_UPDATE;

@Slf4j
@ActiveProfiles("test")
@AutoConfigureWebTestClient(timeout = "5s")
@DisplayName("Ð¢ÐµÑÑ‚ ÑÐ¾Ñ…Ñ€Ð°Ð½ÐµÐ½Ð¸Ðµ Ð´Ð¾Ð¿ Ð°Ñ‚Ñ‚Ñ€Ð¸Ð±ÑƒÑ‚Ð¾Ð² Ð´Ð¾ÑÑ‚Ð°Ð²ÐºÐ¸, Ð¿Ð¾Ð»ÑƒÑ‡ÐµÐ½Ð½Ñ‹Ñ… Ð¾Ñ‚ 1Ð¡")
@DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_EACH_TEST_METHOD)
@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
class CreateDeliveryAttributeTest extends BaseIntegrationTest {

private static final String DB_CLEANER = "/db/delivery_attribute/cleaner.sql";
private static final String DB_FILL = "/db/delivery_attribute/delivery_created.sql";

@Value("classpath:api/delivery_attribute/create/request.json")
private Resource createDeliveryAttributeRequest;
@Value("classpath:api/delivery_attribute/create/response.json")
private Resource createDeliveryAttributeResponse;

@Value("classpath:external/delivery/attribute/update_shipping_request1.json")
private Resource extOrderShippingUpdateRequest;
@Value("classpath:external/order/shipping/update/update_shipping_response3.json")
private Resource extOrderShippingUpdateResponse;
@Value("classpath:external/delivery/attribute/order_details_update_request1.json")
private Resource extOrderDetailsUpdateRequest;
@Value("classpath:external/order/details/order_details_update_for_oa_attributes_response.json")
private Resource extOrderDetailsUpdateResponse;
@Value("classpath:external/delivery/attribute/update_custom_attributes_request1.json")
private Resource extOrderCustomAttributesForOAUpdateValidateSkuTypeRequest;
@Value("classpath:/external/order/custom_attributes/updCustomAttr_success.json")
private Resource extOrderCustomAttributesForOAUpdateResponse;
@Value("classpath:external/delivery/attribute/update_items_request1.json")
private Resource extOrderItemsForOAUpdateValidateSkuTypeRequest;
@Value("classpath:/external/order/item/update/update_items_for_OA_emptyListResponse.json")
private Resource extOrderItemsForOAUpdateResponse;
@Value("classpath:external/delivery/attribute/update_item_service_request1.json")
private Resource extOrderItemServicesForOAUpdateRequest;
@Value("classpath:/external/order/item_service/update/update_item_service_response.json")
private Resource extOrderItemServicesForOAUpdateResponse;
@Value("classpath:api/delivery_attribute/update/order_customer_request.json")
private Resource customerUpdateRequest;
@Value("classpath:api/delivery_attribute/update/order_customer_response.json")
private Resource customerUpdateResponse;

@Value("classpath:/external/product/customer_service/createDeliveryAttributeSuccess_Req.json")
private Resource extCustomerServiceCatalogRequest_createDeliveryAttributeSuccess;

@Value("classpath:/external/product/customer_service/service_create_response.json")
private Resource extCustomerServiceCatalogResponse;

@Value("classpath:api/legal_entity/order_customers_legal_entity_update_request.json")
private Resource legalEntityUpdateRequest;
@Value("classpath:api/legal_entity/order_customers_legal_entity_update_response.json")
private Resource legalEntityUpdateResponse;

@Autowired
@Qualifier("asyncSecurityCtxTaskExecutor")
public Executor testExecutor;

@Test
@DisplayName("Ð£ÑÐ¿ÐµÑˆÐ½Ð¾Ðµ ÑÐ¾Ñ…Ñ€Ð°Ð½ÐµÐ½Ð¸Ðµ Ð´Ð¾Ð¿ Ð°Ñ‚Ñ‚Ñ€Ð¸Ð±ÑƒÑ‚Ð° Ð´Ð¾ÑÑ‚Ð°Ð²ÐºÐ¸")
@SqlGroup({
@Sql(value = DB_CLEANER, executionPhase = BEFORE_TEST_METHOD),
@Sql(value = DB_FILL, executionPhase = BEFORE_TEST_METHOD),
@Sql(value = DB_CLEANER, executionPhase = AFTER_TEST_METHOD),
})
public void createDeliveryAttributeSuccess() {

final var productPathesToExpectedResources = Map.of(
CUSTOMERSERVICE_UPDATE, Pair.of(extCustomerServiceCatalogRequest_createDeliveryAttributeSuccess, extCustomerServiceCatalogResponse)
);
initProductScenario(productPathesToExpectedResources, Map.of());

final var pathsToExpectedResources = Map.of(
ORDER_SHIPPING_UPDATE_TEMPLATE, Pair.of(extOrderShippingUpdateRequest, extOrderShippingUpdateResponse),
ORDERS_SHIPPING_UPDATE_TEMPLATE, Pair.of(extOrderShippingUpdateRequest, extOrderShippingUpdateResponse),
ORDER_DETAILS_UPDATE, Pair.of(extOrderDetailsUpdateRequest, extOrderDetailsUpdateResponse),
ORDERS_DETAILS_UPDATE, Pair.of(extOrderDetailsUpdateRequest, extOrderDetailsUpdateResponse),
ORDER_CUSTOM_ATTRIBUTES_UPDATE, Pair.of(extOrderCustomAttributesForOAUpdateValidateSkuTypeRequest, extOrderCustomAttributesForOAUpdateResponse),
ORDER_ITEMS_UPDATE_TEMPLATE, Pair.of(extOrderItemsForOAUpdateValidateSkuTypeRequest, extOrderItemsForOAUpdateResponse),
ORDER_ITEM_SERVICES_UPDATE_TEMPLATE, Pair.of(extOrderItemServicesForOAUpdateRequest, extOrderItemServicesForOAUpdateResponse),
ORDER_CUSTOMER_UPDATE, Pair.of(customerUpdateRequest, customerUpdateResponse),
ORDER_CUSTOMERS_LEGAL_ENTITY_UPDATE, Pair.<Resource, Resource>of(legalEntityUpdateRequest, legalEntityUpdateResponse)
);

final var pathsTemplateParams = Map.<String, Object>of(
"expected_starfish_order_id", "test_Sf_erp_guid2",
"expected_order_cancellation_reason", CancellationReason.NO_REASON.name(),
"expected_customer_id", "test-customer_guid",
"legalEntityId", "test-client_guid");
initOrderScenario(pathsToExpectedResources, pathsTemplateParams);

customPostScenarioFromResource("/v1/delivery/additional-attribute",
createDeliveryAttributeRequest, createDeliveryAttributeResponse, true, 200);

final var dispatcher = (StarfishOrderDispatcher) sfOrderServer.getDispatcher();
assertEquals(7, dispatcher.getValidDispatches(), "Check dispatched requests");
}

/**
* Ð—Ð°Ð³Ð»ÑƒÑˆÐºÐ¸.
*
* @param pathToExpectedResources   - Ð¼Ð°Ð¿Ð° {@link ProductPath} Ð¿ÑƒÑ‚Ð¸ Ðº product-service Ð½Ð° Ð¿Ð°Ñ€Ñƒ Ð¾Ñ‚Ð²ÐµÑ‚-Ð·Ð°Ð¿Ñ€Ð¾Ñ
* Ð´Ð»Ñ Ñ‚ÐµÐºÑƒÑ‰ÐµÐ³Ð¾ Ð¾Ð±Ñ€Ð°Ñ‰ÐµÐ½Ð¸Ñ.
* @param pathTemplateParameters    - Ð·Ð½Ð°Ñ‡ÐµÐ½Ð¸Ñ Ð´Ð»Ñ ÑˆÐ°Ð±Ð»Ð¾Ð½Ð¾Ð² {@link ProductPath} Ð¿ÑƒÑ‚Ð¸.
*/
@SuppressWarnings("PMD.UnusedPrivateMethod")
private void initProductScenario(Map<ProductPath, Pair<Resource, Resource>> pathToExpectedResources,
Map<String, Object> pathTemplateParameters) {
final var dispatcherDatas = new ArrayList<DispatcherData>();

if (pathToExpectedResources.containsKey(PRODUCT_UPDATE)) {
final var resourceResourcePair = pathToExpectedResources.get(PRODUCT_UPDATE);
dispatcherDatas.add(
PRODUCT_UPDATE.buildDispatcherData(
resourceResourcePair, HttpMethod.POST, HttpStatus.OK, pathTemplateParameters));
}

if (pathToExpectedResources.containsKey(CUSTOMERSERVICE_UPDATE)) {
