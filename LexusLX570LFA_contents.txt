Prompt: Analyze the LexusLX570LFA repository to understand its structure, purpose, and functionality. Follow these steps to study the codebase:

1. Read the README file to gain an overview of the project, its goals, and any setup instructions.

2. Examine the repository structure to understand how the files and directories are organized.

3. Identify the main entry point of the application (e.g., main.py, app.py, index.js) and start analyzing the code flow from there.

4. Study the dependencies and libraries used in the project to understand the external tools and frameworks being utilized.

5. Analyze the core functionality of the project by examining the key modules, classes, and functions.

6. Look for any configuration files (e.g., config.py, .env) to understand how the project is configured and what settings are available.

7. Investigate any tests or test directories to see how the project ensures code quality and handles different scenarios.

8. Review any documentation or inline comments to gather insights into the codebase and its intended behavior.

9. Identify any potential areas for improvement, optimization, or further exploration based on your analysis.

10. Provide a summary of your findings, including the project's purpose, key features, and any notable observations or recommendations.

Use the files and contents provided below to complete this analysis:

README:
# Introduction 
TODO: Give a short introduction of your project. Let this section explain the objectives or the motivation behind this project. 

# Getting Started
TODO: Guide users through getting your code up and running on their own system. In this section you can talk about:
1.	Installation process
2.	Software dependencies
3.	Latest releases
4.	API references

# Build and Test
TODO: Describe and show how to build your code and run the tests. 

# Contribute
TODO: Explain how other users and developers can contribute to make your code better. 

If you want to learn more about creating good readme files then refer the following [guidelines](https://docs.microsoft.com/en-us/azure/devops/repos/git/create-a-readme?view=azure-devops). You can also seek inspiration from the below readme files:
- [ASP.NET Core](https://github.com/aspnet/Home)
- [Visual Studio Code](https://github.com/Microsoft/vscode)
- [Chakra Core](https://github.com/Microsoft/ChakraCore)

Repository Structure: LexusLX570LFA
/README.md
/evrazropos/
/evrazropos/EMI_evraz_oms_bitrix_adapter/
/evrazropos/EMI_evraz_oms_bitrix_adapter/.gitignore
/evrazropos/EMI_evraz_oms_bitrix_adapter/.gitlab-ci.yml
/evrazropos/EMI_evraz_oms_bitrix_adapter/Dockerfile
/evrazropos/EMI_evraz_oms_bitrix_adapter/GitVersion.yml
/evrazropos/EMI_evraz_oms_bitrix_adapter/README.md
/evrazropos/EMI_evraz_oms_bitrix_adapter/ci/
/evrazropos/EMI_evraz_oms_bitrix_adapter/client.truststore.jks
/evrazropos/EMI_evraz_oms_bitrix_adapter/deployment/
/evrazropos/EMI_evraz_oms_bitrix_adapter/deployment_old/
/evrazropos/EMI_evraz_oms_bitrix_adapter/lombok.config
/evrazropos/EMI_evraz_oms_bitrix_adapter/mvnw
/evrazropos/EMI_evraz_oms_bitrix_adapter/mvnw.cmd
/evrazropos/EMI_evraz_oms_bitrix_adapter/openapi/
/evrazropos/EMI_evraz_oms_bitrix_adapter/pom.xml
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/java/
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/api/
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/application-test.yml
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/db/
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/external/
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/kafka/
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/logback-test.xml
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/models/
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/models/createTaskModelSuccess.json
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/models/createTaskModelSuccessWithTechId.json
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/models/createTaskModelSuccess_without_bitrixId.json
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/models/updatedTaskModelSuccess.json
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/kafka/template/
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/kafka/template/taskExecutionInvalidStatus.json
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/kafka/template/taskExecutionStatus.json
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/kafka/template/taskExecutionStatus_notCompletedTask.json
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/kafka/template/taskExecutionStatus_unknownResultCode.json
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/external/addHistoryCancelSuccess_request.json
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/external/addHistoryCancelSuccess_response.json
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/external/addHistorySuccess_request.json
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/external/addHistorySuccess_response.json
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/external/addHistoryUpdTaskStatus_request.json
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/external/addHistoryUpdTaskStatus_response.json
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/external/addHistoryUpdTaskStatus_unknownResultCode_request.json
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/external/addHistoryUpdateSuccess_request.json
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/external/addHistoryUpdateSuccess_response.json
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/external/cancelTaskSuccess_request.json
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/external/cancelTaskSuccess_response.json
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/external/createManagerTaskFailed.json
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/external/createTaskRequestSuccess.json
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/external/createTaskRequestWithTechId.json
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/external/createTaskResponseSuccess.json
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/external/getResponsibleIdRequest.json
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/external/getResponsibleIdResponse.json
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/external/updatedTaskSuccess_request.json
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/external/updatedTaskSuccess_response.json
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/db/clean_bitrix_tasks.sql
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/db/init_bitrix_tasks.sql
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/db/init_bitrix_tasks_with_bitrix_id.sql
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/api/cancelTaskRequestSuccess.json
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/api/cancelTaskRequestSuccessForHistory.json
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/api/cancelTaskRequestUnSuccess.json
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/api/cancelTaskResponseSuccess.json
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/api/cancelTaskResponseUnSuccess.json
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/api/createTaskRequestSuccess.json
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/api/createTaskRequestUnSuccess.json
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/api/createTaskResponseSuccess.json
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/api/createTaskResponseUnSuccess.json
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/api/createTaskResponse_taskWasNotCreatedInARM.json
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/api/getOrderTasks/
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/api/updateTaskSuccess_request.json
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/api/updateTaskSuccess_response.json
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/api/getOrderTasks/getOrderTaskRequestByOrderAndTypeSuccess.json
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/api/getOrderTasks/getOrderTaskRequestOnlyByOrderSuccess.json
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/api/getOrderTasks/getOrderTasksResponseEmptySuccess.json
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/api/getOrderTasks/getOrderTasksResponseNonEmptySuccess.json
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/java/ru/
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/java/ru/liga/
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/java/ru/liga/evraz/
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/java/ru/liga/evraz/bitrix/
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/java/ru/liga/evraz/bitrix/CreateTaskHttpTest.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/java/ru/liga/evraz/bitrix/GetOrderTasksHttpTest.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/java/ru/liga/evraz/bitrix/ValidationUtilsTest.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/java/ru/liga/evraz/bitrix/adapter/
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/java/ru/liga/evraz/bitrix/base/
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/java/ru/liga/evraz/bitrix/config/
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/java/ru/liga/evraz/bitrix/dispatcher/
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/java/ru/liga/evraz/bitrix/domain/
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/java/ru/liga/evraz/bitrix/kafka/
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/java/ru/liga/evraz/bitrix/util/
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/java/ru/liga/evraz/bitrix/util/KafkaUtils.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/java/ru/liga/evraz/bitrix/util/ResourceUtils.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/java/ru/liga/evraz/bitrix/kafka/BaseKafkaConsumer.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/java/ru/liga/evraz/bitrix/kafka/TestKafkaTaskExecutionStatusConsumer.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/java/ru/liga/evraz/bitrix/domain/model/
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/java/ru/liga/evraz/bitrix/domain/model/TaskExecutionStatusTest.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/java/ru/liga/evraz/bitrix/dispatcher/BaseDispatcher.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/java/ru/liga/evraz/bitrix/dispatcher/BitrixDispatcher.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/java/ru/liga/evraz/bitrix/dispatcher/DispatcherData.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/java/ru/liga/evraz/bitrix/dispatcher/OrderDispatcher.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/java/ru/liga/evraz/bitrix/config/BaseEnum.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/java/ru/liga/evraz/bitrix/config/BitrixPath.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/java/ru/liga/evraz/bitrix/config/MessageFormatter.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/java/ru/liga/evraz/bitrix/config/OrderPath.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/java/ru/liga/evraz/bitrix/config/TestConfig.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/java/ru/liga/evraz/bitrix/config/TestRequestInterceptor.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/java/ru/liga/evraz/bitrix/config/TestTimeConfig.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/java/ru/liga/evraz/bitrix/base/BaseIntegrationTest.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/java/ru/liga/evraz/bitrix/adapter/db/
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/java/ru/liga/evraz/bitrix/adapter/http/
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/java/ru/liga/evraz/bitrix/adapter/http/in/
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/java/ru/liga/evraz/bitrix/adapter/http/out/
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/java/ru/liga/evraz/bitrix/adapter/http/out/bitrix/
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/java/ru/liga/evraz/bitrix/adapter/http/out/bitrix/BitrixApiConfigTest.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/java/ru/liga/evraz/bitrix/adapter/http/in/TaskControllerTest.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/java/ru/liga/evraz/bitrix/adapter/db/TaskExecutionStatusWithDbTest.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/resources/
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/resources/Validation.properties
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/resources/application-local.yml
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/resources/application.yml
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/resources/bootstrap.yml
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/resources/db/
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/resources/logback-spring.xml
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/resources/db/main-changelog.xml
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/resources/db/migrations/
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/resources/db/migrations/changelog-000-000-000.xml
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/resources/db/migrations/changelog-000-000-001.xml
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/resources/db/migrations/changelog-000-000-002.xml
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/resources/db/migrations/changelog-000-000-003.xml
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/resources/db/migrations/changelog-000-000-004.xml
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/resources/db/migrations/changelog-000-000-005.xml
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/resources/db/migrations/changelog-000-000-006.xml
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/resources/db/migrations/changelog-000-000-007.xml
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/resources/db/migrations/changelog-000-000-008.xml
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/resources/db/migrations/changelog-000-000-009_317241-metrics.xml
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/BitrixAdapterApplication.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/application/
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/common/
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/domain/
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/security/
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/util/
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/util/ValidationUtils.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/security/IntegrationTokenConfig.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/security/SecurityConfig.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/security/UserDto.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/security/authentication/
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/security/details/
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/security/filter/
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/security/providers/
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/security/providers/JwtTokenAuthenticationProvider.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/security/filter/JwtTokenAuthFilter.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/security/details/UserDetailsImpl.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/security/authentication/JwtTokenAuthentication.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/domain/exception/
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/domain/model/
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/domain/repository/
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/domain/repository/BitrixTaskHistoryService.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/domain/repository/BitrixTaskService.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/domain/model/BitrixTask.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/domain/model/BitrixTaskHistory.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/domain/model/TaskExecutionStatus.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/domain/exception/BitrixUserNotFoundException.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/domain/exception/NotFoundException.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/common/CommonMapper.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/application/CancelTaskUseCase.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/application/CreateTaskUseCase.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/application/GetOrderTasksUseCase.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/application/cmd/
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/application/config/
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/application/converter/
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/application/enums/
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/application/kafka/
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/application/service/
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/application/util/
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/application/validation/
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/application/validation/DeadlineConstraint.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/application/validation/DeadlineValidator.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/application/validation/TimezoneConstraint.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/application/validation/TimezoneValidator.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/application/util/MessageFormatter.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/application/service/BitrixService.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/application/service/HistoryService.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/application/service/HistoryServiceImpl.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/application/kafka/BitrixTaskHistoryMapper.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/application/kafka/KafkaSendTaskExecutionStatusUseCase.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/application/enums/TaskHistoryOperationType.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/application/converter/BitrixTaskMapper.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/application/config/BitrixTaskConfig.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/application/config/MessageSourceConfig.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/application/config/TimeConfig.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/application/config/TimeFormat.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/application/cmd/AbstractTaskCmd.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/application/cmd/CancelOrderTasksCmd.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/application/cmd/CreateGroupTaskCmd.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/application/cmd/CreateManagerTaskCmd.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/application/cmd/GetOrderTasksCmd.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/UuidGenerator.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/db/
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/http/
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/kafka/
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/kafka/EvrazErrorHandlingDeserializer.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/kafka/KafkaBitrixProperties.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/kafka/in/
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/kafka/in/InKafkaConfig.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/kafka/in/KafkaTaskExecutionStatusListener.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/http/HttpConfig.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/http/OffsetDateTimeDeserializer.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/http/in/
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/http/out/
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/http/out/bitrix/
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/http/out/enums/
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/http/out/feign/
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/http/out/feign/OrderFeignClient.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/http/out/feign/TemplateFeignClient.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/http/out/feign/config/
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/http/out/feign/dto/
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/http/out/feign/dto/ControllerResult.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/http/out/feign/dto/CustomAttribute.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/http/out/feign/dto/HistoryDto.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/http/out/feign/config/FeignClientConfig.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/http/out/feign/config/FeignClientInterceptor.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/http/out/enums/BitrixTaskResultCode.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/http/out/bitrix/BitrixApiConfig.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/http/out/bitrix/BitrixHttpProperties.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/http/out/bitrix/BitrixMapper.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/http/out/bitrix/BitrixRestHandler.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/http/out/bitrix/BitrixServiceImpl.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/http/out/bitrix/RequestResponseLoggingInterceptor.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/http/out/bitrix/RetryConfig.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/http/out/bitrix/model/
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/http/out/bitrix/model/CreateTaskRequest.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/http/out/bitrix/model/CreateTaskResponse.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/http/out/bitrix/model/GetResponsibleIdResponse.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/http/out/bitrix/model/group/
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/http/out/bitrix/model/update/
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/http/out/bitrix/model/update/UpdatePropertiesDto.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/http/out/bitrix/model/update/UpdateTaskInfoDto.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/http/out/bitrix/model/update/UpdateTaskRequest.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/http/out/bitrix/model/update/UpdateTaskResponse.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/http/out/bitrix/model/update/UpdateTaskResultDto.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/http/out/bitrix/model/update/json/
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/http/out/bitrix/model/update/json/TaskExecutionStatusDeserializer.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/http/out/bitrix/model/update/json/TaskExecutionStatusSerializer.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/http/out/bitrix/model/group/BitrixResponseTimeDto.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/http/out/bitrix/model/group/CreateGroupTaskRequest.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/http/out/bitrix/model/group/CreateGroupTaskResponse.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/http/out/bitrix/model/group/GroupTaskResultDto.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/http/in/RestExceptionHandler.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/http/in/TaskController.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/http/in/TaskMapper.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/http/in/doc/
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/http/in/doc/OpenApi30Config.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/db/ArmMetrics.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/db/BitrixTaskHistoryJpaRepository.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/db/BitrixTaskHistoryRepo.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/db/BitrixTaskHistoryUuidGenerator.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/db/BitrixTaskJpaRepository.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/db/BitrixTaskRepo.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/db/BitrixTaskUuidGenerator.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/db/MetricsConfigRepo.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/db/config/
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/db/converter/
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/db/entity/
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/db/entity/BitrixTaskEntity.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/db/entity/BitrixTaskHistoryEntity.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/db/entity/BitrixTaskType.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/db/entity/MetricConfigEntity.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/db/converter/BitrixTaskEntityMapper.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/db/config/AuditConfig.java
/evrazropos/EMI_evraz_oms_bitrix_adapter/openapi/templates/
/evrazropos/EMI_evraz_oms_bitrix_adapter/openapi/yaml/
/evrazropos/EMI_evraz_oms_bitrix_adapter/openapi/yaml/api.yaml
/evrazropos/EMI_evraz_oms_bitrix_adapter/openapi/yaml/http/
/evrazropos/EMI_evraz_oms_bitrix_adapter/openapi/yaml/kafka-api.yaml
/evrazropos/EMI_evraz_oms_bitrix_adapter/openapi/yaml/kafka/
/evrazropos/EMI_evraz_oms_bitrix_adapter/openapi/yaml/kafka/bitrix.task.execution.status.yaml
/evrazropos/EMI_evraz_oms_bitrix_adapter/openapi/yaml/http/bitrix.task.create.yaml
/evrazropos/EMI_evraz_oms_bitrix_adapter/openapi/yaml/http/bitrix.task.getAll.4order.yaml
/evrazropos/EMI_evraz_oms_bitrix_adapter/openapi/yaml/http/common.yaml
/evrazropos/EMI_evraz_oms_bitrix_adapter/openapi/templates/additionalProperties.mustache
/evrazropos/EMI_evraz_oms_bitrix_adapter/openapi/templates/api.mustache
/evrazropos/EMI_evraz_oms_bitrix_adapter/openapi/templates/methodBody.mustache
/evrazropos/EMI_evraz_oms_bitrix_adapter/openapi/templates/pojo.mustache
/evrazropos/EMI_evraz_oms_bitrix_adapter/deployment_old/Dockerfile
/evrazropos/EMI_evraz_oms_bitrix_adapter/deployment_old/azure-pipeline.yaml
/evrazropos/EMI_evraz_oms_bitrix_adapter/deployment_old/settings.xml
/evrazropos/EMI_evraz_oms_bitrix_adapter/deployment/Dockerfile
/evrazropos/EMI_evraz_oms_bitrix_adapter/deployment/azure-pipeline.yaml
/evrazropos/EMI_evraz_oms_bitrix_adapter/deployment/helm/
/evrazropos/EMI_evraz_oms_bitrix_adapter/deployment/k8s/
/evrazropos/EMI_evraz_oms_bitrix_adapter/deployment/settings.xml
/evrazropos/EMI_evraz_oms_bitrix_adapter/deployment/k8s/kubeconfig
/evrazropos/EMI_evraz_oms_bitrix_adapter/deployment/k8s/ns.yaml
/evrazropos/EMI_evraz_oms_bitrix_adapter/deployment/k8s/rq.yaml
/evrazropos/EMI_evraz_oms_bitrix_adapter/deployment/helm/values.default.yml
/evrazropos/EMI_evraz_oms_bitrix_adapter/deployment/helm/values.dev.yml
/evrazropos/EMI_evraz_oms_bitrix_adapter/deployment/helm/values.prod.yml
/evrazropos/EMI_evraz_oms_bitrix_adapter/deployment/helm/values.test.yml
/evrazropos/EMI_evraz_oms_bitrix_adapter/ci/checkstyle.xml
/evrazropos/EMI_evraz_oms_bitrix_adapter/ci/suppression-filter.xml


File: /README.md
Content:
# Introduction 
TODO: Give a short introduction of your project. Let this section explain the objectives or the motivation behind this project. 

# Getting Started
TODO: Guide users through getting your code up and running on their own system. In this section you can talk about:
1.	Installation process
2.	Software dependencies
3.	Latest releases
4.	API references

# Build and Test
TODO: Describe and show how to build your code and run the tests. 

# Contribute
TODO: Explain how other users and developers can contribute to make your code better. 

If you want to learn more about creating good readme files then refer the following [guidelines](https://docs.microsoft.com/en-us/azure/devops/repos/git/create-a-readme?view=azure-devops). You can also seek inspiration from the below readme files:
- [ASP.NET Core](https://github.com/aspnet/Home)
- [Visual Studio Code](https://github.com/Microsoft/vscode)
- [Chakra Core](https://github.com/Microsoft/ChakraCore)

File: /evrazropos/EMI_evraz_oms_bitrix_adapter/.gitignore
Content: Skipped binary file

File: /evrazropos/EMI_evraz_oms_bitrix_adapter/.gitlab-ci.yml
Content:
include:
    - project: 'EVRAZ/devops/ci-cd'
      ref: main
      file: 'gitlab-ci-template-service.yaml'

variables:
  JAVA_VERSION: 17
  MVN_IMAGE: '3.8.5-openjdk-17'
  ENV: 'dev'
  NAMESPACES: 'dev'
  DOCKER_REGISTRY: 'gitlab.akb-it.ru:4567'
  DOCKER_REGISTRY_USER: 'ligaservice-tech'


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/Dockerfile
Content:
FROM openjdk:17-alpine
ADD target/bitrix-adapter-0.1.0.jar bitrix-adapter.jar
ENV TZ=Europe/Moscow

#COPY client.truststore.jks /etc/security/ssl

ENTRYPOINT exec java $JAVA_OPTS -jar /bitrix-adapter.jar


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/GitVersion.yml
Content:
mode: Mainline
increment: Inherit
tag-prefix: '\[vV\]'
legacy-semver-padding: 4
build-metadata-padding: 4
commits-since-version-source-padding: 4
commit-message-incrementing: Disabled
branches:
  main:
    regex: ^main$
    mode: ContinuousDelivery
    tag: ''
    increment: Minor
    prevent-increment-of-merged-branch-version: true
    track-merge-target: false
    tracks-release-branches: false
    is-release-branch: false
  feature:
    regex: ^feature?[/-]
    mode: ContinuousDelivery
    tag: '{BranchName}-%GitVersion.ShortSha%-%build.counter%'
    increment: Inherit
    prevent-increment-of-merged-branch-version: false
    track-merge-target: false
    tracks-release-branches: false
    is-release-branch: false
  hotfix:
    regex: ^hotfix(es)?[/-]
    mode: ContinuousDelivery
    tag: 'beta-{BranchName}-%GitVersion.ShortSha%-%build.counter%'
    increment: Patch
    prevent-increment-of-merged-branch-version: false
    track-merge-target: false
    tracks-release-branches: false
    is-release-branch: false

File: /evrazropos/EMI_evraz_oms_bitrix_adapter/README.md
Content:
# Bitrix Adapter

Адаптер для Bitrix24

File: /evrazropos/EMI_evraz_oms_bitrix_adapter/client.truststore.jks
Content: Skipped binary file

File: /evrazropos/EMI_evraz_oms_bitrix_adapter/lombok.config
Content: Skipped binary file

File: /evrazropos/EMI_evraz_oms_bitrix_adapter/mvnw
Content:
#!/bin/sh
# ----------------------------------------------------------------------------
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
# ----------------------------------------------------------------------------

# ----------------------------------------------------------------------------
# Maven Start Up Batch script
#
# Required ENV vars:
# ------------------
#   JAVA_HOME - location of a JDK home dir
#
# Optional ENV vars
# -----------------
#   M2_HOME - location of maven2's installed home dir
#   MAVEN_OPTS - parameters passed to the Java VM when running Maven
#     e.g. to debug Maven itself, use
#       set MAVEN_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000
#   MAVEN_SKIP_RC - flag to disable loading of mavenrc files
# ----------------------------------------------------------------------------

if [ -z "$MAVEN_SKIP_RC" ] ; then

  if [ -f /usr/local/etc/mavenrc ] ; then
    . /usr/local/etc/mavenrc
  fi

  if [ -f /etc/mavenrc ] ; then
    . /etc/mavenrc
  fi

  if [ -f "$HOME/.mavenrc" ] ; then
    . "$HOME/.mavenrc"
  fi

fi

# OS specific support.  $var _must_ be set to either true or false.
cygwin=false;
darwin=false;
mingw=false
case "`uname`" in
  CYGWIN*) cygwin=true ;;
  MINGW*) mingw=true;;
  Darwin*) darwin=true
    # Use /usr/libexec/java_home if available, otherwise fall back to /Library/Java/Home
    # See https://developer.apple.com/library/mac/qa/qa1170/_index.html
    if [ -z "$JAVA_HOME" ]; then
      if [ -x "/usr/libexec/java_home" ]; then
        export JAVA_HOME="`/usr/libexec/java_home`"
      else
        export JAVA_HOME="/Library/Java/Home"
      fi
    fi
    ;;
esac

if [ -z "$JAVA_HOME" ] ; then
  if [ -r /etc/gentoo-release ] ; then
    JAVA_HOME=`java-config --jre-home`
  fi
fi

if [ -z "$M2_HOME" ] ; then
  ## resolve links - $0 may be a link to maven's home
  PRG="$0"

  # need this for relative symlinks
  while [ -h "$PRG" ] ; do
    ls=`ls -ld "$PRG"`
    link=`expr "$ls" : '.*-> \(.*\)$'`
    if expr "$link" : '/.*' > /dev/null; then
      PRG="$link"
    else
      PRG="`dirname "$PRG"`/$link"
    fi
  done

  saveddir=`pwd`

  M2_HOME=`dirname "$PRG"`/..

  # make it fully qualified
  M2_HOME=`cd "$M2_HOME" && pwd`

  cd "$saveddir"
  # echo Using m2 at $M2_HOME
fi

# For Cygwin, ensure paths are in UNIX format before anything is touched
if $cygwin ; then
  [ -n "$M2_HOME" ] &&
    M2_HOME=`cygpath --unix "$M2_HOME"`
  [ -n "$JAVA_HOME" ] &&
    JAVA_HOME=`cygpath --unix "$JAVA_HOME"`
  [ -n "$CLASSPATH" ] &&
    CLASSPATH=`cygpath --path --unix "$CLASSPATH"`
fi

# For Mingw, ensure paths are in UNIX format before anything is touched
if $mingw ; then
  [ -n "$M2_HOME" ] &&
    M2_HOME="`(cd "$M2_HOME"; pwd)`"
  [ -n "$JAVA_HOME" ] &&
    JAVA_HOME="`(cd "$JAVA_HOME"; pwd)`"
fi

if [ -z "$JAVA_HOME" ]; then
  javaExecutable="`which javac`"
  if [ -n "$javaExecutable" ] && ! [ "`expr \"$javaExecutable\" : '\([^ ]*\)'`" = "no" ]; then
    # readlink(1) is not available as standard on Solaris 10.
    readLink=`which readlink`
    if [ ! `expr "$readLink" : '\([^ ]*\)'` = "no" ]; then
      if $darwin ; then
        javaHome="`dirname \"$javaExecutable\"`"
        javaExecutable="`cd \"$javaHome\" && pwd -P`/javac"
      else
        javaExecutable="`readlink -f \"$javaExecutable\"`"
      fi
      javaHome="`dirname \"$javaExecutable\"`"
      javaHome=`expr "$javaHome" : '\(.*\)/bin'`
      JAVA_HOME="$javaHome"
      export JAVA_HOME
    fi
  fi
fi

if [ -z "$JAVACMD" ] ; then
  if [ -n "$JAVA_HOME"  ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
      # IBM's JDK on AIX uses strange locations for the executables
      JAVACMD="$JAVA_HOME/jre/sh/java"
    else
      JAVACMD="$JAVA_HOME/bin/java"
    fi
  else
    JAVACMD="`\\unset -f command; \\command -v java`"
  fi
fi

if [ ! -x "$JAVACMD" ] ; then
  echo "Error: JAVA_HOME is not defined correctly." >&2
  echo "  We cannot execute $JAVACMD" >&2
  exit 1
fi

if [ -z "$JAVA_HOME" ] ; then
  echo "Warning: JAVA_HOME environment variable is not set."
fi

CLASSWORLDS_LAUNCHER=org.codehaus.plexus.classworlds.launcher.Launcher

# traverses directory structure from process work directory to filesystem root
# first directory with .mvn subdirectory is considered project base directory
find_maven_basedir() {

  if [ -z "$1" ]
  then
    echo "Path not specified to find_maven_basedir"
    return 1
  fi

  basedir="$1"
  wdir="$1"
  while [ "$wdir" != '/' ] ; do
    if [ -d "$wdir"/.mvn ] ; then
      basedir=$wdir
      break
    fi
    # workaround for JBEAP-8937 (on Solaris 10/Sparc)
    if [ -d "${wdir}" ]; then
      wdir=`cd "$wdir/.."; pwd`
    fi
    # end of workaround
  done
  echo "${basedir}"
}

# concatenates all lines of a file
concat_lines() {
  if [ -f "$1" ]; then
    echo "$(tr -s '\n' ' ' < "$1")"
  fi
}

BASE_DIR=`find_maven_basedir "$(pwd)"`
if [ -z "$BASE_DIR" ]; then
  exit 1;
fi

##########################################################################################
# Extension to allow automatically downloading the maven-wrapper.jar from Maven-central
# This allows using the maven wrapper in projects that prohibit checking in binary data.
##########################################################################################
if [ -r "$BASE_DIR/.mvn/wrapper/maven-wrapper.jar" ]; then
    if [ "$MVNW_VERBOSE" = true ]; then
      echo "Found .mvn/wrapper/maven-wrapper.jar"
    fi
else
    if [ "$MVNW_VERBOSE" = true ]; then
      echo "Couldn't find .mvn/wrapper/maven-wrapper.jar, downloading it ..."
    fi
    if [ -n "$MVNW_REPOURL" ]; then
      jarUrl="$MVNW_REPOURL/org/apache/maven/wrapper/maven-wrapper/3.1.0/maven-wrapper-3.1.0.jar"
    else
      jarUrl="https://repo.maven.apache.org/maven2/org/apache/maven/wrapper/maven-wrapper/3.1.0/maven-wrapper-3.1.0.jar"
    fi
    while IFS="=" read key value; do
      case "$key" in (wrapperUrl) jarUrl="$value"; break ;;
      esac
    done < "$BASE_DIR/.mvn/wrapper/maven-wrapper.properties"
    if [ "$MVNW_VERBOSE" = true ]; then
      echo "Downloading from: $jarUrl"
    fi
    wrapperJarPath="$BASE_DIR/.mvn/wrapper/maven-wrapper.jar"
    if $cygwin; then
      wrapperJarPath=`cygpath --path --windows "$wrapperJarPath"`
    fi

    if command -v wget > /dev/null; then
        if [ "$MVNW_VERBOSE" = true ]; then
          echo "Found wget ... using wget"
        fi
        if [ -z "$MVNW_USERNAME" ] || [ -z "$MVNW_PASSWORD" ]; then
            wget "$jarUrl" -O "$wrapperJarPath" || rm -f "$wrapperJarPath"
        else
            wget --http-user=$MVNW_USERNAME --http-password=$MVNW_PASSWORD "$jarUrl" -O "$wrapperJarPath" || rm -f "$wrapperJarPath"
        fi
    elif command -v curl > /dev/null; then
        if [ "$MVNW_VERBOSE" = true ]; then
          echo "Found curl ... using curl"
        fi
        if [ -z "$MVNW_USERNAME" ] || [ -z "$MVNW_PASSWORD" ]; then
            curl -o "$wrapperJarPath" "$jarUrl" -f
        else
            curl --user $MVNW_USERNAME:$MVNW_PASSWORD -o "$wrapperJarPath" "$jarUrl" -f
        fi

    else
        if [ "$MVNW_VERBOSE" = true ]; then
          echo "Falling back to using Java to download"
        fi
        javaClass="$BASE_DIR/.mvn/wrapper/MavenWrapperDownloader.java"
        # For Cygwin, switch paths to Windows format before running javac
        if $cygwin; then
          javaClass=`cygpath --path --windows "$javaClass"`
        fi
        if [ -e "$javaClass" ]; then
            if [ ! -e "$BASE_DIR/.mvn/wrapper/MavenWrapperDownloader.class" ]; then
                if [ "$MVNW_VERBOSE" = true ]; then
                  echo " - Compiling MavenWrapperDownloader.java ..."
                fi
                # Compiling the Java class
                ("$JAVA_HOME/bin/javac" "$javaClass")
            fi
            if [ -e "$BASE_DIR/.mvn/wrapper/MavenWrapperDownloader.class" ]; then
                # Running the downloader
                if [ "$MVNW_VERBOSE" = true ]; then
                  echo " - Running MavenWrapperDownloader.java ..."
                fi
                ("$JAVA_HOME/bin/java" -cp .mvn/wrapper MavenWrapperDownloader "$MAVEN_PROJECTBASEDIR")
            fi
        fi
    fi
fi
##########################################################################################
# End of extension
##########################################################################################

export MAVEN_PROJECTBASEDIR=${MAVEN_BASEDIR:-"$BASE_DIR"}
if [ "$MVNW_VERBOSE" = true ]; then
  echo $MAVEN_PROJECTBASEDIR
fi
MAVEN_OPTS="$(concat_lines "$MAVEN_PROJECTBASEDIR/.mvn/jvm.config") $MAVEN_OPTS"

# For Cygwin, switch paths to Windows format before running java
if $cygwin; then
  [ -n "$M2_HOME" ] &&
    M2_HOME=`cygpath --path --windows "$M2_HOME"`
  [ -n "$JAVA_HOME" ] &&
    JAVA_HOME=`cygpath --path --windows "$JAVA_HOME"`
  [ -n "$CLASSPATH" ] &&
    CLASSPATH=`cygpath --path --windows "$CLASSPATH"`
  [ -n "$MAVEN_PROJECTBASEDIR" ] &&
    MAVEN_PROJECTBASEDIR=`cygpath --path --windows "$MAVEN_PROJECTBASEDIR"`
fi

# Provide a "standardized" way to retrieve the CLI args that will
# work with both Windows and non-Windows executions.
MAVEN_CMD_LINE_ARGS="$MAVEN_CONFIG $@"
export MAVEN_CMD_LINE_ARGS

WRAPPER_LAUNCHER=org.apache.maven.wrapper.MavenWrapperMain

exec "$JAVACMD" \
  $MAVEN_OPTS \
  $MAVEN_DEBUG_OPTS \
  -classpath "$MAVEN_PROJECTBASEDIR/.mvn/wrapper/maven-wrapper.jar" \
  "-Dmaven.home=${M2_HOME}" \
  "-Dmaven.multiModuleProjectDirectory=${MAVEN_PROJECTBASEDIR}" \
  ${WRAPPER_LAUNCHER} $MAVEN_CONFIG "$@"


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/mvnw.cmd
Content:
@REM ----------------------------------------------------------------------------
@REM Licensed to the Apache Software Foundation (ASF) under one
@REM or more contributor license agreements.  See the NOTICE file
@REM distributed with this work for additional information
@REM regarding copyright ownership.  The ASF licenses this file
@REM to you under the Apache License, Version 2.0 (the
@REM "License"); you may not use this file except in compliance
@REM with the License.  You may obtain a copy of the License at
@REM
@REM    https://www.apache.org/licenses/LICENSE-2.0
@REM
@REM Unless required by applicable law or agreed to in writing,
@REM software distributed under the License is distributed on an
@REM "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
@REM KIND, either express or implied.  See the License for the
@REM specific language governing permissions and limitations
@REM under the License.
@REM ----------------------------------------------------------------------------

@REM ----------------------------------------------------------------------------
@REM Maven Start Up Batch script
@REM
@REM Required ENV vars:
@REM JAVA_HOME - location of a JDK home dir
@REM
@REM Optional ENV vars
@REM M2_HOME - location of maven2's installed home dir
@REM MAVEN_BATCH_ECHO - set to 'on' to enable the echoing of the batch commands
@REM MAVEN_BATCH_PAUSE - set to 'on' to wait for a keystroke before ending
@REM MAVEN_OPTS - parameters passed to the Java VM when running Maven
@REM     e.g. to debug Maven itself, use
@REM set MAVEN_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000
@REM MAVEN_SKIP_RC - flag to disable loading of mavenrc files
@REM ----------------------------------------------------------------------------

@REM Begin all REM lines with '@' in case MAVEN_BATCH_ECHO is 'on'
@echo off
@REM set title of command window
title %0
@REM enable echoing by setting MAVEN_BATCH_ECHO to 'on'
@if "%MAVEN_BATCH_ECHO%" == "on"  echo %MAVEN_BATCH_ECHO%

@REM set %HOME% to equivalent of $HOME
if "%HOME%" == "" (set "HOME=%HOMEDRIVE%%HOMEPATH%")

@REM Execute a user defined script before this one
if not "%MAVEN_SKIP_RC%" == "" goto skipRcPre
@REM check for pre script, once with legacy .bat ending and once with .cmd ending
if exist "%USERPROFILE%\mavenrc_pre.bat" call "%USERPROFILE%\mavenrc_pre.bat" %*
if exist "%USERPROFILE%\mavenrc_pre.cmd" call "%USERPROFILE%\mavenrc_pre.cmd" %*
:skipRcPre

@setlocal

set ERROR_CODE=0

@REM To isolate internal variables from possible post scripts, we use another setlocal
@setlocal

@REM ==== START VALIDATION ====
if not "%JAVA_HOME%" == "" goto OkJHome

echo.
echo Error: JAVA_HOME not found in your environment. >&2
echo Please set the JAVA_HOME variable in your environment to match the >&2
echo location of your Java installation. >&2
echo.
goto error

:OkJHome
if exist "%JAVA_HOME%\bin\java.exe" goto init

echo.
echo Error: JAVA_HOME is set to an invalid directory. >&2
echo JAVA_HOME = "%JAVA_HOME%" >&2
echo Please set the JAVA_HOME variable in your environment to match the >&2
echo location of your Java installation. >&2
echo.
goto error

@REM ==== END VALIDATION ====

:init

@REM Find the project base dir, i.e. the directory that contains the folder ".mvn".
@REM Fallback to current working directory if not found.

set MAVEN_PROJECTBASEDIR=%MAVEN_BASEDIR%
IF NOT "%MAVEN_PROJECTBASEDIR%"=="" goto endDetectBaseDir

set EXEC_DIR=%CD%
set WDIR=%EXEC_DIR%
:findBaseDir
IF EXIST "%WDIR%"\.mvn goto baseDirFound
cd ..
IF "%WDIR%"=="%CD%" goto baseDirNotFound
set WDIR=%CD%
goto findBaseDir

:baseDirFound
set MAVEN_PROJECTBASEDIR=%WDIR%
cd "%EXEC_DIR%"
goto endDetectBaseDir

:baseDirNotFound
set MAVEN_PROJECTBASEDIR=%EXEC_DIR%
cd "%EXEC_DIR%"

:endDetectBaseDir

IF NOT EXIST "%MAVEN_PROJECTBASEDIR%\.mvn\jvm.config" goto endReadAdditionalConfig

@setlocal EnableExtensions EnableDelayedExpansion
for /F "usebackq delims=" %%a in ("%MAVEN_PROJECTBASEDIR%\.mvn\jvm.config") do set JVM_CONFIG_MAVEN_PROPS=!JVM_CONFIG_MAVEN_PROPS! %%a
@endlocal & set JVM_CONFIG_MAVEN_PROPS=%JVM_CONFIG_MAVEN_PROPS%

:endReadAdditionalConfig

SET MAVEN_JAVA_EXE="%JAVA_HOME%\bin\java.exe"
set WRAPPER_JAR="%MAVEN_PROJECTBASEDIR%\.mvn\wrapper\maven-wrapper.jar"
set WRAPPER_LAUNCHER=org.apache.maven.wrapper.MavenWrapperMain

set DOWNLOAD_URL="https://repo.maven.apache.org/maven2/org/apache/maven/wrapper/maven-wrapper/3.1.0/maven-wrapper-3.1.0.jar"

FOR /F "usebackq tokens=1,2 delims==" %%A IN ("%MAVEN_PROJECTBASEDIR%\.mvn\wrapper\maven-wrapper.properties") DO (
    IF "%%A"=="wrapperUrl" SET DOWNLOAD_URL=%%B
)

@REM Extension to allow automatically downloading the maven-wrapper.jar from Maven-central
@REM This allows using the maven wrapper in projects that prohibit checking in binary data.
if exist %WRAPPER_JAR% (
    if "%MVNW_VERBOSE%" == "true" (
        echo Found %WRAPPER_JAR%
    )
) else (
    if not "%MVNW_REPOURL%" == "" (
        SET DOWNLOAD_URL="%MVNW_REPOURL%/org/apache/maven/wrapper/maven-wrapper/3.1.0/maven-wrapper-3.1.0.jar"
    )
    if "%MVNW_VERBOSE%" == "true" (
        echo Couldn't find %WRAPPER_JAR%, downloading it ...
        echo Downloading from: %DOWNLOAD_URL%
    )

    powershell -Command "&{"^
		"$webclient = new-object System.Net.WebClient;"^
		"if (-not ([string]::IsNullOrEmpty('%MVNW_USERNAME%') -and [string]::IsNullOrEmpty('%MVNW_PASSWORD%'))) {"^
		"$webclient.Credentials = new-object System.Net.NetworkCredential('%MVNW_USERNAME%', '%MVNW_PASSWORD%');"^
		"}"^
		"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; $webclient.DownloadFile('%DOWNLOAD_URL%', '%WRAPPER_JAR%')"^
		"}"
    if "%MVNW_VERBOSE%" == "true" (
        echo Finished downloading %WRAPPER_JAR%
    )
)
@REM End of extension

@REM Provide a "standardized" way to retrieve the CLI args that will
@REM work with both Windows and non-Windows executions.
set MAVEN_CMD_LINE_ARGS=%*

%MAVEN_JAVA_EXE% ^
  %JVM_CONFIG_MAVEN_PROPS% ^
  %MAVEN_OPTS% ^
  %MAVEN_DEBUG_OPTS% ^
  -classpath %WRAPPER_JAR% ^
  "-Dmaven.multiModuleProjectDirectory=%MAVEN_PROJECTBASEDIR%" ^
  %WRAPPER_LAUNCHER% %MAVEN_CONFIG% %*
if ERRORLEVEL 1 goto error
goto end

:error
set ERROR_CODE=1

:end
@endlocal & set ERROR_CODE=%ERROR_CODE%

if not "%MAVEN_SKIP_RC%"=="" goto skipRcPost
@REM check for post script, once with legacy .bat ending and once with .cmd ending
if exist "%USERPROFILE%\mavenrc_post.bat" call "%USERPROFILE%\mavenrc_post.bat"
if exist "%USERPROFILE%\mavenrc_post.cmd" call "%USERPROFILE%\mavenrc_post.cmd"
:skipRcPost

@REM pause the script if MAVEN_BATCH_PAUSE is set to 'on'
if "%MAVEN_BATCH_PAUSE%"=="on" pause

if "%MAVEN_TERMINATE_CMD%"=="on" exit %ERROR_CODE%

cmd /C exit /B %ERROR_CODE%


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/pom.xml
Content:
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>ru.liga.evraz</groupId>
    <artifactId>bitrix-adapter</artifactId>
    <version>0.1.0</version>
    <name>bitrix-adapter</name>
    <description>bitrix-adapter. Адаптер для интеграции с Bitrix24</description>

    <properties>
        <java.version>17</java.version>
        <spring-cloud.version>2021.0.0</spring-cloud.version>
        <spring-cloud-sleuth.version>3.1.0</spring-cloud-sleuth.version>
        <lombok.version>1.18.22</lombok.version>
        <apache.commons.collections>4.4</apache.commons.collections>
        <spring-boot.version>2.6.3</spring-boot.version>
        <spring.kafka.version>2.8.10</spring.kafka.version> <!-- first 2.8.* version without CVE vulnerability -->
        <nimbus-jose-jwt.version>9.19</nimbus-jose-jwt.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <message-broker-starter.version>0.1.0</message-broker-starter.version>
        <org.mapstruct.version>1.4.1.Final</org.mapstruct.version>

        <javax-annotation.version>1.3.2</javax-annotation.version>
        <javax-validation.version>2.0.1.Final</javax-validation.version>
        <jackson-version>2.14.1</jackson-version>
        <jackson-databind-nullable-version>0.2.4</jackson-databind-nullable-version>
        <google.findbugs.version>3.0.1</google.findbugs.version>

        <springdoc.version>1.7.0</springdoc.version>
        <swagger.annotations.version>2.2.9</swagger.annotations.version>
        <openapi-generator-plugin.version>6.0.0</openapi-generator-plugin.version>

        <!--<logback.version>1.4.3</logback.version>-->
        <logstash-encoder.version>7.2</logstash-encoder.version>
        <jacoco-maven-plugin.version>0.8.8</jacoco-maven-plugin.version>
        <junit.version>5.8.2</junit.version>
        <testcontainers.version>1.16.3</testcontainers.version>

        <liquibase.version>4.17.0</liquibase.version>
        <spring.data.relational.version>3.0.0</spring.data.relational.version>

        <!-- test -->
        <okhttp.version>3.14.8</okhttp.version>
        <awaitility.version>4.2.0</awaitility.version>

        <local.discovery.version>0.2</local.discovery.version>
    </properties>
    <distributionManagement>
        <repository>
            <id>__RegistryServer__</id>
            <url>__MavenRepoUrl__</url>
        </repository>
    </distributionManagement>
    <repositories>
        <repository>
            <id>evraz-mvn</id>
            <url>https://sib-reg-001.sib.evraz.com/repository/sib-maven2-group/</url>
            <name>evraz-mvn</name>
        </repository>
        <repository>
            <id>central</id>
            <name>Central Repository</name>
            <url>https://repo.maven.apache.org/maven2</url>
            <layout>default</layout>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </repository>
        <repository>
            <id>spring-milestones</id>
            <name>Spring Milestones</name>
            <url>https://repo.spring.io/milestone</url>
        </repository>
    </repositories>
    <pluginRepositories>
        <pluginRepository>
            <name>evraz-mvn</name>
            <id>evraz-mvn</id>
            <url>https://sib-reg-001.sib.evraz.com/repository/sib-maven2-group/_</url>
            <releases>
                <enabled>true</enabled>
                <updatePolicy>always</updatePolicy>
            </releases>
        </pluginRepository>
    </pluginRepositories>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${spring-boot.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-sleuth</artifactId>
                <version>${spring-cloud-sleuth.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-kubernetes-dependencies</artifactId>
                <version>2.1.0</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>com.fasterxml.jackson</groupId>
                <artifactId>jackson-bom</artifactId>
                <version>${jackson-version}</version>
                <scope>import</scope>
                <type>pom</type>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-collections4</artifactId>
            <version>${apache.commons.collections}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        <dependency>
            <groupId>io.micrometer</groupId>
            <artifactId>micrometer-registry-prometheus</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-config</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-bootstrap</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-openfeign</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-sleuth</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-kubernetes-fabric8-all</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-loadbalancer</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-kubernetes-fabric8</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-kubernetes-fabric8-loadbalancer</artifactId>
        </dependency>

        <!--	Java 8 Datatypes	-->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-core</artifactId>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-annotations</artifactId>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
        </dependency>
        <dependency>
            <groupId>org.openapitools</groupId>
            <artifactId>jackson-databind-nullable</artifactId>
            <version>${jackson-databind-nullable-version}</version>
        </dependency>
        <dependency>
            <groupId>javax.validation</groupId>
            <artifactId>validation-api</artifactId>
            <version>${javax-validation.version}</version>
        </dependency>
        <dependency>
            <groupId>javax.annotation</groupId>
            <artifactId>javax.annotation-api</artifactId>
            <version>${javax-annotation.version}</version>
        </dependency>
        <dependency> <!-- For openapi javax.validation.* annotations -->
            <groupId>com.google.code.findbugs</groupId>
            <artifactId>annotations</artifactId>
            <version>${google.findbugs.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.kafka</groupId>
            <artifactId>spring-kafka</artifactId>
            <version>${spring.kafka.version}</version>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>com.nimbusds</groupId>
            <artifactId>nimbus-jose-jwt</artifactId>
            <version>${nimbus-jose-jwt.version}</version>
        </dependency>
        <dependency>
            <groupId>io.projectreactor.kafka</groupId>
            <artifactId>reactor-kafka</artifactId>
        </dependency>

        <!-- Log -->
        <dependency>
            <groupId>net.logstash.logback</groupId>
            <artifactId>logstash-logback-encoder</artifactId>
            <version>${logstash-encoder.version}</version>
        </dependency>

        <!-- Data -->
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
        </dependency>
        <dependency>
            <groupId>org.liquibase</groupId>
            <artifactId>liquibase-core</artifactId>
            <version>${liquibase.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.data</groupId>
            <artifactId>spring-data-relational</artifactId>
        </dependency>

        <!--Message broker starter-->
        <dependency>
            <groupId>ru.liga.evraz.starter</groupId>
            <artifactId>message-broker-starter</artifactId>
            <version>${message-broker-starter.version}</version>
        </dependency>

        <!-- Testing -->
        <dependency>
            <groupId>com.squareup.okhttp3</groupId>
            <artifactId>okhttp</artifactId>
        </dependency>
        <dependency>
            <groupId>com.squareup.okhttp3</groupId>
            <artifactId>mockwebserver</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <version>${junit.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.vintage</groupId>
            <artifactId>junit-vintage-engine</artifactId>
            <version>${junit.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.testcontainers</groupId>
            <artifactId>junit-jupiter</artifactId>
            <version>${testcontainers.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.testcontainers</groupId>
            <artifactId>postgresql</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.testcontainers</groupId>
            <artifactId>kafka</artifactId>
            <version>${testcontainers.version}</version>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>junit</groupId>
                    <artifactId>junit</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.junit</groupId>
                    <artifactId>junit</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-test</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- JSON -->
        <dependency>
            <groupId>com.fasterxml.jackson.dataformat</groupId>
            <artifactId>jackson-dataformat-xml</artifactId>
        </dependency>

        <dependency>
            <groupId>org.mapstruct</groupId>
            <artifactId>mapstruct</artifactId>
            <version>${org.mapstruct.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.data</groupId>
            <artifactId>spring-data-commons</artifactId>
        </dependency>

        <!-- Swagger -->
        <dependency>
            <groupId>org.springdoc</groupId>
            <artifactId>springdoc-openapi-ui</artifactId>
            <version>${springdoc.version}</version>
        </dependency>
        <dependency>
            <groupId>io.swagger.core.v3</groupId>
            <artifactId>swagger-annotations</artifactId>
            <version>${swagger.annotations.version}</version>
        </dependency>
        <dependency>
            <groupId>org.awaitility</groupId>
            <artifactId>awaitility</artifactId>
            <version>${awaitility.version}</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <profiles>
        <profile>
            <id>local</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <repositories>
                <repository>
                    <id>evraz-mvn-nexus</id>
                    <url>https://sib-reg-001.sib.evraz.com/repository/sib-maven2-group/</url>
                </repository>
                <repository>
                    <id>maven-central</id>
                    <name>maven-central</name>
                    <url>https://repo.maven.apache.org/maven2/</url>
                    <releases>
                        <updatePolicy>always</updatePolicy>
                    </releases>
                </repository>
                <!-- <repository>
                    <id>gitlab-maven</id>
                    <name>starfish-24-repo</name>
                    <url>https://starfish.gitlab.yandexcloud.net/api/v4/groups/6/-/packages/maven</url>
                    <releases>
                        <updatePolicy>always</updatePolicy>
                    </releases>
                </repository>
                <repository>
                    <id>evraz-starfish-mvn-nexus</id>
                    <url>__MavenRepoUrl__</url>
                    <name>evraz-starfish-maven-nexus</name>
                </repository> -->
            </repositories>
            <dependencies>
                <!-- <dependency>
                    <groupId>com.starfish24</groupId>
                    <artifactId>local-discovery-client</artifactId>
                    <version>${local.discovery.version}</version>
                </dependency> -->
            </dependencies>
        </profile>
        <profile>
            <id>ci</id>
            <repositories>
                <repository>
                    <id>__RegistryServer__</id>
                    <url>__MavenRepoUrl__</url>
                </repository>
            </repositories>
        </profile>
    </profiles>

    <build>
        <plugins>
            <plugin>
                <groupId>org.openapitools</groupId>
                <artifactId>openapi-generator-maven-plugin</artifactId>
                <version>${openapi-generator-plugin.version}</version>
                <executions>
                    <execution>
                        <id>generate-server</id>
                        <goals>
                            <goal>generate</goal>
                        </goals>
                        <configuration>
                            <inputSpec>
                                ${project.basedir}/openapi/yaml/api.yaml
                            </inputSpec>
                            <generatorName>spring</generatorName>
                            <apiPackage>ru.liga.evraz.bitrix.api.adapter.in.http</apiPackage>
                            <modelPackage>ru.liga.evraz.bitrix.api.adapter.in.http.model</modelPackage>
                            <generateModelDocumentation>true</generateModelDocumentation>
                            <generateApis>true</generateApis>
                            <!--<templateDirectory>${project.basedir}/openapi/templates</templateDirectory>-->

                            <!--<typeMappings>
                                <typeMapping>OffsetDateTime=ZonedDateTime</typeMapping>
                            </typeMappings>
                            <importMappings>
                                <importMapping>java.time.OffsetDateTime=java.time.ZonedDateTime</importMapping>
                            </importMappings>-->

                            <configOptions>
                                <useTags>true</useTags>
                                <reactive>false</reactive>
                                <interfaceOnly>true</interfaceOnly>
                                <delegatePattern>false</delegatePattern>
                                <skipDefaultInterface>false</skipDefaultInterface>
                                <additionalModelTypeAnnotations>
                                    @lombok.Builder
                                    @lombok.NoArgsConstructor
                                    @lombok.AllArgsConstructor
                                </additionalModelTypeAnnotations>
                            </configOptions>
                            <additionalProperties>
                                <additionalProperty>modelNameSuffix=Http</additionalProperty>
                            </additionalProperties>
                        </configuration>
                    </execution>
                    <execution>
                        <id>generate-kafka-dto</id>
                        <goals>
                            <goal>generate</goal>
                        </goals>
                        <configuration>
                            <inputSpec>
                                ${project.basedir}/openapi/yaml/kafka-api.yaml
                            </inputSpec>
                            <apiPackage>ru.liga.evraz.bitrix.kafka</apiPackage>
                            <modelPackage>ru.liga.evraz.bitrix.kafka</modelPackage>
                            <generateModelDocumentation>false</generateModelDocumentation>
                            <generateApiTests>false</generateApiTests>
                            <generateModelTests>false</generateModelTests>
                            <generateSupportingFiles>false</generateSupportingFiles>
                            <invokerPackage>ru.liga.evraz.bitrix.kafka</invokerPackage>
                            <generatorName>spring</generatorName>
                            <templateDirectory>${project.basedir}/openapi/templates</templateDirectory>
                            <configOptions>
                                <useTags>false</useTags>
                                <reactive>false</reactive>
                                <interfaceOnly>true</interfaceOnly>
                                <delegatePattern>false</delegatePattern>
                                <skipDefaultInterface>false</skipDefaultInterface>
                                <additionalModelTypeAnnotations>
                                    @lombok.Builder
                                    @lombok.NoArgsConstructor
                                    @lombok.AllArgsConstructor
                                </additionalModelTypeAnnotations>
                            </configOptions>
                            <additionalProperties>
                                <additionalProperty>modelNameSuffix=Kafka</additionalProperty>
                            </additionalProperties>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>2.6.3</version>
                <configuration>
                    <layout>ZIP</layout>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-checkstyle-plugin</artifactId>
                <version>3.1.2</version>
                <dependencies>
                    <dependency>
                        <groupId>com.puppycrawl.tools</groupId>
                        <artifactId>checkstyle</artifactId>
                        <version>9.3</version>
                    </dependency>
                </dependencies>
                <configuration>
                    <configLocation>ci/checkstyle.xml</configLocation>
                </configuration>
                <executions>
                    <execution>
                        <phase>validate</phase>
                        <goals>
                            <goal>check</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.9.0</version>
                <configuration>
                    <annotationProcessorPaths>
                        <path>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                            <version>${lombok.version}</version>
                        </path>
                        <path>
                            <groupId>org.mapstruct</groupId>
                            <artifactId>mapstruct-processor</artifactId>
                            <version>${org.mapstruct.version}</version>
                        </path>
                    </annotationProcessorPaths>
                    <source>17</source>
                    <target>17</target>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-pmd-plugin</artifactId>
                <version>3.16.0</version>
                <configuration>
                    <aggregate>false</aggregate>
                    <includeTests>true</includeTests>
                    <failOnViolation>true</failOnViolation>
                    <linkXRef>false</linkXRef>
                    <showPmdLog>true</showPmdLog>
                    <printFailingErrors>true</printFailingErrors>
                    <sourceEncoding>${project.build.sourceEncoding}</sourceEncoding>
                    <outputEncoding>${project.build.sourceEncoding}</outputEncoding>
                    <minimumTokens>100</minimumTokens>
                    <targetJdk>${java.version}</targetJdk>
                </configuration>
                <executions>
                    <execution>
                        <phase>validate</phase>
                        <goals>
                            <goal>check</goal>
                            <goal>cpd-check</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>com.github.spotbugs</groupId>
                <artifactId>spotbugs-maven-plugin</artifactId>
                <version>4.6.0.0</version>
                <configuration>
                    <effort>Max</effort>
                    <failOnError>true</failOnError>
                    <threshold>Low</threshold>
                    <xmlOutput>true</xmlOutput>
                </configuration>
                <executions>
                    <execution>
                        <phase>validate</phase>
                        <goals>
                            <goal>check</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <!-- На текущий момент на CI нет Docker Environment -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.22.2</version>
                <configuration>
                    <skipTests>false</skipTests>
                    <includes>
                        <include>**IT.java</include>
                        <include>**Test.java</include>
                    </includes>
                </configuration>
                <executions>
                    <execution>
                        <phase>test</phase>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <version>${jacoco-maven-plugin.version}</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>prepare-agent</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>report</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>report</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/application-test.yml
Content:
spring:
  kafka:
    producer:
      client-id: ${spring.application.name}
    consumer:
      group-id: ${spring.application.name}

bitrix:
  http:
    updateTask:
      url: "http://localhost:8091/cancel" # На данный момент обновление используется для отмены задач
    createTask:
      responsibleIdsForTestTasks: # Если конфиг пустой, то не будет подменять значения, иначе рандомное значение из двух
        - 1885
        - 593
      url: "http://localhost:8091"
    request:
      url: "http://localhost:8091/rest/846/5ddu42vxezv17e5k/user.get.json"
  kafka:
    taskExecutionStatus:
      topic: 'ut-task-execution-status'

feign:
  client:
    config:
      #      example-service:
      #        retryer: com.starfish24.config.feign.FeignRetryer
      default:
        connectTimeout: 10000
        readTimeout: 40000
        loggerLevel: full
  starfish:
    order:
      name: 'test-order'

logging:
  config:

File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/logback-test.xml
Content:
<configuration>
    <include resource="org/springframework/boot/logging/logback/defaults.xml" />
    <springProperty name="appName" source="spring.application.name" />

    <property name="LOG_FILE" value="${appName}"/>

    <springProfile name="!local, !local-staging, !test">
        <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
            <encoder class="net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder">
                <providers>
                    <timestamp/>
                    <version/>
                    <logLevel/>
                    <message/>
                    <loggerName/>
                    <threadName/>
                    <context/>
                    <pattern>
                        <omitEmptyFields>true</omitEmptyFields>
                        <pattern>
                            {
                            "trace": {
                            "service": "${appName}",
                            "trace_id": "%X{traceId}",
                            "span_id": "%X{spanId}",
                            "parent_span_id": "%X{parentId}",
                            "exportable": "%X{sampled}",
                            "login": "%X{login}",
                            "tenantId": "%X{tenantId}"
                            }
                            }
                        </pattern>
                    </pattern>
                    <mdc>
                        <excludeMdcKeyName>traceId</excludeMdcKeyName>
                        <excludeMdcKeyName>spanId</excludeMdcKeyName>
                        <excludeMdcKeyName>parentId</excludeMdcKeyName>
                        <excludeMdcKeyName>spanExportable</excludeMdcKeyName>
                        <excludeMdcKeyName>X-B3-TraceId</excludeMdcKeyName>
                        <excludeMdcKeyName>X-B3-SpanId</excludeMdcKeyName>
                        <excludeMdcKeyName>X-B3-ParentSpanId</excludeMdcKeyName>
                        <excludeMdcKeyName>X-Span-Export</excludeMdcKeyName>
                    </mdc>
                    <stackTrace/>
                </providers>
            </encoder>
        </appender>
    </springProfile>

    <springProfile name="test, local, local-staging">
        <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
            <encoder>
                <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread, %X{traceId:-}, %X{spanId:-}, %X{sampled:-}, %X{login}, %X{tenantId}] %-5level %logger{36} - %msg%n</pattern>
            </encoder>
        </appender>
    </springProfile>
    
    <root level="info">
        <appender-ref ref="STDOUT" />
    </root>

    <logger name="org.springframework.web.filter.CommonsRequestLoggingFilter">
        <level value="DEBUG" />
    </logger>
    <logger name="com.starfish24" level="DEBUG"/>

</configuration>

File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/models/createTaskModelSuccess.json
Content:
{
  "bitrixId" : "55555",
  "title": "ТЕСТ. Задание на перевозку",
  "description": "ТЕСТ. ccылка на заказ в 1С - ИН00-1102, test@ya.ru, ",
  "responsibleId": "1222",
  "responsibleEmail": "pupkin@pup.ru",
  "deadline": "2023-12-01T12:06:06",
  "clientOrderId": "BF-12345-15",
  "orderId": "tnt-9357710",
  "tenantId": "evraz_oms_dev",
  "zoneId": "Etc/GMT-3"
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/models/createTaskModelSuccessWithTechId.json
Content:
{
  "bitrixId" : "55555",
  "title": "ТЕСТ. Задание на перевозку",
  "description": "ТЕСТ. ccылка на заказ в 1С - ИН00-1102, test@ya.ru, ",
  "responsibleId": "1885",
  "responsibleEmail": "pupkin@pup2.ru",
  "deadline": "2023-12-01T12:06:06",
  "guid": "5ba10708-79f8-4679-88c1-2ff79392ec3b",
  "clientOrderId": "BF-12345-15",
  "orderId": "tnt-9357710",
  "tenantId": "evraz_oms_dev",
  "zoneId": "Etc/GMT-3"
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/models/createTaskModelSuccess_without_bitrixId.json
Content:
{
  "bitrixId" : null,
  "title": "ТЕСТ. Задание на перевозку",
  "description": "ТЕСТ. ccылка на заказ в 1С - ИН00-1102, test@ya.ru, ",
  "responsibleId": "1222",
  "responsibleEmail": "pupkin@pup.ru",
  "deadline": "2023-12-01T12:06:06",
  "clientOrderId": "BF-12345-15",
  "orderId": "tnt-9357710",
  "tenantId": "evraz_oms_dev",
  "zoneId": "Etc/GMT-3"
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/models/updatedTaskModelSuccess.json
Content:
{
  "bitrixId" : "55555",
  "title": "update_title",
  "description": "update_description",
  "responsibleId": "1222",
  "responsibleEmail": "pupkin@pup.ru",
  "deadline": "2023-12-01T12:06:06",
  "guid": "1",
  "clientOrderId": "test_update_client_order_id",
  "orderId": "test_update_order_id",
  "tenantId": "test_tenant_id",
  "zoneId": "Etc/GMT-3"
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/kafka/template/taskExecutionInvalidStatus.json
Content:
{
  "ID": false,
  "STATUS": true
}

File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/kafka/template/taskExecutionStatus.json
Content:
{
  "ID": "1",
  "STATUS": "5",
  "UF_OMS_TASK_RESULT" : "completed-automatically"
}

File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/kafka/template/taskExecutionStatus_notCompletedTask.json
Content:
{
  "ID": "1",
  "STATUS": "1",
  "UF_OMS_TASK_RESULT": null
}

File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/kafka/template/taskExecutionStatus_unknownResultCode.json
Content:
{
  "ID": "1",
  "STATUS": "5",
  "UF_OMS_TASK_RESULT": null
}

File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/external/addHistoryCancelSuccess_request.json
Content:
{
  "time": "2023-06-29T00:00:00.000",
  "typeId": "ARM_TASK_CANCELED",
  "message": "Отменена задача \"test_title\"",
  "userId": "evraz_oms_dev-evraz_dev_int",
  "firstName": "evraz",
  "lastName": "integration",
  "contextData": null
}

File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/external/addHistoryCancelSuccess_response.json
Content:
{
  "success": true,
  "message": "ok",
  "result": "ok"
}

File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/external/addHistorySuccess_request.json
Content:
{
  "time": "2023-06-29T00:00:00.000",
  "typeId": "ARM_TASK_CREATED",
  "message": "Создана новая задача \"ТЕСТ. Задание на перевозку\"",
  "userId": "evraz_oms_dev-evraz_dev_int",
  "firstName": "evraz",
  "lastName": "integration",
  "contextData": null
}

File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/external/addHistorySuccess_response.json
Content:
{
  "success": true,
  "message": "ok",
  "result": "ok"
}

File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/external/addHistoryUpdTaskStatus_request.json
Content:
{
  "time": "2023-06-29T00:00:00.000",
  "typeId": "ARM_TASK_STATUS_COMPLETED",
  "message": "Результат выполнения задачи № 1: Завершена автоматически",
  "userId": "evraz_oms_dev-evraz_dev_int",
  "firstName": "evraz",
  "lastName": "integration",
  "contextData": null
}

File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/external/addHistoryUpdTaskStatus_response.json
Content:
{
  "success": true,
  "message": "ok",
  "result": "ok"
}

File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/external/addHistoryUpdTaskStatus_unknownResultCode_request.json
Content:
{
  "time": "2023-06-29T00:00:00.000",
  "typeId": "ARM_TASK_STATUS_COMPLETED",
  "message": "Результат выполнения задачи № 1: Результат не определён",
  "userId": "evraz_oms_dev-evraz_dev_int",
  "firstName": "evraz",
  "lastName": "integration",
  "contextData": null
}

File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/external/addHistoryUpdateSuccess_request.json
Content:
{
  "time": "2023-06-29T00:00:00.000",
  "typeId": "ARM_TASK_CREATED",
  "message": "Создана новая задача \"update_title\"",
  "userId": "evraz_oms_dev-evraz_dev_int",
  "firstName": "evraz",
  "lastName": "integration",
  "contextData": null
}

File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/external/addHistoryUpdateSuccess_response.json
Content:
{
  "success": true,
  "message": "ok",
  "result": "ok"
}

File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/external/cancelTaskSuccess_request.json
Content:
{
  "taskId": 111111,
  "fields": {
    "STATUS": 5,
    "CLOSED_BY": 566
  }
}

File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/external/cancelTaskSuccess_response.json
Content:
{
  "result": {
    "task": {
      "id": "DONE",
      "status": "5"
    }
  }
}

File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/external/createManagerTaskFailed.json
Content:
{
  "error": "ERROR_CORE",
  "error_description": "\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0439 \u0432 \u043f\u043e\u043b\u0435 \u0026quot;\u041e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439\u0026quot; \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u003Cbr\u003E"
}

File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/external/createTaskRequestSuccess.json
Content:
{
  "arNewTaskData": {
    "TITLE": "ТЕСТ. Задание на перевозку",
    "DESCRIPTION": "ТЕСТ. ccылка на заказ в 1С - ИН00-1102, test@ya.ru, ",
    "RESPONSIBLE_ID": 1222,
    "DEADLINE": "2023-12-01T15:06:06+03:00",
    "CREATED_BY": 566
  }
}

File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/external/createTaskRequestWithTechId.json
Content:
{
  "arNewTaskData": {
    "TITLE": "ТЕСТ. Задание на перевозку",
    "DESCRIPTION": "ТЕСТ. ccылка на заказ в 1С - ИН00-1102, test@ya.ru, ",
    "RESPONSIBLE_ID": 1885,
    "DEADLINE": "2023-12-01T15:06:06+03:00",
    "CREATED_BY": 2478
  }
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/external/createTaskResponseSuccess.json
Content:
{
  "result": "55555"
}

File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/external/getResponsibleIdRequest.json
Content:
{
  "FILTER": [
    {
      "email": "pupkin@pup.ru"
    }
  ]
}

File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/external/getResponsibleIdResponse.json
Content:
{
  "result": [
    {
      "ID": "1222",
      "ACTIVE": true,
      "EMAIL": "m.ivshina@example.com",
      "NAME": "Мария",
      "LAST_NAME": "Ившина",
      "SECOND_NAME": "",
      "PERSONAL_GENDER": "F",
      "PERSONAL_PROFESSION": "",
      "PERSONAL_WWW": "http://shelenkov.com/horse/events.html",
      "PERSONAL_BIRTHDAY": "1984-04-29T02:00:00+04:00",
      "PERSONAL_PHOTO": "http://www.hazz/upload/main/982/42-17082203.gif",
      "PERSONAL_ICQ": "431-874-61",
      "PERSONAL_PHONE": "",
      "PERSONAL_FAX": "",
      "PERSONAL_MOBILE": "",
      "PERSONAL_PAGER": "",
      "PERSONAL_STREET": "",
      "PERSONAL_CITY": "",
      "PERSONAL_STATE": "",
      "PERSONAL_ZIP": "",
      "PERSONAL_COUNTRY": "0",
      "WORK_COMPANY": "",
      "WORK_POSITION": "IT-\"специалист\"",
      "WORK_PHONE": "+7 495 188 46 29",
      "UF_DEPARTMENT": [
        51,
        55,
        84
      ],
      "UF_INTERESTS": null,
      "UF_SKILLS": null,
      "UF_WEB_SITES": null,
      "UF_XING": null,
      "UF_LINKEDIN": null,
      "UF_FACEBOOK": null,
      "UF_TWITTER": null,
      "UF_SKYPE": null,
      "UF_DISTRICT": null,
      "UF_PHONE_INNER": "4629"
    }
  ],
  "total": 1
}

File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/external/updatedTaskSuccess_request.json
Content:
{
  "arNewTaskData": {
    "TITLE": "update_title",
    "DESCRIPTION": "update_description",
    "RESPONSIBLE_ID": 1222,
    "DEADLINE": "2023-12-01T15:06:06+03:00",
    "CREATED_BY": 566
  }
}

File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/external/updatedTaskSuccess_response.json
Content:
{
  "result": "55555"
}

File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/db/clean_bitrix_tasks.sql
Content:
TRUNCATE bitrix_task_status_history CASCADE;
TRUNCATE bitrix_task CASCADE;

File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/db/init_bitrix_tasks.sql
Content:
insert into bitrix_task (id, bitrix_id, title, description, responsible_id, deadline, created_at, modified_at,
                         client_order_id, order_id, tenant_id, zone_id, need_send_to_bitrix, created_by,
                         responsible_email, type, bitrix_task_type_code, role, branch, active, cancelled)
values (1, null, 'test_title', 'test_description', '1111', '2023-02-02 19:04:30.659952',
        '2023-01-16 17:11:18.695734', '2023-01-16 17:12:06.891222',
        'test_client_order_id', 'test_update_order_id', 'test_tenant_id', 'Etc/GMT-3',
        true, 2478, 'OMS_EVRAZ@evraz.com', 'CLIENT_NOT_ARRIVED', 'shipment-control', null, null, true, false),
       (2, '111111', 'test_title', 'test_description', '1111', '2023-02-02 19:04:30.659952',
        '2023-01-16 17:11:18.695734', '2023-01-16 17:12:06.891222',
        'test_client_order_id_2', 'test_update_order_id_2', 'test_tenant_id', 'Etc/GMT-3',
        -- Русскоязычные значения ломают тесты. TODO:: найти причину и поправить.
        true, 2478, 'OMS_EVRAZ@evraz.com', 'CLIENT_NOT_ARRIVED', 'shipment-control', 'Sales', 'Moscow', true, false);

File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/db/init_bitrix_tasks_with_bitrix_id.sql
Content:
insert into bitrix_task (id, bitrix_id, title, description, responsible_id, deadline, created_at, modified_at,
                         client_order_id, order_id, tenant_id, zone_id, need_send_to_bitrix, created_by,
                         responsible_email, type)
values (1, 1, 'test_title', 'test_description', '1111', '2023-02-02 19:04:30.659952',
        '2023-01-16 17:11:18.695734', '2023-01-16 17:12:06.891222',
        'test_client_order_id', 'test_update_order_id', 'test_tenant_id', 'Etc/GMT-3',
        true, 2478, 'OMS_EVRAZ@evraz.com', 'CLIENT_NOT_ARRIVED');

File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/api/cancelTaskRequestSuccess.json
Content:
{
  "description": "ТЕСТ. ccылка на заказ в 1С - ИН00-1102, test@ya.ru, ",
  "responsibleEmail": "pupkin@pup.ru",
  "responsibleId": 1222,
  "deadline": "2023-12-01T16:06:06+04:00",
  "clientOrderId": "BF-12345-15",
  "orderId": "test_update_order_id",
  "tenantId": "evraz_oms_dev",
  "cancelAll": true
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/api/cancelTaskRequestSuccessForHistory.json
Content:
{
  "description": "ТЕСТ. ccылка на заказ в 1С - ИН00-1102, test@ya.ru, ",
  "responsibleEmail": "pupkin@pup.ru",
  "responsibleId": 1222,
  "deadline": "2023-12-01T16:06:06+04:00",
  "clientOrderId": "BF-12345-15",
  "orderId": "test_update_order_id_2",
  "tenantId": "evraz_oms_dev",
  "cancelAll": true
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/api/cancelTaskRequestUnSuccess.json
Content:
{
  "description": "ТЕСТ. ccылка на заказ в 1С - ИН00-1102, test@ya.ru, ",
  "responsibleEmail": "pupkin@pup.ru",
  "responsibleId": 1222,
  "deadline": "2023-12-01T16:06:06+04:00",
  "clientOrderId": "BF-12345-15",
  "orderId": "not_exist_order",
  "tenantId": "evraz_oms_dev",
  "cancelAll": true
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/api/cancelTaskResponseSuccess.json
Content:
{
  "success": true
}

File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/api/cancelTaskResponseUnSuccess.json
Content:
{
  "success": true
}

File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/api/createTaskRequestSuccess.json
Content:
{
  "title": "ТЕСТ. Задание на перевозку",
  "description": "ТЕСТ. ccылка на заказ в 1С - ИН00-1102, test@ya.ru, ",
  "responsibleEmail": "pupkin@pup.ru",
  "responsibleId": 1222,
  "deadline": "2023-12-01T16:06:06+04:00",
  "clientOrderId": "BF-12345-15",
  "orderId": "tnt-9357710",
  "tenantId": "evraz_oms_dev"
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/api/createTaskRequestUnSuccess.json
Content:
{
  "description": "ТЕСТ. ccылка на заказ в 1С - ИН00-1102, test@ya.ru, ",
  "responsibleEmail": "pupkin@pup.ru",
  "responsibleId": 1222,
  "deadline": "2023-12-01T16:06:06+04:00",
  "clientOrderId": "BF-12345-15",
  "orderId": "tnt-9357710",
  "tenantId": "evraz_oms_dev"
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/api/createTaskResponseSuccess.json
Content:
{
  "id": "55555"
}

File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/api/createTaskResponseUnSuccess.json
Content:
{
  "fault": {
    "code": "BAD_REQUEST",
    "details": "Validation failed for argument [0] in public org.springframework.http.ResponseEntity<ru.liga.evraz.bitrix.api.adapter.in.http.model.CreateTaskResponseHttp> ru.liga.evraz.bitrix.adapter.http.in.TaskController.createManagerTask(ru.liga.evraz.bitrix.api.adapter.in.http.model.CreateManagerTaskRequestHttp): [Field error in object 'createManagerTaskRequestHttp' on field 'title': rejected value [null]; codes [NotNull.createManagerTaskRequestHttp.title,NotNull.title,NotNull.java.lang.String,NotNull]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [createManagerTaskRequestHttp.title,title]; arguments []; default message [title]]; default message [не должно равняться null]] "
  }
}

File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/api/createTaskResponse_taskWasNotCreatedInARM.json
Content:
{
  "id": null
}

File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/api/updateTaskSuccess_request.json
Content:
{
  "title": "update_title",
  "description": "update_description",
  "responsibleEmail": "pupkin@pup.ru",
  "responsibleId": 1222,
  "deadline": "2023-12-01T16:06:06+04:00",
  "clientOrderId": "test_update_client_order_id",
  "orderId": "test_update_order_id",
  "tenantId": "test_tenant_id"
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/api/updateTaskSuccess_response.json
Content:
{
  "id": "55555"
}

File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/api/getOrderTasks/getOrderTaskRequestByOrderAndTypeSuccess.json
Content:
{
  "sfOrderId": "test_update_order_id_2",
  "types": [
    "CLIENT_NOT_ARRIVED"
  ]
}

File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/api/getOrderTasks/getOrderTaskRequestOnlyByOrderSuccess.json
Content:
{
  "sfOrderId": "test_update_order_id_2"
}

File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/api/getOrderTasks/getOrderTasksResponseEmptySuccess.json
Content:
{
  "payload": {
    "tasks": []
  },
  "fault": null
}

File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/resources/api/getOrderTasks/getOrderTasksResponseNonEmptySuccess.json
Content:
{
  "payload": {
    "tasks": [
      {
        "orderId": "test_update_order_id_2",
        "bitrixId": "111111",
        "type": "CLIENT_NOT_ARRIVED",
        "bitrixTaskTypeCode": "shipment-control",
        "responsibleId": "1111",
        "role": "Sales",
        "branch": "Moscow",
        "needSendToBitrix": true,
        "active": true,
        "cancelled": false
      }
    ]
  },
  "fault": null
}

File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/java/ru/liga/evraz/bitrix/CreateTaskHttpTest.java
Content:
package ru.liga.evraz.bitrix;

import lombok.SneakyThrows;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.tuple.Pair;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.test.autoconfigure.web.reactive.AutoConfigureWebTestClient;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.core.io.Resource;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.jdbc.SqlGroup;
import ru.liga.evraz.bitrix.adapter.db.BitrixTaskUuidGenerator;
import ru.liga.evraz.bitrix.adapter.db.entity.BitrixTaskType;
import ru.liga.evraz.bitrix.base.BaseIntegrationTest;
import ru.liga.evraz.bitrix.config.BaseEnum;
import ru.liga.evraz.bitrix.dispatcher.BitrixDispatcher;
import ru.liga.evraz.bitrix.dispatcher.DispatcherData;
import ru.liga.evraz.bitrix.dispatcher.OrderDispatcher;
import ru.liga.evraz.bitrix.domain.model.BitrixTask;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.doReturn;
import static ru.liga.evraz.bitrix.config.BitrixPath.TASK_ADD;
import static ru.liga.evraz.bitrix.config.BitrixPath.TASK_CANCEL;
import static ru.liga.evraz.bitrix.config.BitrixPath.USER_GET;
import static ru.liga.evraz.bitrix.config.OrderPath.HISTORY_ADD;
import static ru.liga.evraz.bitrix.util.ResourceUtils.readResourceToObject;

@Slf4j
@ActiveProfiles("test")
@AutoConfigureWebTestClient(timeout = "5s")
@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
@SuppressWarnings("PMD.TooManyStaticImports")
class CreateTaskHttpTest extends BaseIntegrationTest {

    private static final String TEST_ARM_TASK_GUID = "test-bitrix-task-guid";

    @Value("classpath:api/createTaskRequestSuccess.json")
    private Resource apiSuccessRequest;
    @Value("classpath:api/createTaskResponseSuccess.json")
    private Resource apiSuccessResponse;
    @Value("classpath:api/createTaskResponse_taskWasNotCreatedInARM.json")
    private Resource apiBitrixTaskWasNotCreatedResponse;
    @Value("classpath:api/updateTaskSuccess_request.json")
    private Resource apiUpdateTaskSuccessRequest;
    @Value("classpath:api/updateTaskSuccess_response.json")
    private Resource apiUpdateTaskSuccessResponse;
    @Value("classpath:external/updatedTaskSuccess_request.json")
    private Resource extUpdatedTaskSuccessRequest;
    @Value("classpath:external/updatedTaskSuccess_response.json")
    private Resource extUpdatedTaskSuccessResponse;
    @Value("classpath:external/createTaskRequestSuccess.json")
    private Resource extSuccessRequest;
    @Value("classpath:external/createTaskResponseSuccess.json")
    private Resource extSuccessResponse;
    @Value("classpath:external/cancelTaskSuccess_request.json")
    private Resource extSuccessCancelTaskRequest;
    @Value("classpath:external/cancelTaskSuccess_response.json")
    private Resource extSuccessCancelTaskResponse;
    @Value("classpath:external/createManagerTaskFailed.json")
    private Resource extFailedResponse;
    @Value("classpath:models/createTaskModelSuccess.json")
    private Resource expectedTaskEntity;
    @Value("classpath:models/createTaskModelSuccess_without_bitrixId.json")
    private Resource expectedTaskEntityWithoutBitrixId;
    @Value("classpath:models/updatedTaskModelSuccess.json")
    private Resource expectedUpdatedTaskEntity;
    @Value("classpath:external/getResponsibleIdResponse.json")
    private Resource getResponsibleIdResponse;
    @Value("classpath:external/addHistorySuccess_request.json")
    private Resource addHistoryRequest;
    @Value("classpath:external/addHistorySuccess_response.json")
    private Resource addHistoryResponse;
    @Value("classpath:external/addHistoryUpdateSuccess_request.json")
    private Resource addHistoryUpdateRequest;
    @Value("classpath:external/addHistoryUpdateSuccess_response.json")
    private Resource addHistoryUpdateResponse;
    @Value("classpath:api/createTaskRequestUnSuccess.json")
    private Resource apiUnSuccessRequest;
    @Value("classpath:api/createTaskResponseUnSuccess.json")
    private Resource apiUnSuccessResponse;
    @Value("classpath:api/cancelTaskRequestSuccess.json")
    private Resource apiSuccessCancelRequest;
    @Value("classpath:api/cancelTaskRequestSuccessForHistory.json")
    private Resource apiSuccessCancelRequestForHistory;
    @Value("classpath:api/cancelTaskResponseSuccess.json")
    private Resource apiSuccessCancelResponse;
    @Value("classpath:external/addHistoryCancelSuccess_request.json")
    private Resource addHistoryCancelRequest;
    @Value("classpath:external/addHistoryCancelSuccess_response.json")
    private Resource addHistoryCancelResponse;
    @Value("classpath:api/cancelTaskRequestUnSuccess.json")
    private Resource apiUnSuccessCancelRequest;
    @Value("classpath:api/cancelTaskResponseUnSuccess.json")
    private Resource apiUnSuccessCancelResponse;

    @MockBean
    private BitrixTaskUuidGenerator bitrixTaskUuidGenerator;

    static {
        NEED_KAFKA_TEST_CONTAINER = false;
    }

    @Test
    @DisplayName("Успешное создание задачи в Bitrix24")
    @SneakyThrows
    void createTask() {

        doReturn(TEST_ARM_TASK_GUID).when(bitrixTaskUuidGenerator).generateUuid();

        final var pathsToExpectedResources = Map.of(
            TASK_ADD, Pair.of(extSuccessRequest, extSuccessResponse),
            HISTORY_ADD, Pair.of(addHistoryRequest, addHistoryResponse));
        final var pathTemplateParameters = new HashMap<String, Object>() {{
            put("orderId", "tnt-9357710");
        }};

        initBitrixScenario(pathsToExpectedResources, Collections.emptyMap());
        initOrderScenario(pathsToExpectedResources, pathTemplateParameters);
        customPostScenarioFromResource(
            "/v1/task/manager", apiSuccessRequest, apiSuccessResponse, true, 200);
        final var orderDispatcher = (OrderDispatcher) sfOrderServer.getDispatcher();
        assertEquals(1, orderDispatcher.getValidDispatches(), "Check dispatched STARFISHORDER requests");

        checkTaskDbData(expectedTaskEntity);
    }

    @Test
    @DisplayName("Успешное обновление задачи в Bitrix24")
    @SneakyThrows
    @SqlGroup({
        @Sql(value = "/db/clean_bitrix_tasks.sql", executionPhase = Sql.ExecutionPhase.BEFORE_TEST_METHOD),
        @Sql(value = "/db/init_bitrix_tasks.sql", executionPhase = Sql.ExecutionPhase.BEFORE_TEST_METHOD),
        @Sql(value = "/db/clean_bitrix_tasks.sql", executionPhase = Sql.ExecutionPhase.AFTER_TEST_METHOD)
    })
    void updateTask() {
        final var pathsToExpectedResources = Map.of(
            USER_GET, Pair.<Resource, Resource>of(null, getResponsibleIdResponse),
            TASK_ADD, Pair.of(extUpdatedTaskSuccessRequest, extUpdatedTaskSuccessResponse),
            HISTORY_ADD, Pair.of(addHistoryUpdateRequest, addHistoryUpdateResponse));

        final var pathsTemplateParams = Map.<String, Object>of(
            "user_get_email", "pupkin@pup.ru",
            "user_get_active", true,
            "orderId", "test_update_order_id"
        );
        initBitrixScenario(pathsToExpectedResources, pathsTemplateParams);
        initOrderScenario(pathsToExpectedResources, pathsTemplateParams);
        customPostScenarioFromResource(
            "/v1/task/manager", apiUpdateTaskSuccessRequest, apiUpdateTaskSuccessResponse, true, 200);
        final var orderDispatcher = (OrderDispatcher) sfOrderServer.getDispatcher();
        assertEquals(1, orderDispatcher.getValidDispatches(), "Check dispatched STARFISHORDER requests");

        checkTaskDbData(expectedUpdatedTaskEntity);
    }

    @Test
    @DisplayName("Неуспешное создание задачи в Bitrix24 без истории")
    @SneakyThrows
    void createTaskUnsuccessWoHistory() {
        final var pathsToExpectedResources = Map.of(
            TASK_ADD, Pair.of(extSuccessRequest, extSuccessResponse),
            HISTORY_ADD, Pair.of(addHistoryRequest, addHistoryResponse));
        final var pathTemplateParameters = new HashMap<String, Object>() {{
            put("orderId", "tnt-9357710");
        }};

        initBitrixScenario(pathsToExpectedResources, Collections.emptyMap());
        initOrderScenario(pathsToExpectedResources, pathTemplateParameters);
        customPostScenarioFromResource(
            "/v1/task/manager", apiUnSuccessRequest, apiUnSuccessResponse, true, 400);
        final var orderDispatcher = (OrderDispatcher) sfOrderServer.getDispatcher();
        assertEquals(0, orderDispatcher.getValidDispatches(), "Check dispatched STARFISHORDER requests");

    }

    @Test
    @DisplayName("Успешная отмена задачи в Bitrix24. Без отправки в историю (нет bitrixId)")
    @SqlGroup({
        @Sql(value = "/db/clean_bitrix_tasks.sql", executionPhase = Sql.ExecutionPhase.BEFORE_TEST_METHOD),
        @Sql(value = "/db/init_bitrix_tasks.sql", executionPhase = Sql.ExecutionPhase.BEFORE_TEST_METHOD),
        @Sql(value = "/db/clean_bitrix_tasks.sql", executionPhase = Sql.ExecutionPhase.AFTER_TEST_METHOD)
    })
    @SneakyThrows
    void cancelTask_withoutSendingHistory() {
        final var pathsToExpectedResources = Map.of(
            TASK_ADD, Pair.of(extSuccessRequest, extSuccessResponse),
            HISTORY_ADD, Pair.of(addHistoryCancelRequest, addHistoryCancelResponse));
        final var pathTemplateParameters = new HashMap<String, Object>() {{
            put("orderId", "test_update_order_id");
        }};

        initBitrixScenario(pathsToExpectedResources, Collections.emptyMap());
        initOrderScenario(pathsToExpectedResources, pathTemplateParameters);
        customPostScenarioFromResource(
            "/v1/task/order/cancel", apiSuccessCancelRequest, apiSuccessCancelResponse, true, 200);
        final var orderDispatcher = (OrderDispatcher) sfOrderServer.getDispatcher();
        assertEquals(0, orderDispatcher.getValidDispatches(), "Check dispatched STARFISHORDER requests");

    }

    @Test
    @DisplayName("Успешная отмена задачи в Bitrix24. C отправкой в историю заказа.")
    @SqlGroup({
        @Sql(value = "/db/clean_bitrix_tasks.sql", executionPhase = Sql.ExecutionPhase.BEFORE_TEST_METHOD),
        @Sql(value = "/db/init_bitrix_tasks.sql", executionPhase = Sql.ExecutionPhase.BEFORE_TEST_METHOD),
        @Sql(value = "/db/clean_bitrix_tasks.sql", executionPhase = Sql.ExecutionPhase.AFTER_TEST_METHOD)
    })
    @SneakyThrows
    void cancelTask_withSendingHistory() {
        final var pathsToExpectedResources = Map.of(
            TASK_ADD, Pair.of(extSuccessRequest, extSuccessResponse),
            TASK_CANCEL, Pair.of(extSuccessCancelTaskRequest, extSuccessCancelTaskResponse),
            HISTORY_ADD, Pair.of(addHistoryCancelRequest, addHistoryCancelResponse));
        final var pathTemplateParameters = new HashMap<String, Object>() {{
            put("orderId", "test_update_order_id_2");
        }};

        initBitrixScenario(pathsToExpectedResources, Collections.emptyMap());
        initOrderScenario(pathsToExpectedResources, pathTemplateParameters);
        customPostScenarioFromResource(
            "/v1/task/order/cancel", apiSuccessCancelRequestForHistory, apiSuccessCancelResponse, true, 200);
        final var orderDispatcher = (OrderDispatcher) sfOrderServer.getDispatcher();
        assertEquals(1, orderDispatcher.getValidDispatches(), "Check dispatched STARFISHORDER requests");

    }

    @Test
    @DisplayName("Неуспешная отмена задачи в Bitrix24")
    @SqlGroup({
        @Sql(value = "/db/clean_bitrix_tasks.sql", executionPhase = Sql.ExecutionPhase.BEFORE_TEST_METHOD),
        @Sql(value = "/db/init_bitrix_tasks.sql", executionPhase = Sql.ExecutionPhase.BEFORE_TEST_METHOD),
        @Sql(value = "/db/clean_bitrix_tasks.sql", executionPhase = Sql.ExecutionPhase.AFTER_TEST_METHOD)
    })
    @SneakyThrows
    void cancelUnsuccesWoHistoryTask() {
        final var pathsToExpectedResources = Map.of(
            TASK_ADD, Pair.of(extSuccessRequest, extSuccessResponse),
            HISTORY_ADD, Pair.of(addHistoryCancelRequest, addHistoryCancelResponse));
        final var pathTemplateParameters = new HashMap<String, Object>() {{
            put("orderId", "test_update_order_id");
        }};

        initBitrixScenario(pathsToExpectedResources, Collections.emptyMap());
        initOrderScenario(pathsToExpectedResources, pathTemplateParameters);
        customPostScenarioFromResource(
            "/v1/task/order/cancel", apiUnSuccessCancelRequest, apiUnSuccessCancelResponse, true, 200);
        final var orderDispatcher = (OrderDispatcher) sfOrderServer.getDispatcher();
        assertEquals(0, orderDispatcher.getValidDispatches(), "Check dispatched STARFISHORDER requests");

    }

    @Test
    @DisplayName("Неуспешное создание задачи в Bitrix24 (некорректный код). Запись в историю (order-service) не должна отправляться.")
    @SneakyThrows
    @SqlGroup({
        @Sql(value = "/db/clean_bitrix_tasks.sql", executionPhase = Sql.ExecutionPhase.BEFORE_TEST_METHOD),
        @Sql(value = "/db/clean_bitrix_tasks.sql", executionPhase = Sql.ExecutionPhase.AFTER_TEST_METHOD)
    })
    void unsuccessCreateTask_invalidHttpStatus() {

        doReturn(TEST_ARM_TASK_GUID).when(bitrixTaskUuidGenerator).generateUuid();

        final var pathsToExpectedResources = Map.of(
            TASK_ADD, Pair.of(extSuccessRequest, extSuccessResponse),
            HISTORY_ADD, Pair.of(addHistoryRequest, addHistoryResponse));
        final var pathTemplateParameters = new HashMap<String, Object>() {{
            put("orderId", "tnt-9357710");
        }};

        initBitrixScenario(pathsToExpectedResources, Map.of(TASK_ADD, HttpStatus.BAD_REQUEST), Collections.emptyMap());
        initOrderScenario(pathsToExpectedResources, pathTemplateParameters);
        customPostScenarioFromResource(
            "/v1/task/manager", apiSuccessRequest, apiBitrixTaskWasNotCreatedResponse, true, 200);
        final var orderDispatcher = (OrderDispatcher) sfOrderServer.getDispatcher();
        assertEquals(0, orderDispatcher.getValidDispatches(), "Check dispatched STARFISHORDER requests");
        final var bitrixDispatcher = (BitrixDispatcher) bitrixServer.getDispatcher();
        assertEquals(1, bitrixDispatcher.getValidDispatches(), "Check dispatched Bitrix requests");

        checkTaskDbDataByTaskId(expectedTaskEntityWithoutBitrixId, TEST_ARM_TASK_GUID);
    }

    @Test
    @DisplayName("Неуспешное создание задачи в Bitrix24 (некорректный ответ). Запись в историю (order-service) не должна отправляться.")
    @SneakyThrows
    @SqlGroup({
        @Sql(value = "/db/clean_bitrix_tasks.sql", executionPhase = Sql.ExecutionPhase.BEFORE_TEST_METHOD),
        @Sql(value = "/db/clean_bitrix_tasks.sql", executionPhase = Sql.ExecutionPhase.AFTER_TEST_METHOD)
    })
    void unsuccessCreateTask_invalidResponse() {

        doReturn(TEST_ARM_TASK_GUID).when(bitrixTaskUuidGenerator).generateUuid();

        final var pathsToExpectedResources = Map.of(
            TASK_ADD, Pair.of(extSuccessRequest, extFailedResponse),
            HISTORY_ADD, Pair.of(addHistoryRequest, addHistoryResponse));
        final var pathTemplateParameters = new HashMap<String, Object>() {{
            put("orderId", "tnt-9357710");
        }};

        initBitrixScenario(pathsToExpectedResources, Map.of(TASK_ADD, HttpStatus.OK), Collections.emptyMap());
        initOrderScenario(pathsToExpectedResources, pathTemplateParameters);
        customPostScenarioFromResource(
            "/v1/task/manager", apiSuccessRequest, apiBitrixTaskWasNotCreatedResponse, true, 200);
        final var orderDispatcher = (OrderDispatcher) sfOrderServer.getDispatcher();
        assertEquals(0, orderDispatcher.getValidDispatches(), "Check dispatched STARFISHORDER requests");
        final var bitrixDispatcher = (BitrixDispatcher) bitrixServer.getDispatcher();
        assertEquals(1, bitrixDispatcher.getValidDispatches(), "Check dispatched Bitrix requests");

        checkTaskDbDataByTaskId(expectedTaskEntityWithoutBitrixId, TEST_ARM_TASK_GUID);
    }

    private void checkTaskDbData(Resource entity) {
        final HashMap<String, String> expectedTask = readResourceToObject(entity, HashMap.class);
        final var task = bitrixTaskService.getByBitrixId(expectedTask.get("bitrixId"));
        taskAssertions(task, expectedTask);
    }

    private void checkTaskDbDataByTaskId(Resource entity, String bitrixTaskId) {
        final HashMap<String, String> expectedTask = readResourceToObject(entity, HashMap.class);
        final var task = bitrixTaskService.getById(bitrixTaskId);
        taskAssertions(task, expectedTask);
    }

    private static void taskAssertions(BitrixTask task, HashMap<String, String> expectedTask) {
        Assertions.assertNotNull(task);
        Assertions.assertAll(
            () -> assertEquals(task.getBitrixId(), expectedTask.get("bitrixId")),
            () -> assertEquals(task.getTitle(), expectedTask.get("title")),
            () -> assertEquals(task.getDescription(), expectedTask.get("description")),
            () -> assertEquals(task.getResponsibleId(), expectedTask.get("responsibleId")),
            () -> assertEquals(task.getResponsibleEmail(), expectedTask.get("responsibleEmail")),
            () -> assertEquals(task.getDeadline().toLocalDateTime().toString(), expectedTask.get("deadline")),
            () -> assertEquals(task.getClientOrderId(), expectedTask.get("clientOrderId")),
            () -> assertEquals(task.getOrderId(), expectedTask.get("orderId")),
            () -> assertEquals(task.getTenantId(), expectedTask.get("tenantId")),
            () -> assertEquals(task.getZoneId(), expectedTask.get("zoneId")),
            () -> assertEquals(task.getType(), BitrixTaskType.CLIENT_NOT_ARRIVED)
        );
    }

    private <E extends BaseEnum> void initBitrixScenario(Map<E, Pair<Resource, Resource>> pathToExpectedResources,
                                                         Map<String, Object> pathTemplateParameters) {
        initBitrixScenario(pathToExpectedResources, Map.of(), pathTemplateParameters);
    }

    private <E extends BaseEnum> void initBitrixScenario(Map<E, Pair<Resource, Resource>> pathToExpectedResources,
                                                         Map<E, HttpStatus> pathsToExpectedHttpStatus,
                                                         Map<String, Object> pathTemplateParameters) {
        final var dispatcherDatas = new ArrayList<DispatcherData>();

        if (pathToExpectedResources.containsKey(USER_GET)) {
            final var resourceResourcePair = pathToExpectedResources.get(USER_GET);
            dispatcherDatas.add(
                USER_GET.buildDispatcherData(
                    resourceResourcePair, HttpMethod.GET,
                    pathsToExpectedHttpStatus.getOrDefault(USER_GET, HttpStatus.OK),
                    pathTemplateParameters));
        }

        if (pathToExpectedResources.containsKey(TASK_ADD)) {
            final var resourceResourcePair = pathToExpectedResources.get(TASK_ADD);
            dispatcherDatas.add(
                TASK_ADD.buildDispatcherData(
                    resourceResourcePair, HttpMethod.POST,
                    pathsToExpectedHttpStatus.getOrDefault(TASK_ADD, HttpStatus.OK),
                    pathTemplateParameters));
        }

        if (pathToExpectedResources.containsKey(TASK_CANCEL)) {
            final var resourceResourcePair = pathToExpectedResources.get(TASK_CANCEL);
            dispatcherDatas.add(
                TASK_CANCEL.buildDispatcherData(
                    resourceResourcePair, HttpMethod.POST,
                    pathsToExpectedHttpStatus.getOrDefault(TASK_CANCEL, HttpStatus.OK),
                    pathTemplateParameters));
        }

        initBitrixDispatchers(dispatcherDatas);
    }

}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/java/ru/liga/evraz/bitrix/GetOrderTasksHttpTest.java
Content:
package ru.liga.evraz.bitrix;

import lombok.SneakyThrows;
import lombok.extern.slf4j.Slf4j;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.test.autoconfigure.web.reactive.AutoConfigureWebTestClient;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.core.io.Resource;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.jdbc.SqlGroup;
import ru.liga.evraz.bitrix.base.BaseIntegrationTest;

@Slf4j
@ActiveProfiles("test")
@AutoConfigureWebTestClient(timeout = "5s")
@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
@SuppressWarnings("PMD.TooManyStaticImports")
class GetOrderTasksHttpTest extends BaseIntegrationTest {

    @Value("classpath:api/getOrderTasks/getOrderTaskRequestOnlyByOrderSuccess.json")
    private Resource apiSuccessOnlyByOrderRequest;
    @Value("classpath:api/getOrderTasks/getOrderTaskRequestByOrderAndTypeSuccess.json")
    private Resource apiSuccessByOrderAndTypeRequest;
    @Value("classpath:api/getOrderTasks/getOrderTasksResponseEmptySuccess.json")
    private Resource apiSuccessEmptyResponse;
    @Value("classpath:api/getOrderTasks/getOrderTasksResponseNonEmptySuccess.json")
    private Resource apiSuccessNonEmptyResponse;

    static {
        NEED_KAFKA_TEST_CONTAINER = false;
    }

    @Test
    @DisplayName("Успешное получение задач только по заказу. Ничего не найдено")
    @SneakyThrows
    @SqlGroup({
        @Sql(value = "/db/clean_bitrix_tasks.sql", executionPhase = Sql.ExecutionPhase.BEFORE_TEST_METHOD),
        @Sql(value = "/db/clean_bitrix_tasks.sql", executionPhase = Sql.ExecutionPhase.AFTER_TEST_METHOD)
    })
    void getOrderTasksByOrderNothingWereFound() {
        customPostScenarioFromResource(
            "/v1/task/byOrder", apiSuccessOnlyByOrderRequest, apiSuccessEmptyResponse, true, 200);
    }

    @Test
    @DisplayName("Успешное получение задач по заказу и типам. Ничего не найдено")
    @SneakyThrows
    @SqlGroup({
        @Sql(value = "/db/clean_bitrix_tasks.sql", executionPhase = Sql.ExecutionPhase.BEFORE_TEST_METHOD),
        @Sql(value = "/db/clean_bitrix_tasks.sql", executionPhase = Sql.ExecutionPhase.AFTER_TEST_METHOD)
    })
    void getOrderTasksByOrderAndTypeNothingWereFound() {
        customPostScenarioFromResource(
            "/v1/task/byOrder", apiSuccessByOrderAndTypeRequest, apiSuccessEmptyResponse, true, 200);
    }

    @Test
    @DisplayName("Успешное получение задач только по заказу. Получен результат")
    @SneakyThrows
    @SqlGroup({
        @Sql(value = "/db/clean_bitrix_tasks.sql", executionPhase = Sql.ExecutionPhase.BEFORE_TEST_METHOD),
        @Sql(value = "/db/init_bitrix_tasks.sql", executionPhase = Sql.ExecutionPhase.BEFORE_TEST_METHOD),
        @Sql(value = "/db/clean_bitrix_tasks.sql", executionPhase = Sql.ExecutionPhase.AFTER_TEST_METHOD)
    })
    void getOrderTasksOnlyByOrder() {
        customPostScenarioFromResource(
            "/v1/task/byOrder", apiSuccessOnlyByOrderRequest, apiSuccessNonEmptyResponse, true, 200);
    }

    @Test
    @DisplayName("Успешное получение задач по заказу и типу. Получен результат")
    @SneakyThrows
    @SqlGroup({
        @Sql(value = "/db/clean_bitrix_tasks.sql", executionPhase = Sql.ExecutionPhase.BEFORE_TEST_METHOD),
        @Sql(value = "/db/init_bitrix_tasks.sql", executionPhase = Sql.ExecutionPhase.BEFORE_TEST_METHOD),
        @Sql(value = "/db/clean_bitrix_tasks.sql", executionPhase = Sql.ExecutionPhase.AFTER_TEST_METHOD)
    })
    void getOrderTasksByOrderAndType() {
        customPostScenarioFromResource(
            "/v1/task/byOrder", apiSuccessOnlyByOrderRequest, apiSuccessNonEmptyResponse, true, 200);
    }

}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/java/ru/liga/evraz/bitrix/ValidationUtilsTest.java
Content:
package ru.liga.evraz.bitrix;

import org.junit.jupiter.api.Test;
import ru.liga.evraz.bitrix.adapter.db.entity.BitrixTaskType;
import ru.liga.evraz.bitrix.adapter.http.out.enums.BitrixTaskResultCode;
import ru.liga.evraz.bitrix.domain.model.BitrixTask;
import ru.liga.evraz.bitrix.util.ValidationUtils;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;

public class ValidationUtilsTest {

    @Test
    public void validateBitrixTaskWithTypeSuccess() {
        BitrixTask bitrixTask = BitrixTask.builder().type(BitrixTaskType.CLIENT_NOT_ARRIVED).build();
        String taskResult = BitrixTaskResultCode.COMPLETED_AUTOMATICALLY_SHIPMENT_CONTROL.getBitrixTaskResultCode();
        final var result = ValidationUtils.validateBitrixTask(bitrixTask, taskResult);
        assertTrue(result, "Error bitrix task validation. Result must be true");
    }

    @Test
    public void validateBitrixTaskWithTypeNotSuccess() {
        BitrixTask bitrixTask = BitrixTask.builder().type(BitrixTaskType.CLIENT_NOT_ARRIVED).build();
        String taskResult = BitrixTaskResultCode.COMPLETED_AUTOMATICALLY.getBitrixTaskResultCode();
        final var result = ValidationUtils.validateBitrixTask(bitrixTask, taskResult);
        assertFalse(result, "Error bitrix task validation. Result must be false");
    }

    @Test
    public void validateBitrixTaskWithWrongTypeNotSuccess() {
        BitrixTask bitrixTask = BitrixTask.builder().type(BitrixTaskType.CLIENT_NOT_ARRIVED).build();
        String taskResult = "not-existed-code";
        final var result = ValidationUtils.validateBitrixTask(bitrixTask, taskResult);
        assertFalse(result, "Error bitrix task validation. Result must be false");
    }

    @Test
    public void validateBitrixTaskWithoutTypeSuccess() {
        BitrixTask bitrixTask = BitrixTask.builder().type(null).build();
        String taskResult = BitrixTaskResultCode.COMPLETED_AUTOMATICALLY.getBitrixTaskResultCode();
        final var result = ValidationUtils.validateBitrixTask(bitrixTask, taskResult);
        assertTrue(result, "Error bitrix task validation. Result must be true");
    }

    @Test
    public void validateBitrixTaskWithoutTypeNotSuccess() {
        BitrixTask bitrixTask = BitrixTask.builder().type(null).build();
        String taskResult = BitrixTaskResultCode.COMPLETED_AUTOMATICALLY_SHIPMENT_RESERVATION.getBitrixTaskResultCode();
        final var result = ValidationUtils.validateBitrixTask(bitrixTask, taskResult);
        assertFalse(result, "Error bitrix task validation. Result must be false");
    }

    @Test
    public void validateBitrixTaskWithEmptyResultNotSuccess() {
        BitrixTask bitrixTask = BitrixTask.builder().type(BitrixTaskType.ORDER_PROLONG_RESERVE).build();
        String taskResult = null;
        final var result = ValidationUtils.validateBitrixTask(bitrixTask, taskResult);
        assertFalse(result, "Error bitrix task validation with null task result. Result must be false");
        taskResult = " ";
        final var result2 = ValidationUtils.validateBitrixTask(bitrixTask, taskResult);
        assertFalse(result2, "Error bitrix task validation with blank task result. Result must be false");
    }
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/java/ru/liga/evraz/bitrix/util/KafkaUtils.java
Content:
package ru.liga.evraz.bitrix.util;

import lombok.experimental.UtilityClass;
import org.apache.kafka.clients.consumer.ConsumerConfig;
import org.apache.kafka.clients.producer.ProducerConfig;
import org.apache.kafka.common.serialization.StringDeserializer;
import org.apache.kafka.common.serialization.StringSerializer;
import org.springframework.boot.autoconfigure.kafka.KafkaProperties;
import org.springframework.kafka.support.serializer.JsonDeserializer;
import org.springframework.kafka.support.serializer.JsonSerializer;
import reactor.kafka.receiver.KafkaReceiver;
import reactor.kafka.receiver.ReceiverOptions;
import reactor.kafka.sender.KafkaSender;
import reactor.kafka.sender.SenderOptions;

import java.util.Collections;
import java.util.Map;

@UtilityClass
@SuppressWarnings({"MissingJavadocType", "MissingJavadocMethod"})
public class KafkaUtils {
    public static KafkaSender<String, Object> createSender(KafkaProperties properties) {
        Map<String, Object> producerProps = properties.buildProducerProperties();
        producerProps.put(ProducerConfig.ACKS_CONFIG, "all");
        producerProps.put(ProducerConfig.CLIENT_ID_CONFIG, properties.getProducer().getClientId());
        producerProps.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        producerProps.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, JsonSerializer.class);
        return KafkaSender.create(SenderOptions.create(producerProps));
    }

    public static KafkaReceiver<String, String> createReceiver(KafkaProperties properties, String topic) {
        Map<String, Object> consumerProps = properties.buildConsumerProperties();
        consumerProps.put(ConsumerConfig.GROUP_ID_CONFIG, properties.getConsumer().getGroupId());
        consumerProps.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);
        consumerProps.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);
        consumerProps.put(JsonDeserializer.TRUSTED_PACKAGES, "*");
        var receiverOptions = ReceiverOptions.<String, String>create(consumerProps)
                .commitBatchSize(0).subscription(Collections.singleton(topic));
        return KafkaReceiver.create(receiverOptions);
    }
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/java/ru/liga/evraz/bitrix/util/ResourceUtils.java
Content:
package ru.liga.evraz.bitrix.util;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
import lombok.SneakyThrows;
import org.springframework.core.io.ClassPathResource;
import org.springframework.core.io.Resource;
import org.springframework.util.FileCopyUtils;

import java.io.IOException;
import java.io.InputStreamReader;
import java.io.Reader;
import java.io.UncheckedIOException;

import static java.nio.charset.StandardCharsets.UTF_8;


/**
 * Класс для считывания тестовых ресурсов.
 */
public class ResourceUtils {


    /**
     * Load Resource from class path as string.
     *
     * @param resourcePath path
     * @return string - resource
     */
    public static String getResourceAsString(String resourcePath) {
        if (resourcePath.startsWith("classpath:")) {
            resourcePath = resourcePath.replace("classpath:", "");
        }
        var resource = new ClassPathResource(resourcePath);
        try (Reader reader = new InputStreamReader(resource.getInputStream(), UTF_8)) {
            return FileCopyUtils.copyToString(reader);
        } catch (IOException e) {
            throw new UncheckedIOException(e);
        }
    }

    /**
     * Load Resource from class path as string.
     *
     * @param resource resource
     * @return string - resource
     */
    public static String getResourceAsString(Resource resource) {
        try (Reader reader = new InputStreamReader(resource.getInputStream(), UTF_8)) {
            return FileCopyUtils.copyToString(reader);
        } catch (IOException e) {
            throw new UncheckedIOException(e);
        }
    }

    @SneakyThrows
    public static <T> T readResourceToObject(Resource resource, Class<T> clazz) {
        return mapper().readValue(resource.getFile(), clazz);
    }

    @SneakyThrows
    public static <T> T readJsonStringToObject(String jsonString, Class<T> clazz) {
        return mapper().readValue(jsonString, clazz);
    }

    @SneakyThrows
    public static String writeObjectAsJsonString(Object content) {
        return mapper().writeValueAsString(content);
    }

    /**
     * Метод формирования и получения {@link ObjectMapper} для тестов.
     *
     * @return - {@link ObjectMapper}
     */
    public static ObjectMapper mapper() {
        ObjectMapper mapper = new ObjectMapper();
        mapper.registerModule(new JavaTimeModule());
        mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false);
        return mapper;
    }
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/java/ru/liga/evraz/bitrix/kafka/BaseKafkaConsumer.java
Content:
package ru.liga.evraz.bitrix.kafka;


import lombok.Getter;
import lombok.Setter;
import lombok.extern.slf4j.Slf4j;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.springframework.validation.annotation.Validated;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.CountDownLatch;


/**
 * Базовый класс для реализации слушателей Kafka.
 */
@Slf4j
@Validated
@Getter
abstract class BaseKafkaConsumer {

    @Setter
    protected CountDownLatch latch;
    private String payload = null;
    private String correlationUid = null;
    private final List<String> payloads = new ArrayList<>();

    /**
     * Слушатель топика.
     *
     * @param consumerRecord - запись в Kafka.
     */
    public void receive(ConsumerRecord<?, ?> consumerRecord) {
        log.info("received payload = '{}'", consumerRecord.toString());
        correlationUid = consumerRecord.key().toString();
        payload = consumerRecord.value().toString();
        payloads.add(payload);
        latch.countDown();
    }

    abstract void setCountDownLatch(int count);

    public void reset() {
        this.payload = null;
        this.payloads.clear();
        this.correlationUid = null;
    }
}

File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/java/ru/liga/evraz/bitrix/kafka/TestKafkaTaskExecutionStatusConsumer.java
Content:
package ru.liga.evraz.bitrix.kafka;

import lombok.extern.slf4j.Slf4j;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.stereotype.Component;
import org.springframework.validation.annotation.Validated;

import java.util.concurrent.CountDownLatch;

/**
 * Слушатель топика.
 */
@Component
@Slf4j
@Validated
public class TestKafkaTaskExecutionStatusConsumer extends BaseKafkaConsumer {

    public TestKafkaTaskExecutionStatusConsumer() {
        setCountDownLatch(1);
    }

    /**
     * Слушатель топика.
     *
     * @param consumerRecord - запись в Kafka.
     */

    @Override
    @KafkaListener(
            topics = "${bitrix.kafka.taskExecutionStatus.topic}",
            groupId = "${spring.kafka.consumer.group-id}-TaskExecutionStatus-v1")
    public void receive(ConsumerRecord<?, ?> consumerRecord) {
        super.receive(consumerRecord);
    }

    @Override
    public void setCountDownLatch(int count) {
        setLatch(new CountDownLatch(count));
    }

    public void resetWithCountDown(int countDownLatch) {
        reset();
        setCountDownLatch(countDownLatch);
    }
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/java/ru/liga/evraz/bitrix/domain/model/TaskExecutionStatusTest.java
Content:
package ru.liga.evraz.bitrix.domain.model;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

class TaskExecutionStatusTest {
    @Test
    public void allValueParsedAsIntOrNull() {
        Assertions.assertAll(() -> {
            for (TaskExecutionStatus status : TaskExecutionStatus.values()) {
                if (status.getErpStatusId() != null) {
                    Assertions.assertAll(() -> {
                        Integer.parseInt(status.getErpStatusId());
                    });
                }
            }
        });

    }

}

File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/java/ru/liga/evraz/bitrix/dispatcher/BaseDispatcher.java
Content:
package ru.liga.evraz.bitrix.dispatcher;

import lombok.Getter;
import lombok.Setter;
import lombok.SneakyThrows;
import lombok.extern.slf4j.Slf4j;
import okhttp3.mockwebserver.Dispatcher;
import okhttp3.mockwebserver.MockResponse;
import okhttp3.mockwebserver.RecordedRequest;
import okhttp3.mockwebserver.SocketPolicy;
import org.json.JSONException;
import org.skyscreamer.jsonassert.JSONAssert;
import org.springframework.core.io.ClassPathResource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;

import java.nio.charset.StandardCharsets;
import java.util.List;

import static ru.liga.evraz.bitrix.util.ResourceUtils.getResourceAsString;

@Slf4j
abstract class BaseDispatcher extends Dispatcher {

    List<DispatcherData> dispatcherDataList;

    @Getter
    @Setter
    int validDispatches = 0;

    @Getter
    @Setter
    boolean strictJsonCheck = false;

    @SneakyThrows
    @Override
    public MockResponse dispatch(RecordedRequest request) {
        for (DispatcherData dispatcherData : dispatcherDataList) {
            if (dispatcherData != null
                && request.getMethod().equals(dispatcherData.getHttpMethod()) && request.getPath().equals(dispatcherData.getPath())
                && checkRequest(request, dispatcherData)) {

                validDispatches++;
                int skipReqCount = dispatcherData.getSkipReqCount();
                if (skipReqCount > 0) {
                    --skipReqCount;
                    return new MockResponse().setSocketPolicy(SocketPolicy.NO_RESPONSE);
                }
                return new MockResponse()
                    .setResponseCode(dispatcherData.getStatus().value())
                    .setHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE)
                    // fix NoHttpResponseException: localhost:8091 failed to respond
                    .setHeader(HttpHeaders.CONNECTION, "close")
                    .setBody(getResourceAsString(dispatcherData.getExpectedResponse()));
            }
        }
        return new MockResponse().setResponseCode(HttpStatus.METHOD_NOT_ALLOWED.value());
    }

    private boolean checkRequest(RecordedRequest request, DispatcherData dispatcherData) throws JSONException {
        try (var bufferClone = request.getBody().clone()) {
            if (dispatcherData.getExpectedRequest() != null) {
                final var expect = getResourceAsString(dispatcherData.getExpectedRequest());
                final var actual = bufferClone.readString(StandardCharsets.UTF_8);
                log.info("=== Expected result path: \n{}", ((ClassPathResource) dispatcherData.getExpectedRequest()).getPath());
                JSONAssert.assertEquals(expect, actual, false);
            }
            return true;
        } catch (AssertionError error) {
            log.error("", error);
            return false;
        }
    }
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/java/ru/liga/evraz/bitrix/dispatcher/BitrixDispatcher.java
Content:
package ru.liga.evraz.bitrix.dispatcher;

import java.util.List;

/**
 * Диспетчер сервиса bitrix.
 */
public class BitrixDispatcher extends BaseDispatcher {

    public BitrixDispatcher(List<DispatcherData> dispatcherDataList) {
        this.dispatcherDataList = dispatcherDataList;
    }
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/java/ru/liga/evraz/bitrix/dispatcher/DispatcherData.java
Content:
package ru.liga.evraz.bitrix.dispatcher;

import lombok.Builder;
import lombok.Getter;
import org.springframework.core.io.Resource;
import org.springframework.http.HttpStatus;

/**
 * Данные для мокирования запроса.
 */
@Getter
@Builder
public class DispatcherData {
    private final String token;
    private final String path;
    private final int skipReqCount;
    private final Resource expectedRequest;
    private final String httpMethod;
    private final Resource expectedResponse;
    private final HttpStatus status;
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/java/ru/liga/evraz/bitrix/dispatcher/OrderDispatcher.java
Content:
package ru.liga.evraz.bitrix.dispatcher;

import lombok.extern.slf4j.Slf4j;

import java.util.List;

@Slf4j
public class OrderDispatcher extends BaseDispatcher {

    public OrderDispatcher(List<DispatcherData> dispatcherDataList) {
        this.dispatcherDataList = dispatcherDataList;
        this.strictJsonCheck = true;
    }
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/java/ru/liga/evraz/bitrix/config/BaseEnum.java
Content:
package ru.liga.evraz.bitrix.config;

import org.apache.commons.lang3.tuple.Pair;
import org.springframework.core.io.Resource;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import ru.liga.evraz.bitrix.dispatcher.DispatcherData;

import java.util.Map;

public interface BaseEnum {

    String getPathTemplate();

    default DispatcherData buildDispatcherData(Pair<Resource, Resource> req2resp,
                                               HttpMethod httpMethod, HttpStatus httpStatus) {
        return buildDispatcherData(req2resp, httpMethod, httpStatus, null);
    }

    default DispatcherData buildDispatcherData(Pair<Resource, Resource> req2resp, HttpMethod httpMethod,
        HttpStatus httpStatus, Map<String, Object> templateParameters) {
        return DispatcherData.builder()
            .path(MessageFormatter.format(getPathTemplate(), templateParameters))
            .httpMethod(httpMethod.toString())
            .expectedRequest(req2resp.getLeft())
            .expectedResponse(req2resp.getRight())
            .status(httpStatus)
            .build();
    }
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/java/ru/liga/evraz/bitrix/config/BitrixPath.java
Content:
package ru.liga.evraz.bitrix.config;

import lombok.Getter;

@Getter
public enum BitrixPath implements BaseEnum {
    USER_GET("/rest/846/5ddu42vxezv17e5k/user.get.json?email=${user_get_email}&active=${user_get_active}") {

    },
    TASK_ADD("/") {

    },
    TASK_CANCEL("/cancel") {

    };;

    private final String pathTemplate;

    BitrixPath(String pathTemplate) {
        this.pathTemplate = pathTemplate;
    }
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/java/ru/liga/evraz/bitrix/config/MessageFormatter.java
Content:
package ru.liga.evraz.bitrix.config;

import lombok.experimental.UtilityClass;

import java.util.ArrayList;
import java.util.Map;
import java.util.regex.Pattern;

@UtilityClass
class MessageFormatter {
    public static String format(String template, Map<String, Object> parameters) {
        final var newTemplate = new StringBuilder(template);
        final var valueList = new ArrayList<>();

        final var matcher = Pattern.compile("[$][{](\\w+)}").matcher(template);

        while (matcher.find()) {
            String key = matcher.group(1);

            String paramName = "${" + key + "}";
            int index = newTemplate.indexOf(paramName);
            if (index != -1) {
                newTemplate.replace(index, index + paramName.length(), "%s");
                valueList.add(parameters.get(key));
            }
        }

        return String.format(newTemplate.toString(), valueList.toArray());
    }
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/java/ru/liga/evraz/bitrix/config/OrderPath.java
Content:
package ru.liga.evraz.bitrix.config;

import lombok.Getter;

@Getter
public enum OrderPath implements BaseEnum {
    HISTORY_ADD("/order/${orderId}/history") {

    };

    private final String pathTemplate;

    OrderPath(String pathTemplate) {
        this.pathTemplate = pathTemplate;
    }
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/java/ru/liga/evraz/bitrix/config/TestConfig.java
Content:
package ru.liga.evraz.bitrix.config;

import feign.RequestInterceptor;
import org.springframework.boot.test.context.TestConfiguration;
import org.springframework.context.annotation.Bean;

@TestConfiguration
public class TestConfig {

    @Bean
    public RequestInterceptor requestInterceptor() {
        return new TestRequestInterceptor();
    }
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/java/ru/liga/evraz/bitrix/config/TestRequestInterceptor.java
Content:
package ru.liga.evraz.bitrix.config;

import feign.RequestInterceptor;
import feign.RequestTemplate;
import feign.Target;
import lombok.extern.slf4j.Slf4j;

@Slf4j
class TestRequestInterceptor implements RequestInterceptor {

    @Override
    public void apply(RequestTemplate requestTemplate) {
        log.info("Intercept request to add prefix to path");
        final Target<?> target = requestTemplate.feignTarget();
        switch (target.name()) {
            case "test-aggregation-service":
                requestTemplate.target(
                    String.format("%s%s/%s",
                        "http://localhost:9200", "", ""));
                break;
            case "test-bitrix-adapter":
                requestTemplate.target(
                    String.format("%s%s/%s",
                        "http://localhost:9201", "", ""));
                break;
            case "test-erp-adapter":
                requestTemplate.target(
                    String.format("%s%s/%s",
                        "http://localhost:9202", "", ""));
                break;
            case "test-api-gateway":
                requestTemplate.target(
                    String.format("%s%s/%s",
                        "http://localhost:9203", "", ""));
                break;
            case "test-settings":
                requestTemplate.target(
                    String.format("%s%s/%s",
                        "http://localhost:9204", "", ""));
                break;
            case "test-dictionary":
                requestTemplate.target(
                    String.format("%s%s/%s",
                        "http://localhost:9205", "", ""));
                break;
            case "test-camunda":
                requestTemplate.target(
                    String.format("%s%s/%s",
                        "http://localhost:9206", "", ""));
                break;
            case "test-bpm":
                requestTemplate.target(
                    String.format("%s%s/%s",
                        "http://localhost:9207", "", ""));
                break;
            case "test-order":
                requestTemplate.target(
                    String.format("%s%s/%s",
                        "http://localhost:9208", "", ""));
                break;
            case "test-product":
                requestTemplate.target(
                    String.format("%s%s/%s",
                        "http://localhost:9209", "", ""));
                break;
            case "test-stock":
                requestTemplate.target(
                    String.format("%s%s/%s",
                        "http://localhost:9210", "", ""));
                break;
            case "test-adapter":
                requestTemplate.target(
                    String.format("%s%s/%s",
                        "http://localhost:9211", "", ""));
                break;
            case "test-camunda-worker":
                requestTemplate.target(
                    String.format("%s%s/%s",
                        "http://localhost:9212", "", ""));
                break;
            case "test-custom-camunda-worker":
                requestTemplate.target(
                    String.format("%s%s/%s",
                        "http://localhost:9213", "", ""));
                break;
            case "test-delivery":
                requestTemplate.target(
                    String.format("%s%s/%s",
                        "http://localhost:9214", "", ""));
                break;
            case "test-message-gateway":
                requestTemplate.target(
                    String.format("%s%s/%s",
                        "http://localhost:9215", "", ""));
                break;
            case "test-parser":
                requestTemplate.target(
                    String.format("%s%s/%s",
                        "http://localhost:9216", "", ""));
                break;
            case "test-report":
                requestTemplate.target(
                    String.format("%s%s/%s",
                        "http://localhost:9217", "", ""));
                break;
            case "test-websocket":
                requestTemplate.target(
                    String.format("%s%s/%s",
                        "http://localhost:9218", "", ""));
                break;
            case "test-sso":
                requestTemplate.target(
                    String.format("%s%s/%s",
                        "http://localhost:9219", "", ""));
                break;
            default:
                throw new IllegalArgumentException("unknown service");
        }
    }
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/java/ru/liga/evraz/bitrix/config/TestTimeConfig.java
Content:
package ru.liga.evraz.bitrix.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Primary;

import java.time.Clock;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.ZoneOffset;

/**
 * Конфигурация для заглушки текущего времени.
 */
@Configuration
public class TestTimeConfig {
    private static final LocalDate DEFAULT_LOCAL_DATE_NOW = LocalDate.of(2023, 6, 29);

    @Bean
    @Primary
    public Clock clock() {
        final var zoneId = ZoneId.ofOffset("UTC", ZoneOffset.of("+3"));
        return Clock.fixed(DEFAULT_LOCAL_DATE_NOW.atStartOfDay(zoneId).toInstant(), zoneId);
    }
}



File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/java/ru/liga/evraz/bitrix/base/BaseIntegrationTest.java
Content:
package ru.liga.evraz.bitrix.base;

import lombok.Setter;
import lombok.SneakyThrows;
import lombok.extern.slf4j.Slf4j;
import okhttp3.mockwebserver.MockWebServer;
import org.apache.commons.lang3.tuple.Pair;
import org.json.JSONException;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.skyscreamer.jsonassert.JSONAssert;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.context.annotation.Import;
import org.springframework.core.io.Resource;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.test.context.DynamicPropertyRegistry;
import org.springframework.test.context.DynamicPropertySource;
import org.testcontainers.containers.KafkaContainer;
import org.testcontainers.containers.PostgreSQLContainer;
import org.testcontainers.containers.wait.strategy.Wait;
import org.testcontainers.utility.DockerImageName;
import reactor.kafka.sender.KafkaSender;
import ru.liga.evraz.bitrix.config.BaseEnum;
import ru.liga.evraz.bitrix.config.TestConfig;
import ru.liga.evraz.bitrix.dispatcher.BitrixDispatcher;
import ru.liga.evraz.bitrix.dispatcher.DispatcherData;
import ru.liga.evraz.bitrix.dispatcher.OrderDispatcher;
import ru.liga.evraz.bitrix.domain.repository.BitrixTaskService;

import java.time.Duration;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static ru.liga.evraz.bitrix.config.OrderPath.HISTORY_ADD;
import static ru.liga.evraz.bitrix.util.ResourceUtils.getResourceAsString;
import static ru.liga.evraz.bitrix.util.ResourceUtils.readResourceToObject;

/**
 * Базовый интеграционный тест с подключением контейнера Kafka.
 */
@Slf4j
@Import(TestConfig.class)
public abstract class BaseIntegrationTest {

    protected static final Duration TIMEOUT = Duration.ofSeconds(10);
    protected static final String INTEGRATION_TOKEN = "eyJhbGciOiJIUzUxMiJ9.eyJ0ZW5hbnRJZCI6ImV2cmF6X29tc19kZXYiLCJ1c2VySWQiOiJ0ZXN0Iiwicm9sZSI6IklOVEVHUkFUSU9OIiwibG9naW4iOiJ0ZXN0IiwidmVyc2lvbiI6MCwiYXV0aFR5cGUiOiJvbXNDcmVkZW50aWFscyIsImV4cCI6NDgyOTExOTIxMCwic3ViIjoidGVzdCJ9.2H6DNSLnXZj6NNVQlCZuz-LKJFcnJMpveU-3v-w1i01aU-hO4_8a274MmlIbfPuvunFQIeGsoIh_KnJORvIOmg";
    protected static final PostgreSQLContainer<?> POSTGRES_SQL_CONTAINER;

    @Setter
    protected static boolean NEED_KAFKA_TEST_CONTAINER = true;

    // Ограничение размера выделяемой ОЗУ для контейнера Kafka (1 Гб).
    private static final Long KAFKA_MEMORY_IN_BYTES = 1073741824L;
    private static final String KAFKA_CONTAINER_NAME = "kafka-testcontainer".concat(UUID.randomUUID().toString());

    @Autowired
    private TestRestTemplate testRestTemplate;

    @Autowired
    protected BitrixTaskService bitrixTaskService;

    protected final MockWebServer bitrixServer = new MockWebServer();
    protected final MockWebServer sfOrderServer = new MockWebServer();

    protected static final KafkaContainer KAFKA_CONTAINER;

    protected KafkaSender<String, Object> sender;

    static {
        var psqlImage = DockerImageName.parse("postgres:13.2")
                .asCompatibleSubstituteFor("postgres");
        POSTGRES_SQL_CONTAINER = new PostgreSQLContainer<>(psqlImage)//.withInitScript("db/init-sql/init.sql")
                .waitingFor(Wait.forListeningPort());
        POSTGRES_SQL_CONTAINER.start();

        if (NEED_KAFKA_TEST_CONTAINER) {
            final var kafkaImage = DockerImageName.parse("confluentinc/cp-kafka:6.2.1");
            KAFKA_CONTAINER = new KafkaContainer(kafkaImage)
                    .withCreateContainerCmdModifier(cmd -> {
                        cmd.getHostConfig()
                                .withMemory(KAFKA_MEMORY_IN_BYTES);
                        cmd.withName(KAFKA_CONTAINER_NAME);
                    });
            KAFKA_CONTAINER.start();
        } else {
            KAFKA_CONTAINER = null;
        }
    }

    @DynamicPropertySource
    static void initProperties(DynamicPropertyRegistry registry) {
        // JDBC DataSource
        registry.add("spring.datasource.url", POSTGRES_SQL_CONTAINER::getJdbcUrl);
        registry.add("spring.datasource.password", POSTGRES_SQL_CONTAINER::getPassword);
        registry.add("spring.datasource.username", POSTGRES_SQL_CONTAINER::getUsername);

        registry.add("spring.liquibase.url", POSTGRES_SQL_CONTAINER::getJdbcUrl);
        registry.add("spring.liquibase.password", POSTGRES_SQL_CONTAINER::getPassword);
        registry.add("spring.liquibase.user", POSTGRES_SQL_CONTAINER::getUsername);

        if (NEED_KAFKA_TEST_CONTAINER) {
            // Kafka props
            registry.add("spring.kafka.consumer.bootstrap-servers", KAFKA_CONTAINER::getBootstrapServers);
            registry.add("spring.kafka.producer.bootstrap-servers", KAFKA_CONTAINER::getBootstrapServers);
        }
    }

    @BeforeEach
    @SneakyThrows
    protected void beforeEach() {
        this.bitrixServer.start(8091);
        this.sfOrderServer.start(9208);
    }

    @AfterEach
    @SneakyThrows
    protected void afterEach() {
        bitrixServer.shutdown();
        sfOrderServer.shutdown();
        if (NEED_KAFKA_TEST_CONTAINER) {
            sender.close();
        }
        bitrixTaskService.deleteAll();
    }

    @SneakyThrows
    protected void customGetScenarioFromResource(
            String url, Resource expectedResponse, int httpCode) {
    }

    // POST
    @SneakyThrows
    protected <REQ> void customPostScenarioFromResource(
            String url, Pair<Resource, Class<REQ>> expectedRequest, Resource expectedResponse, int httpCode) {
        final var req = readResourceToObject(expectedRequest.getKey(), expectedRequest.getValue());
        final var requestEntity = new HttpEntity<>(req, new HttpHeaders());
        final var result = testRestTemplate.exchange(url, HttpMethod.POST, requestEntity, String.class);

        assertEquals(httpCode, result.getStatusCodeValue());
        JSONAssert.assertEquals(getResourceAsString(expectedResponse), result.getBody(), true);
    }

    @SneakyThrows
    protected void customPostScenarioFromResource(String url,
                                                  Resource expectedRequest,
                                                  Resource expectedResponse,
                                                  boolean withToken,
                                                  int httpCode) {
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        if (withToken) {
            headers.setBearerAuth(INTEGRATION_TOKEN);
        }

        HttpEntity<String> entity = new HttpEntity<>(getResourceAsString(expectedRequest), headers);
        var response = testRestTemplate.exchange(url, HttpMethod.POST, entity, String.class);

        log.info("Actual| Response:\n{}, \nStatus Code: {}", response.getBody(), response.getStatusCodeValue());
        log.info("Expected| Response:\n {}, \nStatus Code: {}", response.getBody(), response.getStatusCodeValue());

        assertEquals(httpCode, response.getStatusCodeValue());
        compareResult(response.getBody(), expectedResponse);
    }

    // PUT
    @SneakyThrows
    protected void customPutScenarioFromResource(
            String url, Resource expectedRequest, Resource expectedResponse, int httpCode, boolean strictJsonCheck) {
        // TODO:: if necessary
    }

    // DELETE
    @SneakyThrows
    protected void customDeleteScenarioFromResource(
            String url, Resource expectedRequest, Resource expectedResponse, int httpCode, boolean strictJsonCheck) {
        // TODO:: if necessary
    }

    protected void executeScript(final Resource sqlScript) {
        // TODO:: if necessary
    }

    protected void initBitrixDispatchers(List<DispatcherData> bitrixDispatcherDataList) {
        var dispatcher = new BitrixDispatcher(bitrixDispatcherDataList);
        bitrixServer.setDispatcher(dispatcher);
    }

    protected void initOrderDispatchers(List<DispatcherData> orderDispatcherDataList) {
        var dispatcher = new OrderDispatcher(orderDispatcherDataList);
        sfOrderServer.setDispatcher(dispatcher);
    }

    protected void compareResult(String actual, Resource expectedResponse) throws JSONException {
        compareResult(actual, expectedResponse,true);
    }

    protected void compareResult(String actual, Resource expectedResponse, boolean strict) throws JSONException {
        log.info(actual);
        log.info("------------------------------");
        final var expected = expectedResponse != null
            ? getResourceAsString(expectedResponse)
            : null;
        log.info(expected);

        JSONAssert.assertEquals(expected, actual, strict);
    }

    protected <E extends BaseEnum> void initOrderScenario(Map<E, Pair<Resource, Resource>> pathToExpectedResources,
                                                        Map<String, Object> pathTemplateParameters) {
        initOrderScenario(pathToExpectedResources, Map.of(), pathTemplateParameters);
    }

    protected <E extends BaseEnum> void initOrderScenario(Map<E, Pair<Resource, Resource>> pathToExpectedResources,
                                                        Map<E, HttpStatus> pathsToExpectedHttpStatus,
                                                        Map<String, Object> pathTemplateParameters) {
        final var dispatcherDatas = new ArrayList<DispatcherData>();

        if (pathToExpectedResources.containsKey(HISTORY_ADD)) {
            final var resourceResourcePair = pathToExpectedResources.get(HISTORY_ADD);
            dispatcherDatas.add(
                HISTORY_ADD.buildDispatcherData(
                    resourceResourcePair, HttpMethod.POST,
                    pathsToExpectedHttpStatus.getOrDefault(HISTORY_ADD, HttpStatus.OK),
                    pathTemplateParameters));
        }

        initOrderDispatchers(dispatcherDatas);
    }
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/java/ru/liga/evraz/bitrix/adapter/http/out/bitrix/BitrixApiConfigTest.java
Content:
package ru.liga.evraz.bitrix.adapter.http.out.bitrix;

import lombok.AllArgsConstructor;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.test.context.TestConfiguration;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Import;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpInputMessage;
import org.springframework.http.MediaType;
import org.springframework.http.converter.HttpMessageConverter;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.web.client.RestTemplate;
import ru.liga.evraz.bitrix.adapter.http.out.bitrix.model.group.CreateGroupTaskResponse;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

@ActiveProfiles("test")
@ExtendWith(SpringExtension.class)
@ContextConfiguration(classes = BitrixApiConfigTest.BitrixApiConfigTestConfiguration.class)
class BitrixApiConfigTest {
    private static final String JSON_WITH_UNKNOWN_FIELDS = """
    {
        "result": {
            "ERROR": "just_test",
            "unknown": "field"
        },
        "unknown": "field"
    }""";

    @Autowired
    @Qualifier("bitrixRestTemplate")
    private RestTemplate restTemplate;

    @Test
    void bitrixHttpClientIgnoresUnknownProperties() throws Exception {
        boolean anyCanRead = false;
        for (HttpMessageConverter converter : restTemplate.getMessageConverters()) {
            if (converter.canRead(CreateGroupTaskResponse.class, MediaType.APPLICATION_JSON)) {
                anyCanRead = true;

                StringHttpInputMessage inputMessage = StringHttpInputMessage.forString(JSON_WITH_UNKNOWN_FIELDS);
                CreateGroupTaskResponse read = (CreateGroupTaskResponse) converter.read(CreateGroupTaskResponse.class, inputMessage);
                assertEquals("just_test", read.getResult().getError());
            }
        }

        assertTrue(anyCanRead);
    }

    @TestConfiguration
    @ComponentScan("ru.liga.evraz.bitrix.adapter.http.out.bitrix")
    @Import(BitrixApiConfig.class)
    public static class BitrixApiConfigTestConfiguration {

    }

    @AllArgsConstructor
    public static class StringHttpInputMessage implements HttpInputMessage {
        private String response;

        @Override
        public InputStream getBody() throws IOException {
            return new ByteArrayInputStream(response.getBytes());
        }

        @Override
        public HttpHeaders getHeaders() {
            HttpHeaders httpHeaders = new HttpHeaders();
            httpHeaders.add(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE);
            return httpHeaders;
        }

        public static StringHttpInputMessage forString(String value) {
            return new StringHttpInputMessage(value);
        }
    }
}

File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/java/ru/liga/evraz/bitrix/adapter/http/in/TaskControllerTest.java
Content:
package ru.liga.evraz.bitrix.adapter.http.in;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.context.TestConfiguration;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Import;
import org.springframework.context.annotation.Profile;
import org.springframework.http.MediaType;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultHandlers;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.testcontainers.shaded.com.fasterxml.jackson.databind.ObjectMapper;
import ru.liga.evraz.bitrix.adapter.http.out.bitrix.BitrixHttpProperties;
import ru.liga.evraz.bitrix.application.CancelTaskUseCase;
import ru.liga.evraz.bitrix.application.CreateTaskUseCase;
import ru.liga.evraz.bitrix.application.GetOrderTasksUseCase;
import ru.liga.evraz.bitrix.security.providers.JwtTokenAuthenticationProvider;

import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

@Profile("test")
@WebMvcTest(TaskController.class)
@ContextConfiguration(classes = TaskControllerTest.TaskControllerTestConfiguration.class)
class TaskControllerTest {
    private static final String REQUEST = """
            {
              "title": "Задание на перевозку",
              "description": "ccылка на заказ в 1С - ИН00-1102, test@ya.ru, ",
              "deadline": "2022-12-01T16:06:06+03:00",
              "clientOrderId": "BF-12345-15",
              "orderId": "tnt-9357710",
              "tenantId": "evraz_oms_dev",
              "role": "Продажи",
              "branch": "Москва"
            }
            """;

    private static final String MANAGER_REQUEST = """
            {
              "title": "Задание на перевозку",
              "description": "ccылка на заказ в 1С - ИН00-1102, test@ya.ru, ",
              "deadline": "2022-12-01T16:06:06+03:00",
              "clientOrderId": "BF-12345-15",
              "orderId": "tnt-9357710",
              "tenantId": "evraz_oms_dev",
              "responsibleId": 123,
              "responsibleEmail": "test@test.test"
            }
            """;

    private static final String CANCEL_TASKS_REQUEST = """
            {
                "orderId": "testOrderId",
                "tenantId": "evraz_oms_dev"
            }
            """;
    private static final List<String> GROUP_TASK_REQUIRED_ATTRS = Arrays.asList(
            "role", "branch", "title", "clientOrderId", "orderId", "tenantId"
    );

    private static final List<String> MANAGER_TASK_REQUIRED_ATTRS = Arrays.asList(
            "responsibleId", "responsibleEmail", "title", "description", "clientOrderId", "orderId", "tenantId"
    );

    private static final List<String> CANCEL_TASKS_REQUIRED_ATTRS = Arrays.asList(
            "orderId", "tenantId"
    );

    @Autowired
    private TaskController taskController;

    private MockMvc mvc;

    @Autowired
    private CreateTaskUseCase createTaskUseCase;

    @Autowired
    private CancelTaskUseCase cancelTaskUseCase;

    @Autowired
    private ObjectMapper objectMapper;

    @BeforeEach
    public void setUp() {
        mvc = MockMvcBuilders
                .standaloneSetup(taskController)
                .build();
    }

    @AfterEach
    public void resetMock() {
        Mockito.reset(createTaskUseCase, cancelTaskUseCase);
    }

    @Test
    void createGroupTaskReturnId() throws Exception {
        Mockito.when(createTaskUseCase.createGroupTask(Mockito.any()))
                .thenReturn("123");

        mvc.perform(MockMvcRequestBuilders
                        .post("/v1/task/group")
                        .accept(MediaType.ALL)
                        .contentType(MediaType.APPLICATION_JSON)
                        .characterEncoding(StandardCharsets.UTF_8)
                        .content(REQUEST)

                )
                .andDo(MockMvcResultHandlers.print())
                .andExpect(MockMvcResultMatchers.status().isOk())
                .andExpect(MockMvcResultMatchers.content().json("{\"id\": \"123\"}"));
    }

    @Test
    void createGroupTaskRequiredAttributes() throws Exception {
        for (String attr : GROUP_TASK_REQUIRED_ATTRS) {
            Map<String, String> request = objectMapper.readValue(REQUEST, Map.class);
            request.put(attr, null);
            mvc.perform(MockMvcRequestBuilders
                            .post("/v1/task/group")
                            .accept(MediaType.ALL)
                            .contentType(MediaType.APPLICATION_JSON)
                            .characterEncoding(StandardCharsets.UTF_8)
                            .content(objectMapper.writeValueAsString(request))

                    )
                    .andDo(MockMvcResultHandlers.print())
                    .andExpect(MockMvcResultMatchers.status().isBadRequest());
        }

        Mockito.verify(createTaskUseCase, Mockito.never()).createGroupTask(Mockito.any());
    }

    @Test
    void createManagerTaskReturnId() throws Exception {
        Mockito.when(createTaskUseCase.createManagerTask(Mockito.any()))
                .thenReturn("123");

        mvc.perform(MockMvcRequestBuilders
                        .post("/v1/task/manager")
                        .accept(MediaType.ALL)
                        .contentType(MediaType.APPLICATION_JSON)
                        .characterEncoding(StandardCharsets.UTF_8)
                        .content(MANAGER_REQUEST)

                )
                .andDo(MockMvcResultHandlers.print())
                .andExpect(MockMvcResultMatchers.status().isOk())
                .andExpect(MockMvcResultMatchers.content().json("{\"id\": \"123\"}"));
    }

    @Test
    void createManagerTaskRequiredAttributes() throws Exception {
        for (String attr : MANAGER_TASK_REQUIRED_ATTRS) {
            Map<String, String> request = objectMapper.readValue(MANAGER_REQUEST, Map.class);
            request.put(attr, null);
            mvc.perform(MockMvcRequestBuilders
                            .post("/v1/task/manager")
                            .accept(MediaType.ALL)
                            .contentType(MediaType.APPLICATION_JSON)
                            .characterEncoding(StandardCharsets.UTF_8)
                            .content(objectMapper.writeValueAsString(request))

                    )
                    .andDo(MockMvcResultHandlers.print())
                    .andExpect(MockMvcResultMatchers.status().isBadRequest());
        }

        Mockito.verify(createTaskUseCase, Mockito.never()).createManagerTask(Mockito.any());
    }

    @Test
    void findUserInfo() throws Exception {
        Mockito.when(createTaskUseCase.findResponsibleId(Mockito.any()))
                .thenReturn(123L);

        mvc.perform(MockMvcRequestBuilders
                        .get("/v1/task/user-info")
                        .queryParam("email", "test@example.com")
                        .accept(MediaType.ALL)
                        .contentType(MediaType.APPLICATION_JSON)
                        .characterEncoding(StandardCharsets.UTF_8)
                        .content(REQUEST)

                )
                .andDo(MockMvcResultHandlers.print())
                .andExpect(MockMvcResultMatchers.status().isOk())
                .andExpect(MockMvcResultMatchers.content().json("{\"responsibleId\": 123}"));
    }

    @Test
    void findUserInfoNotFound() throws Exception {
        Mockito.when(createTaskUseCase.findResponsibleId(Mockito.any()))
                .thenReturn(null);

        mvc.perform(MockMvcRequestBuilders
                        .get("/v1/task/user-info")
                        .queryParam("email", "test@example.com")
                        .accept(MediaType.ALL)
                        .contentType(MediaType.APPLICATION_JSON)
                        .characterEncoding(StandardCharsets.UTF_8)
                        .content(REQUEST)

                )
                .andDo(MockMvcResultHandlers.print())
                .andExpect(MockMvcResultMatchers.status().isOk())
                .andExpect(MockMvcResultMatchers.content().json("{\"responsibleId\": null}"));
    }

    @Test
    void cancelTasksRequiredAttributes() throws Exception {
        for (String attr : CANCEL_TASKS_REQUIRED_ATTRS) {
            Map<String, String> request = objectMapper.readValue(CANCEL_TASKS_REQUEST, Map.class);
            request.put(attr, null);
            mvc.perform(MockMvcRequestBuilders
                            .post("/v1/task/order/cancel")
                            .accept(MediaType.ALL)
                            .contentType(MediaType.APPLICATION_JSON)
                            .characterEncoding(StandardCharsets.UTF_8)
                            .content(objectMapper.writeValueAsString(request))

                    )
                    .andDo(MockMvcResultHandlers.print())
                    .andExpect(MockMvcResultMatchers.status().isBadRequest());
        }

        Mockito.verify(cancelTaskUseCase, Mockito.never()).cancelOrderTasks(Mockito.any());
    }

    @TestConfiguration
    @Import({BitrixHttpProperties.class})
    public static class TaskControllerTestConfiguration {
        @Bean
        public ObjectMapper objectMapper() {
            return new ObjectMapper();
        }

        @Bean
        public TaskMapper taskMapper() {
            return Mockito.mock(TaskMapper.class);
        }

        @Bean
        public CreateTaskUseCase createTaskUseCase() {
            return Mockito.mock(CreateTaskUseCase.class);
        }

        @Bean
        public CancelTaskUseCase cancelTaskUseCase() {
            return Mockito.mock(CancelTaskUseCase.class);
        }

        @Bean
        public GetOrderTasksUseCase getOrderTasksUseCase() {
            return Mockito.mock(GetOrderTasksUseCase.class);
        }

        @Bean
        public JwtTokenAuthenticationProvider jwtTokenAuthenticationProvider() {
            return Mockito.mock(JwtTokenAuthenticationProvider.class);
        }
    }
}

File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/test/java/ru/liga/evraz/bitrix/adapter/db/TaskExecutionStatusWithDbTest.java
Content:
package ru.liga.evraz.bitrix.adapter.db;

import lombok.SneakyThrows;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.tuple.Pair;
import org.apache.kafka.clients.producer.ProducerRecord;
import org.apache.kafka.common.Uuid;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.skyscreamer.jsonassert.JSONAssert;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.autoconfigure.kafka.KafkaProperties;
import org.springframework.boot.test.autoconfigure.web.reactive.AutoConfigureWebTestClient;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.core.io.Resource;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.jdbc.SqlGroup;
import reactor.core.publisher.Mono;
import reactor.kafka.sender.SenderRecord;
import ru.liga.evraz.bitrix.adapter.kafka.KafkaBitrixProperties;
import ru.liga.evraz.bitrix.base.BaseIntegrationTest;
import ru.liga.evraz.bitrix.dispatcher.OrderDispatcher;
import ru.liga.evraz.bitrix.kafka.TaskExecutionStatusKafka;
import ru.liga.evraz.bitrix.kafka.TestKafkaTaskExecutionStatusConsumer;
import ru.liga.evraz.bitrix.util.KafkaUtils;
import ru.liga.evraz.bitrix.util.ResourceUtils;

import java.util.Map;
import java.util.concurrent.TimeUnit;

import static org.awaitility.Awaitility.await;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.equalTo;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static ru.liga.evraz.bitrix.config.OrderPath.HISTORY_ADD;
import static ru.liga.evraz.bitrix.util.ResourceUtils.getResourceAsString;

@Slf4j
@ActiveProfiles("test")
@AutoConfigureWebTestClient(timeout = "5s")
@SpringBootTest(webEnvironment= SpringBootTest.WebEnvironment.RANDOM_PORT)
@SuppressWarnings("PMD.TooManyStaticImports")
class TaskExecutionStatusWithDbTest extends BaseIntegrationTest {

    @Autowired
    private KafkaBitrixProperties kafkaBitrixProperties;
    @Autowired
    private TestKafkaTaskExecutionStatusConsumer testKafkaTaskExecutionStatusConsumer;
    @Autowired
    private KafkaProperties kafkaProperties;
    @Value("classpath:/kafka/template/taskExecutionStatus.json")
    private Resource template;
    @Value("classpath:/kafka/template/taskExecutionStatus_unknownResultCode.json")
    private Resource templateUnknownResultCode;
    @Value("classpath:/kafka/template/taskExecutionStatus_notCompletedTask.json")
    private Resource templateNotCompletedTask;
    @Value("classpath:/external/addHistoryUpdTaskStatus_request.json")
    private Resource addHistoryUpdateRequest;
    @Value("classpath:/external/addHistoryUpdTaskStatus_unknownResultCode_request.json")
    private Resource addHistoryUpdateUnknownResultCodeRequest;
    @Value("classpath:/external/addHistoryUpdTaskStatus_response.json")
    private Resource addHistoryUpdateResponse;

    @Autowired
    private BitrixTaskHistoryJpaRepository bitrixTaskHistoryJpaRepository;

    static {
        NEED_KAFKA_TEST_CONTAINER = true;
    }

    @BeforeEach
    @SneakyThrows
    protected void beforeEach() {
        super.beforeEach();
        this.sender = KafkaUtils.createSender(kafkaProperties);
    }

    @Test
    @DisplayName("Успешное получение статуса задачи с отправкой в историю заказа")
    @SneakyThrows
    @SqlGroup({
        @Sql(value = "/db/clean_bitrix_tasks.sql", executionPhase = Sql.ExecutionPhase.BEFORE_TEST_METHOD),
        @Sql(value = "/db/init_bitrix_tasks_with_bitrix_id.sql", executionPhase = Sql.ExecutionPhase.BEFORE_TEST_METHOD),
        @Sql(value = "/db/clean_bitrix_tasks.sql", executionPhase = Sql.ExecutionPhase.AFTER_TEST_METHOD)
    })
    void getTaskExecutionStatusSuccess_checkHistory() {
        final var pathsToExpectedResources = Map.of(
            HISTORY_ADD, Pair.of(addHistoryUpdateRequest, addHistoryUpdateResponse));

        final var pathsTemplateParams = Map.<String, Object>of(
            "orderId", "test_update_order_id"
        );

        initOrderScenario(pathsToExpectedResources, pathsTemplateParams);

        final String correlationUid = sendTaskExecutionStatusAndGetCorrelationUuid(template);

        if (testKafkaTaskExecutionStatusConsumer.getLatch().await(10, TimeUnit.SECONDS)) {
            assertThat(testKafkaTaskExecutionStatusConsumer.getCorrelationUid(), equalTo(correlationUid));
            assertThat(testKafkaTaskExecutionStatusConsumer.getPayloads().size(), equalTo(1));
            JSONAssert.assertEquals(getResourceAsString(template), testKafkaTaskExecutionStatusConsumer.getPayload(), true);

            final var orderDispatcher = (OrderDispatcher) sfOrderServer.getDispatcher();

            await()
                .atMost(10, TimeUnit.SECONDS)
                .until(() -> bitrixTaskHistoryJpaRepository.findAll().size() > 0);

            Thread.sleep(5000);

            assertEquals(1, bitrixTaskHistoryJpaRepository.findAll().size());
            assertEquals(1, orderDispatcher.getValidDispatches(), "Check dispatched STARFISHORDER requests");
        } else {
            throw new RuntimeException("FAILED");
        }
    }

    @Test
    @DisplayName("Неопределенный код результата задачи с отправкой в историю заказа")
    @SneakyThrows
    @SqlGroup({
        @Sql(value = "/db/clean_bitrix_tasks.sql", executionPhase = Sql.ExecutionPhase.BEFORE_TEST_METHOD),
        @Sql(value = "/db/init_bitrix_tasks_with_bitrix_id.sql", executionPhase = Sql.ExecutionPhase.BEFORE_TEST_METHOD),
        @Sql(value = "/db/clean_bitrix_tasks.sql", executionPhase = Sql.ExecutionPhase.AFTER_TEST_METHOD)
    })
    void getTaskExecutionStatusUnknownResultCode_checkHistory() {
        final var pathsToExpectedResources = Map.of(
            HISTORY_ADD, Pair.of(addHistoryUpdateUnknownResultCodeRequest, addHistoryUpdateResponse));

        final var pathsTemplateParams = Map.<String, Object>of(
            "orderId", "test_update_order_id"
        );

        initOrderScenario(pathsToExpectedResources, pathsTemplateParams);

        final String correlationUid = sendTaskExecutionStatusAndGetCorrelationUuid(templateUnknownResultCode);

        if (testKafkaTaskExecutionStatusConsumer.getLatch().await(10, TimeUnit.SECONDS)) {
            assertThat(testKafkaTaskExecutionStatusConsumer.getCorrelationUid(), equalTo(correlationUid));
            assertThat(testKafkaTaskExecutionStatusConsumer.getPayloads().size(), equalTo(1));
            JSONAssert.assertEquals(getResourceAsString(templateUnknownResultCode), testKafkaTaskExecutionStatusConsumer.getPayload(), true);

            final var orderDispatcher = (OrderDispatcher) sfOrderServer.getDispatcher();

            await()
                .atMost(10, TimeUnit.SECONDS)
                .until(() -> bitrixTaskHistoryJpaRepository.findAll().size() > 0);

            await()
                .atMost(10, TimeUnit.SECONDS)
                .until(() -> orderDispatcher.getValidDispatches() > 0);

            assertEquals(1, bitrixTaskHistoryJpaRepository.findAll().size());
            assertEquals(1, orderDispatcher.getValidDispatches(), "Check dispatched STARFISHORDER requests");
        } else {
            throw new RuntimeException("FAILED");
        }
    }

    @Test
    @DisplayName("Проверка обработки статуса, отличного от 5 (Выполнена)")
    @SneakyThrows
    @SqlGroup({
        @Sql(value = "/db/clean_bitrix_tasks.sql", executionPhase = Sql.ExecutionPhase.BEFORE_TEST_METHOD),
        @Sql(value = "/db/init_bitrix_tasks_with_bitrix_id.sql", executionPhase = Sql.ExecutionPhase.BEFORE_TEST_METHOD),
        @Sql(value = "/db/clean_bitrix_tasks.sql", executionPhase = Sql.ExecutionPhase.AFTER_TEST_METHOD)
    })
    void getTaskExecutionStatusNotCompleted_shouldNotSendHistory() {
        final var pathsToExpectedResources = Map.of(
            HISTORY_ADD, Pair.of(addHistoryUpdateUnknownResultCodeRequest, addHistoryUpdateResponse));

        final var pathsTemplateParams = Map.<String, Object>of(
            "orderId", "test_update_order_id"
        );

        initOrderScenario(pathsToExpectedResources, pathsTemplateParams);

        final String correlationUid = sendTaskExecutionStatusAndGetCorrelationUuid(templateNotCompletedTask);

        if (testKafkaTaskExecutionStatusConsumer.getLatch().await(10, TimeUnit.SECONDS)) {
            assertThat(testKafkaTaskExecutionStatusConsumer.getCorrelationUid(), equalTo(correlationUid));
            assertThat(testKafkaTaskExecutionStatusConsumer.getPayloads().size(), equalTo(1));
            JSONAssert.assertEquals(getResourceAsString(templateNotCompletedTask), testKafkaTaskExecutionStatusConsumer.getPayload(), true);

            final var orderDispatcher = (OrderDispatcher) sfOrderServer.getDispatcher();

            await()
                .atMost(10, TimeUnit.SECONDS)
                .until(() -> bitrixTaskHistoryJpaRepository.findAll().size() > 0);

            assertEquals(1, bitrixTaskHistoryJpaRepository.findAll().size());
            assertEquals(0, orderDispatcher.getValidDispatches(), "Check dispatched STARFISHORDER requests");
        } else {
            throw new RuntimeException("FAILED");
        }
    }

    @Test
    @DisplayName("Успешное получение статуса задачи")
    @SneakyThrows
    void getTaskExecutionStatusSuccess() {
        final String correlationUid = sendTaskExecutionStatusAndGetCorrelationUuid(template);

        if (testKafkaTaskExecutionStatusConsumer.getLatch().await(10, TimeUnit.SECONDS)) {
            assertThat(testKafkaTaskExecutionStatusConsumer.getCorrelationUid(), equalTo(correlationUid));
            assertThat(testKafkaTaskExecutionStatusConsumer.getPayloads().size(), equalTo(1));
            JSONAssert.assertEquals(getResourceAsString(template), testKafkaTaskExecutionStatusConsumer.getPayload(), true);
        } else {
            throw new RuntimeException("FAILED");
        }
    }

    private String sendTaskExecutionStatusAndGetCorrelationUuid(Resource template) {
        testKafkaTaskExecutionStatusConsumer.resetWithCountDown(1);

        final var value = ResourceUtils.readResourceToObject(template, TaskExecutionStatusKafka.class);
        final var correlationUid = Uuid.randomUuid().toString();
        sender.send(Mono.just(
            SenderRecord.create(new ProducerRecord<>(kafkaBitrixProperties.getTaskExecutionStatus().getTopic(),
                correlationUid, value), correlationUid))
        ).blockFirst(TIMEOUT);
        return correlationUid;
    }
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/resources/Validation.properties
Content: Skipped binary file

File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/resources/application-local.yml
Content:
spring:
  swagger:
    local: true
  main:
    banner-mode: off
  mvc:
    pathmatch:
      matching-strategy: ant_path_matcher
  kafka:
    producer:
      bootstrap-servers: localhost:29092
      client-id: ${spring.application.name}
    consumer:
      bootstrap-servers: localhost:29092
      group-id: ${spring.application.name}
  datasource:
    driver-class-name: org.postgresql.Driver
    hikari:
      connectionTimeout: 20000
      maximumPoolSize: 7
      minimum-idle: 2
      idle-timeout: 10000
    url: jdbc:postgresql://localhost:5432/local_bitrix
    username: "evraz_user"
    password: "evraz_password"
  jpa:
    hibernate:
      ddl-auto: none
    show-sql: true
  liquibase:
    change-log: classpath:db/main-changelog.xml
    enabled: true
    url: ${spring.datasource.url}
    user: ${spring.datasource.username}
    password: ${spring.datasource.password}

bitrix:
  http:
    mocked: false
    backOffPeriodMillis: 5000
    retryCount: 0 # количество ретраев = (retryCount - 1)
    active: true
    createTask:
      responsibleIdsForTestTasks: # Если конфиг пустой, то не будет подменять значения (предполагается до двух значений)
        - 1885
        - 593
  kafka:
    taskExecutionStatus:
      topic: "em-int-test-bitrix-oms-task-execution-status-v1"

cloud:
  integrationToken:
    evraz_oms_dev: 'eyJhbGciOiJIUzUxMiJ9.eyJ0ZW5hbnRJZCI6ImV2cmF6X29tc19kZXYiLCJ1c2VySWQiOiJldnJhel9vbXNfZGV2LWV2cmF6LWRldi1pbnRlZ3JhdGlvbiIsInJvbGUiOiJJTlRFR1JBVElPTiIsImxvZ2luIjoiZXZyYXotZGV2LWludGVncmF0aW9uIiwidmVyc2lvbiI6IjAiLCJhdXRoVHlwZSI6Im9tc0NyZWRlbnRpYWxzIiwiZXhwIjo3OTgzNzgxMjAwMDAwLCJzdWIiOiJldnJhel9vbXNfZGV2LWV2cmF6LWRldi1pbnRlZ3JhdGlvbiJ9.HYrCPjxr2tmQHQUYkoSkUVmFc9KZX77RqPlWTRIVKCQcjdHLNdxMEC0RDDuDRPXlkPAUKVJ5iBJHfNLFX27TSw'

feign:
  hystrix:
    enabled: false
  client:
    config:
      #      example-service:
      #        retryer: com.starfish24.config.feign.FeignRetryer
      default:
        connectTimeout: 10000
        readTimeout: 40000
        loggerLevel: basic
  starfish:
    order:
      name: 'order'

discovery:
  restClient:
    connectTimeout: 10000
    readTimeout: 40000

management:
  server:
    port: 1${server.port}
  endpoints:
    web:
      exposure:
        include: '*'

kubernetes:
  api:
    server: https://10.125.9.60:6443
    endpoints: /api/v1/namespaces/dev/endpoints
    token: ${K8S_API_TOKEN} #eyJhbGciOiJSUzI1NiIsImtpZCI6IkVxWWFYNkRZUmZwQkZEX1dPdnVlQ05lT2liVjBfS1hOT1NlT1daa05aRjgifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJkZXYiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlY3JldC5uYW1lIjoiZGV2ZWxvcC10b2tlbi1sZDliYiIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50Lm5hbWUiOiJkZXZlbG9wIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQudWlkIjoiNmUwZmQ2MWEtYjBiNi00MjM4LTgxNGYtMDEzOTQ0YzRiNzgzIiwic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50OmRldjpkZXZlbG9wIn0.W73CoYe49TMLO6CIbUS4RaJ1Dhs4MfLxTdch-_HyQXu6WC0FJXzzhLaOZbpgCwJyzLwZPryK9ekz93AmjriqP3EOkZ1xDnm5QYKjAyFvrRzXXjV9HK8ZGNom5ql0hRlVtzGBi06pUIHmjlzCXWbq4M1wOKoWJ9NAAakLgTDgMrzos1zn43mgC131gbYWusFhKe43bGAqkcsFVhj6UJkpayQoDtjgJUIo-nUsQ-ugXHqrESx7vm-3OucjNLU2QrFEd4xs2KC2QrsvD8o_7OclNmqC8sEz8khWq9BCD_6tr3BY8Q1ttzOyKGCOQkvKv0ZNI7HXxdqYaZ4Ey_wO__wABA

logging:
  level:
    org.springframework.security: debug


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/resources/application.yml
Content:
# swagger-ui custom path
springdoc:
  swagger-ui:
    path: "/swagger-ui"

spring:
  main:
    banner-mode: off
  mvc:
    pathmatch:
      matching-strategy: ant_path_matcher
  kafka:
    producer:
      bootstrap-servers: localhost:29092
      client-id: ${spring.application.name}-${spring.profiles.active}
    consumer:
      auto-offset-reset: earliest
      bootstrap-servers: localhost:29092
      group-id: ${spring.application.name}-${spring.profiles.active}
  datasource:
    driver-class-name: org.postgresql.Driver
    hikari:
      connectionTimeout: 20000
      maximumPoolSize: 7
      minimum-idle: 2
      idle-timeout: 10000
    url: jdbc:postgresql://changeme:port/changeme
    username: changeme
    password: "changeme"
  jpa:
    hibernate:
      ddl-auto: none
  liquibase:
    change-log: classpath:db/main-changelog.xml
    enabled: true
    url: ${spring.datasource.url}
    user: ${spring.datasource.username}
    password: ${spring.datasource.password}

bitrix:
  http:
    backOffPeriodMillis: 1000 # Насколько отложить ретрай в мс
    retryCount: 0 # количество ретраев = (retryCount - 1)
    active: true
    createdBy: 566
    techEmail: "OMS_EVRAZ@evraz.com"
    createTask:
      responsibleIdsForTestTasks: # Если конфиг пустой, то не будет подменять значения (предполагается до двух значений)
        - 1885
        - 593
      url: "https://devcrm.emi.evraz.com/rest/468/cp4ltlkfoe1ypsta/task.item.add.json"
    request:
      url: "https://devcrm.emi.evraz.com/rest/467/1pf1872aneh4p59k/user.get.json"
  kafka:
    taskExecutionStatus:
      topic: "em-int-test-bitrix-oms-task-execution-status-v1"
  tasksConfig:
    ORDER_PROLONG_RESERVE:
      resendTaskAllowed: true
    SHIPMENT_SLOT_RESERVE:
      resendTaskAllowed: true

cloud:
  integrationToken:
    evraz_oms_dev: 'eyJhbGciOiJIUzUxMiJ9.eyJ0ZW5hbnRJZCI6ImV2cmF6X29tc19kZXYiLCJ1c2VySWQiOiJldnJhel9vbXNfZGV2LWV2cmF6LWRldi1pbnRlZ3JhdGlvbiIsInJvbGUiOiJJTlRFR1JBVElPTiIsImxvZ2luIjoiZXZyYXotZGV2LWludGVncmF0aW9uIiwidmVyc2lvbiI6IjAiLCJhdXRoVHlwZSI6Im9tc0NyZWRlbnRpYWxzIiwiZXhwIjo3OTgzNzgxMjAwMDAwLCJzdWIiOiJldnJhel9vbXNfZGV2LWV2cmF6LWRldi1pbnRlZ3JhdGlvbiJ9.HYrCPjxr2tmQHQUYkoSkUVmFc9KZX77RqPlWTRIVKCQcjdHLNdxMEC0RDDuDRPXlkPAUKVJ5iBJHfNLFX27TSw'

feign:
  hystrix:
    enabled: false
  client:
    config:
      #      example-service:
      #        retryer: com.starfish24.config.feign.FeignRetryer
      default:
        connectTimeout: 10000
        readTimeout: 40000
        loggerLevel: basic
  starfish:
    order:
      name: 'order'

discovery:
  restClient:
    connectTimeout: 10000
    readTimeout: 40000

management:
  server:
    port: 1${server.port}
  endpoints:
    web:
      exposure:
        include: '*'


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/resources/bootstrap.yml
Content:
server:
  port: 8080
spring:
  application:
    name: bitrix-adapter
  cloud:
    config:
      uri: ${CONFIG_SERVER_ADDRESS}
    kubernetes:
      loadbalancer:
        mode: service
---

spring:
  config:
    activate:
      on-profile: local, local-staging
  cloud:
    kubernetes:
      enabled: false


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/resources/logback-spring.xml
Content:
<configuration>
    <include resource="org/springframework/boot/logging/logback/defaults.xml" />
    <springProperty name="appName" source="spring.application.name" />

    <property name="LOG_FILE" value="${appName}"/>

    <springProfile name="!local, !local-staging, !test">
        <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
            <encoder class="net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder">
                <providers>
                    <timestamp/>
                    <version/>
                    <logLevel/>
                    <message/>
                    <loggerName/>
                    <threadName/>
                    <context/>
                    <pattern>
                        <omitEmptyFields>true</omitEmptyFields>
                        <pattern>
                            {
                            "trace": {
                            "service": "${appName}",
                            "trace_id": "%X{traceId}",
                            "span_id": "%X{spanId}",
                            "parent_span_id": "%X{parentId}",
                            "exportable": "%X{sampled}",
                            "login": "%X{login}",
                            "tenantId": "%X{tenantId}"
                            }
                            }
                        </pattern>
                    </pattern>
                    <mdc>
                        <excludeMdcKeyName>traceId</excludeMdcKeyName>
                        <excludeMdcKeyName>spanId</excludeMdcKeyName>
                        <excludeMdcKeyName>parentId</excludeMdcKeyName>
                        <excludeMdcKeyName>spanExportable</excludeMdcKeyName>
                        <excludeMdcKeyName>X-B3-TraceId</excludeMdcKeyName>
                        <excludeMdcKeyName>X-B3-SpanId</excludeMdcKeyName>
                        <excludeMdcKeyName>X-B3-ParentSpanId</excludeMdcKeyName>
                        <excludeMdcKeyName>X-Span-Export</excludeMdcKeyName>
                    </mdc>
                    <stackTrace/>
                </providers>
            </encoder>
        </appender>
    </springProfile>

    <springProfile name="local, local-staging">
        <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
            <encoder>
                <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread, %X{traceId:-}, %X{spanId:-}, %X{sampled:-}, %X{login}, %X{tenantId}] %-5level %logger{36} - %msg%n</pattern>
            </encoder>
        </appender>
    </springProfile>
    
    <root level="info">
        <appender-ref ref="STDOUT" />
    </root>

    <logger name="org.springframework.web.filter.CommonsRequestLoggingFilter">
        <level value="DEBUG" />
    </logger>
    <logger name="com.starfish24" level="DEBUG"/>

</configuration>

File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/resources/db/main-changelog.xml
Content:
<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog
    xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:pro="http://www.liquibase.org/xml/ns/pro"
    xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
	http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-4.1.xsd
    http://www.liquibase.org/xml/ns/pro
    http://www.liquibase.org/xml/ns/pro/liquibase-pro-4.1.xsd">

  <includeAll path="/migrations" relativeToChangelogFile="true"/>
</databaseChangeLog>

File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/resources/db/migrations/changelog-000-000-000.xml
Content:
<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog
        xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
                          http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.8.xsd">

    <changeSet id="create_bitrix_task" author="akovalevskii@fil-it.ru">
        <preConditions onFail="MARK_RAN">
            <not>
                <tableExists tableName="bitrix_task"/>
                <tableExists tableName="bitrix_task_status_history"/>
            </not>
        </preConditions>
        <comment>Create bitrix task related tables</comment>
        <createTable tableName="bitrix_task">
            <column name="id" type="varchar(100)">
                <constraints primaryKey="true" primaryKeyName="bitrix_task_id_pk" nullable="false" />
            </column>
            <column name="bitrix_id" type="text" remarks="Полученный от Bitrix идентификатор созданной задачи"/>
            <column name="title" type="text">
                <constraints nullable="false"/>
            </column>
            <column name="description" type="text">
                <constraints nullable="false"/>
            </column>
            <column name="responsible_id" type="text">
                <constraints nullable="false"/>
            </column>
            <column name="deadline" type="timestamp with time zone"/>
            <column name="created_at" type="timestamp with time zone">
                <constraints nullable="false"/>
            </column>
            <column name="modified_at" type="timestamp with time zone"/>
        </createTable>

        <createTable tableName="bitrix_task_status_history">
            <column name="id" type="varchar(100)">
                <constraints primaryKey="true" primaryKeyName="bitrix_task_status_history_id_pk" nullable="false" />
            </column>
            <column name="task_id" type="text">
                <constraints nullable="false"
                             foreignKeyName="bitrix_task_fk"
                             referencedTableName="bitrix_task"
                             referencedColumnNames="id" />
            </column>
            <column name="status_name" type="varchar(255)">
                <constraints nullable="false"/>
            </column>
            <column name="status_bitrix_id" type="varchar(255)">
                <constraints nullable="false"/>
            </column>
            <column name="created_at" type="timestamp with time zone">
                <constraints nullable="false"/>
            </column>
            <column name="modified_at" type="timestamp with time zone"/>
        </createTable>
    </changeSet>


</databaseChangeLog>

File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/resources/db/migrations/changelog-000-000-001.xml
Content:
<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog
    xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
                          http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.8.xsd">

  <changeSet id="create_bitrix_task" author="akovalevskii@fil-it.ru">
    <preConditions onFail="MARK_RAN">
      <tableExists tableName="bitrix_task"/>
      <tableExists tableName="bitrix_task_status_history"/>

      <columnExists tableName="bitrix_task" columnName="deadline"/>
      <columnExists tableName="bitrix_task" columnName="created_at"/>
      <columnExists tableName="bitrix_task" columnName="modified_at"/>
      <columnExists tableName="bitrix_task_status_history" columnName="created_at"/>
      <columnExists tableName="bitrix_task_status_history" columnName="modified_at"/>
    </preConditions>
    <comment>Update bitrix task related tables</comment>
    <modifyDataType tableName="bitrix_task" columnName="deadline" newDataType="timestamp"/>
    <modifyDataType tableName="bitrix_task" columnName="created_at" newDataType="timestamp"/>
    <modifyDataType tableName="bitrix_task" columnName="modified_at" newDataType="timestamp"/>
    <modifyDataType tableName="bitrix_task_status_history" columnName="created_at" newDataType="timestamp"/>
    <modifyDataType tableName="bitrix_task_status_history" columnName="modified_at" newDataType="timestamp"/>
  </changeSet>


</databaseChangeLog>

File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/resources/db/migrations/changelog-000-000-002.xml
Content:
<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog
        xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
                          http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.8.xsd">

    <changeSet id="create_bitrix_task" author="dvkozhemyakin@fil-it.ru">
        <preConditions onFail="MARK_RAN">
            <tableExists tableName="bitrix_task"/>
            <tableExists tableName="bitrix_task_status_history"/>
        </preConditions>

        <comment>Add new columns bitrix task table</comment>
        <addColumn tableName="bitrix_task">
            <column name="client_order_id" type="text">
                <constraints nullable="false"/>
            </column>
            <column name="order_id" type="text"/>
            <column name="tenant_id" type="text"/>
            <column name="zone_id" type="text"/>
            <column name="need_send_to_bitrix" type="bool"/>
        </addColumn>

        <comment>Update bitrix task history table</comment>
        <modifyDataType tableName="bitrix_task_status_history" columnName="task_id" newDataType="varchar(100)"/>
    </changeSet>
</databaseChangeLog>

File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/resources/db/migrations/changelog-000-000-003.xml
Content:
<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog
  xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
                          http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.8.xsd">

  <changeSet id="add_email_to_bitrix_task" author="anvmelnikov@fil-it.ru">
    <preConditions onFail="MARK_RAN">
      <tableExists tableName="bitrix_task"/>
    </preConditions>

    <addColumn tableName="bitrix_task">
      <column name="responsible_email" type="text"/>
    </addColumn>

    <update tableName="bitrix_task">
      <column name="responsible_email" value="OMS_EVRAZ@evraz.com"/>
      <where>responsible_email IS NULL</where>
    </update>

    <addNotNullConstraint tableName="bitrix_task" columnName="responsible_email"/>
  </changeSet>

  <changeSet id="add_created_by_to_bitrix_task" author="anvmelnikov@fil-it.ru">
    <preConditions onFail="MARK_RAN">
      <tableExists tableName="bitrix_task"/>
      <not>
        <columnExists tableName="bitrix_task" columnName="created_by"/>
      </not>
    </preConditions>

    <addColumn tableName="bitrix_task">
      <column name="created_by" type="int"/>
    </addColumn>

    <update tableName="bitrix_task">
      <column name="created_by" value="2478"/>
      <where>created_by IS NULL</where>
    </update>

    <addNotNullConstraint tableName="bitrix_task" columnName="created_by"/>
  </changeSet>
</databaseChangeLog>

File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/resources/db/migrations/changelog-000-000-004.xml
Content:
<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog
  xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
                          http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.8.xsd">

  <changeSet id="create_order_id_index" author="liga">
    <preConditions onFail="MARK_RAN">
      <not>
        <indexExists tableName="bitrix_task" indexName="order_id_idx"/>
      </not>
    </preConditions>

    <createIndex tableName="bitrix_task" indexName="order_id_idx">
      <column name="order_id"/>
    </createIndex>
  </changeSet>

  <changeSet id="add_role_to_bitrix_task" author="liga">
    <preConditions onFail="MARK_RAN">
      <not>
        <columnExists tableName="bitrix_task" columnName="role"/>
      </not>
    </preConditions>

    <addColumn tableName="bitrix_task">
      <column name="role" type="text"/>
    </addColumn>
  </changeSet>

  <changeSet id="add_branch_to_bitrix_task" author="liga">
    <preConditions onFail="MARK_RAN">
      <not>
        <columnExists tableName="bitrix_task" columnName="task_groupbranch"/>
      </not>
    </preConditions>

    <addColumn tableName="bitrix_task">
      <column name="branch" type="text"/>
    </addColumn>
  </changeSet>
  
  <changeSet id="drop_bitrix_task_responsible_id_constraint" author="liga">
    <dropNotNullConstraint tableName="bitrix_task" columnName="responsible_id"/>
  </changeSet>

  <changeSet id="drop_bitrix_task_responsible_email_constraint" author="liga">
    <dropNotNullConstraint tableName="bitrix_task" columnName="responsible_email"/>
  </changeSet>

</databaseChangeLog>


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/resources/db/migrations/changelog-000-000-005.xml
Content:
<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog
  xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
                          http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.8.xsd">

  <changeSet id="add_active_to_bitrix_task" author="liga">
    <preConditions onFail="MARK_RAN">
      <not>
        <columnExists tableName="bitrix_task" columnName="active"/>
      </not>
    </preConditions>

    <addColumn tableName="bitrix_task">
      <column name="active" type="boolean" defaultValueBoolean="true"/>
    </addColumn>
  </changeSet>

  <changeSet id="add_not_null_active_to_bitrix_task" author="liga">
    <preConditions onFail="MARK_RAN">
      <columnExists tableName="bitrix_task" columnName="active"/>
    </preConditions>

    <addNotNullConstraint tableName="bitrix_task" columnName="active"/>
  </changeSet>

</databaseChangeLog>


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/resources/db/migrations/changelog-000-000-006.xml
Content:
<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog
  xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
                          http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.8.xsd">

  <changeSet id="add_cancelled_to_bitrix_task" author="liga">
    <preConditions onFail="MARK_RAN">
      <not>
        <columnExists tableName="bitrix_task" columnName="cancelled"/>
      </not>
    </preConditions>

    <addColumn tableName="bitrix_task">
      <column name="cancelled" type="boolean" defaultValueBoolean="false"/>
    </addColumn>
  </changeSet>

  <changeSet id="add_not_null_cancelled_to_bitrix_task" author="liga">
    <preConditions onFail="MARK_RAN">
      <columnExists tableName="bitrix_task" columnName="cancelled"/>
    </preConditions>

    <addNotNullConstraint tableName="bitrix_task" columnName="cancelled"/>
  </changeSet>

</databaseChangeLog>


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/resources/db/migrations/changelog-000-000-007.xml
Content:
<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog
  xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
                          http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.8.xsd">

  <changeSet id="add_bitrix_task_type" author="liga">
    <preConditions onFail="MARK_RAN">
      <not>
        <columnExists tableName="bitrix_task" columnName="type"/>
      </not>
    </preConditions>

    <addColumn tableName="bitrix_task">
      <column name="type" type="text"/>
    </addColumn>

    <update tableName="bitrix_task">
      <column name="type" value="CLIENT_NOT_ARRIVED"/>
      <where>type IS NULL</where>
    </update>

    <addNotNullConstraint tableName="bitrix_task" columnName="type"/>
  </changeSet>

</databaseChangeLog>


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/resources/db/migrations/changelog-000-000-008.xml
Content:
<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog
  xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
                          http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.8.xsd">

  <changeSet id="add_bitrix_task_bitrix_task_type_code" author="liga">
    <preConditions onFail="MARK_RAN">
      <not>
        <columnExists tableName="bitrix_task" columnName="bitrix_task_type_code"/>
      </not>
    </preConditions>

    <addColumn tableName="bitrix_task">
      <column name="bitrix_task_type_code" type="text"/>
    </addColumn>

  </changeSet>

  <changeSet id="add_bitrix_task_status_history_bitrix_task_result" author="liga">
    <preConditions onFail="MARK_RAN">
      <not>
        <columnExists tableName="bitrix_task_status_history" columnName="bitrix_task_result"/>
      </not>
    </preConditions>

    <addColumn tableName="bitrix_task_status_history">
      <column name="bitrix_task_result" type="text"/>
    </addColumn>

  </changeSet>

</databaseChangeLog>


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/resources/db/migrations/changelog-000-000-009_317241-metrics.xml
Content:
<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog
    xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
                          http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.8.xsd">

    <changeSet id="add_metrics_table_and_initialize" author="liga">
        <preConditions onFail="MARK_RAN">
            <not>
                <tableExists tableName="metrics"/>
            </not>
        </preConditions>

        <createTable tableName="metrics">
            <column name="id" type="text" remarks="ID/GUID настройки">
                <constraints primaryKey="true" primaryKeyName="metrics_id_pk" nullable="false"/>
            </column>
            <column name="selection_delta" type="text" defaultValue="PT1M"
                    remarks="Дельта времени от текущего для сбора данных в формате java.time.Duration.
                    По умолчанию: PT1M (за последнюю минуту).
                    Прочие примеры:
                     - PT1H (за последний 1 час);
                     - PT30M (за последние 30 минут);
                     - PT3S (за последние 3 секунды)"/>
        </createTable>

        <insert tableName="metrics">
            <column name="id" value="1"/>
        </insert>
    </changeSet>

</databaseChangeLog>


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/BitrixAdapterApplication.java
Content:
package ru.liga.evraz.bitrix;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.client.discovery.EnableDiscoveryClient;
import org.springframework.cloud.openfeign.EnableFeignClients;
import org.springframework.scheduling.annotation.EnableScheduling;

@EnableFeignClients
@EnableScheduling
@EnableDiscoveryClient
@SpringBootApplication(scanBasePackages = {"com.starfish24.kubeConfig", "ru.liga.evraz.bitrix"})
public class BitrixAdapterApplication {
    public static void main(String[] args) {
        SpringApplication.run(BitrixAdapterApplication.class, args);
    }
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/util/ValidationUtils.java
Content:
package ru.liga.evraz.bitrix.util;

import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import ru.liga.evraz.bitrix.domain.model.BitrixTask;

import static ru.liga.evraz.bitrix.adapter.db.entity.BitrixTaskType.isValidBitrixTaskResultCode;
import static ru.liga.evraz.bitrix.adapter.http.out.enums.BitrixTaskResultCode.COMPLETED_AUTOMATICALLY;

@Slf4j
public class ValidationUtils {

    public static boolean validateBitrixTask(BitrixTask bitrixTask, String taskResult) {
        var taskType = bitrixTask.getType();

        if (taskType == null) {
            if (!COMPLETED_AUTOMATICALLY.getBitrixTaskResultCode().equals(taskResult)) {
                log.warn("Bitrix task with id {} has undefined type for task result code {}", bitrixTask.getId(), taskResult);
                return false;
            }
        } else if (StringUtils.isBlank(taskResult)) {
            log.warn("Bitrix task with id {} has empty task result code", bitrixTask.getId());
            return false;
        } else if (!isValidBitrixTaskResultCode(taskType, taskResult)) {
            log.warn("Bitrix task with id {}, type {} has invalid task result code {}", bitrixTask.getId(), taskType, taskResult);
            return false;
        }

        return true;
    }
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/security/IntegrationTokenConfig.java
Content:
package ru.liga.evraz.bitrix.security;

import lombok.Getter;
import lombok.Setter;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.stereotype.Component;

import java.util.Map;

@Getter
@Setter
@Component
@EnableConfigurationProperties
@ConfigurationProperties(prefix = "cloud")
public class IntegrationTokenConfig {
    private Map<String, String> integrationToken;
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/security/SecurityConfig.java
Content:
package ru.liga.evraz.bitrix.security;

import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.web.session.ConcurrentSessionFilter;
import ru.liga.evraz.bitrix.security.filter.JwtTokenAuthFilter;
import ru.liga.evraz.bitrix.security.providers.JwtTokenAuthenticationProvider;

import javax.servlet.http.HttpServletResponse;

@EnableWebSecurity
public class SecurityConfig extends WebSecurityConfigurerAdapter {

    private final JwtTokenAuthenticationProvider jwtTokenAuthenticationProvider;

    // TODO:: Потенциально в конфиг
    private static final String[] WHITE_LIST = {
        "/favicon.ico",
        // -- Swagger UI v2
        "/v2/api-docs",
        "/swagger-resources",
        "/swagger-resources/*",
        "/configuration/ui",
        "/configuration/security",
        "/swagger-ui.html",
        "/webjars/*",
        // -- Swagger UI v3 (OpenAPI)
        "/v3/api-docs/*",
        "/swagger-ui/*"
        // other public endpoints of your API may be appended to this array
    };

    public SecurityConfig(JwtTokenAuthenticationProvider jwtTokenAuthenticationProvider) {
        this.jwtTokenAuthenticationProvider = jwtTokenAuthenticationProvider;
    }

    @Override
    protected void configure(HttpSecurity httpSecurity) throws Exception {
        httpSecurity
            .httpBasic().disable()
            .csrf().disable()
            .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)
            .and()
            .authorizeRequests()
            .regexMatchers(WHITE_LIST)
            .permitAll()
            .and()
            .exceptionHandling().authenticationEntryPoint((req, rsp, e) -> rsp.sendError(HttpServletResponse.SC_UNAUTHORIZED))
            .and()
            .addFilterBefore(new JwtTokenAuthFilter(), ConcurrentSessionFilter.class)
            .authorizeRequests()
            .anyRequest().permitAll();
    }

    @Override
    protected void configure(AuthenticationManagerBuilder auth) {
        auth.authenticationProvider(jwtTokenAuthenticationProvider);
    }

}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/security/UserDto.java
Content:
package ru.liga.evraz.bitrix.security;

import lombok.Builder;
import lombok.Data;

@Data
@Builder
public class UserDto {
    private String tenantId;
    private String userId;
    private String login;
    private String role;
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/security/providers/JwtTokenAuthenticationProvider.java
Content:
package ru.liga.evraz.bitrix.security.providers;

import com.nimbusds.jwt.JWTClaimsSet;
import com.nimbusds.jwt.JWTParser;
import lombok.extern.slf4j.Slf4j;
import org.slf4j.MDC;
import org.springframework.security.authentication.AuthenticationProvider;
import org.springframework.security.authentication.AuthenticationServiceException;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Component;
import ru.liga.evraz.bitrix.security.authentication.JwtTokenAuthentication;
import ru.liga.evraz.bitrix.security.details.UserDetailsImpl;

import java.text.ParseException;

@Component
@Slf4j
public class JwtTokenAuthenticationProvider implements AuthenticationProvider {

    private static final String USER_ID = "userId";
    private static final String ROLE = "role";
    private static final String LOGIN = "role";
    private static final String TENANT_ID = "tenantId";

    @Override
    public Authentication authenticate(Authentication authentication) throws AuthenticationException {
        JwtTokenAuthentication tokenAuthentication = (JwtTokenAuthentication) authentication;

        JWTClaimsSet jwtClaimsSet;
        try {
            jwtClaimsSet = JWTParser.parse(tokenAuthentication.getName())
                    .getJWTClaimsSet();
        } catch (ParseException e) {
            log.error(e.getMessage());
            throw new AuthenticationServiceException("Invalid token");
        }

        UserDetails userDetails = new UserDetailsImpl(
                jwtClaimsSet.getClaim(USER_ID).toString(),
                jwtClaimsSet.getClaim(ROLE).toString(),
                jwtClaimsSet.getClaim(LOGIN).toString(),
                jwtClaimsSet.getClaim(TENANT_ID).toString()
        );
        MDC.put(LOGIN, jwtClaimsSet.getClaim(LOGIN).toString());
        MDC.put(TENANT_ID, jwtClaimsSet.getClaim(TENANT_ID).toString());

        tokenAuthentication.setUserDetails(userDetails);
        tokenAuthentication.setAuthenticated(true);
        return tokenAuthentication;
    }

    @Override
    public boolean supports(Class<?> authentication) {
        return JwtTokenAuthentication.class.equals(authentication);
    }
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/security/filter/JwtTokenAuthFilter.java
Content:
package ru.liga.evraz.bitrix.security.filter;

import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.filter.GenericFilterBean;
import ru.liga.evraz.bitrix.security.authentication.JwtTokenAuthentication;

import java.io.IOException;
import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletRequest;

public class JwtTokenAuthFilter extends GenericFilterBean {

    @Override
    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {
        String token = ((HttpServletRequest) servletRequest).getHeader("Authorization");

        JwtTokenAuthentication authentication;

        if (token == null) {
            authentication = new JwtTokenAuthentication(null);
            authentication.setAuthenticated(false);
        } else {
            authentication = new JwtTokenAuthentication(token.startsWith("Bearer") ? token.substring(7) : token);
            SecurityContextHolder.getContext().setAuthentication(authentication);
        }
        filterChain.doFilter(servletRequest, servletResponse);
    }

}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/security/details/UserDetailsImpl.java
Content:
package ru.liga.evraz.bitrix.security.details;

import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
import ru.liga.evraz.bitrix.security.UserDto;

import java.util.Collection;
import java.util.Collections;

public class UserDetailsImpl implements UserDetails {

    private final UserDto user;

    public UserDetailsImpl(UserDto user) {
        this.user = user;
    }

    public UserDetailsImpl(String id, String role, String login, String tenantId) {
        this.user = UserDto.builder()
                .userId(id)
                .role(role)
                .login(login)
                .tenantId(tenantId)
                .build();
    }

    @Override
    public Collection<? extends GrantedAuthority> getAuthorities() {
        GrantedAuthority authority = new SimpleGrantedAuthority(user.getRole());
        return Collections.singletonList(authority);
    }

    @Override
    public String getPassword() {
        return null;
    }

    @Override
    public String getUsername() {
        return user.getLogin();
    }

    @Override
    public boolean isAccountNonExpired() {
        return true;
    }

    @Override
    public boolean isAccountNonLocked() {
        return true;
    }

    @Override
    public boolean isCredentialsNonExpired() {
        return true;
    }

    @Override
    public boolean isEnabled() {
        return true;
    }

    public UserDto getUser() {
        return user;
    }
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/security/authentication/JwtTokenAuthentication.java
Content:
package ru.liga.evraz.bitrix.security.authentication;

import org.springframework.security.core.Authentication;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import java.util.Collection;

public class JwtTokenAuthentication implements Authentication {

    private boolean isAuthenticated;
    private UserDetails userDetails;
    private final String token;

    public JwtTokenAuthentication(String token) {
        this.token = token;
    }

    @Override
    public Collection<? extends GrantedAuthority> getAuthorities() {
        return userDetails.getAuthorities();
    }

    @Override
    public Object getCredentials() {
        return null;
    }

    @Override
    public Object getDetails() {
        return userDetails;
    }

    @Override
    public Object getPrincipal() {
        return null;
    }

    @Override
    public boolean isAuthenticated() {
        return isAuthenticated;
    }

    @Override
    public void setAuthenticated(boolean isAuthenticated) throws IllegalArgumentException {
        this.isAuthenticated = isAuthenticated;
    }

    @Override
    public String getName() {
        return token;
    }

    public void setUserDetails(UserDetails userDetails) {
        this.userDetails = userDetails;
    }
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/domain/repository/BitrixTaskHistoryService.java
Content:
package ru.liga.evraz.bitrix.domain.repository;

import org.springframework.stereotype.Repository;
import org.springframework.validation.annotation.Validated;
import ru.liga.evraz.bitrix.domain.model.BitrixTaskHistory;

@Repository
@Validated
public interface BitrixTaskHistoryService {

    BitrixTaskHistory create(BitrixTaskHistory taskHistory);

}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/domain/repository/BitrixTaskService.java
Content:
package ru.liga.evraz.bitrix.domain.repository;

import org.springframework.stereotype.Repository;
import org.springframework.validation.annotation.Validated;
import ru.liga.evraz.bitrix.adapter.db.entity.BitrixTaskType;
import ru.liga.evraz.bitrix.domain.model.BitrixTask;

import java.util.List;
import java.util.Set;

@Repository
@Validated
public interface BitrixTaskService {
    BitrixTask getByBitrixId(String bitrixId);

    boolean existsByBitrixId(String bitrixId);

    BitrixTask findByOrderIdAndType(String orderId, BitrixTaskType type);

    List<BitrixTask> findByOrderIdAndTypes(String orderId, Set<BitrixTaskType> type);

    List<BitrixTask> findAllByOrderId(String orderId);

    List<BitrixTask> findAllByOrderIdAndType(String orderId, BitrixTaskType type);

    BitrixTask getById(String guid);

    BitrixTask create(BitrixTask bitrixTask);

    BitrixTask update(BitrixTask bitrixTask);

    void deleteAll();

    void cancel(List<BitrixTask> tasks);

    String latestBitrixStatus(BitrixTask task);
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/domain/model/BitrixTask.java
Content:
package ru.liga.evraz.bitrix.domain.model;

import lombok.Builder;
import lombok.Getter;
import lombok.Setter;
import ru.liga.evraz.bitrix.adapter.db.entity.BitrixTaskType;

import java.time.OffsetDateTime;

@Builder
@Getter
@Setter
public class BitrixTask {
    private String id;
    private String bitrixId;
    private String title;
    private String description;
    private String responsibleId;
    private String responsibleEmail;
    private String guid;
    private String clientOrderId;
    private String orderId;
    private String tenantId;
    private String zoneId;
    private Long createdBy;
    private boolean needSendToBitrix;
    private OffsetDateTime deadline;
    private OffsetDateTime createdAt;
    private OffsetDateTime modifiedAt;
    private String role;
    private String branch;
    private Boolean active;
    private Boolean cancelled;
    private BitrixTaskType type;
    private String bitrixTaskTypeCode;
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/domain/model/BitrixTaskHistory.java
Content:
package ru.liga.evraz.bitrix.domain.model;

import lombok.Builder;
import lombok.Getter;
import lombok.Setter;

import java.time.OffsetDateTime;

@Builder
@Getter
@Setter
public class BitrixTaskHistory {
    private String id;
    private BitrixTask bitrixTask;
    private String statusName;
    private String statusBitrixId;
    private String bitrixTaskResult;
    private OffsetDateTime createdAt;
    private OffsetDateTime modifiedAt;
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/domain/model/TaskExecutionStatus.java
Content:
package ru.liga.evraz.bitrix.domain.model;

import lombok.Getter;

import java.util.Arrays;

@Getter
public enum TaskExecutionStatus {
    WAITING_FOR_COMPLETION("2", "Ждет выполнения"),
    IN_PROGRESS("3", "Выполняется"),
    WAITING_FOR_CONTROL("4", "Ожидает контроля"),
    DONE("5", "Завершена"),
    ON_HOLD("6", "Отложена"),
    UNKNOWN(null, "ERROR");

    private final String erpStatusId;
    private final String name;

    public boolean isUnknown() {
        return this.equals(UNKNOWN);
    }

    TaskExecutionStatus(String erpStatusId, String name) {
        this.erpStatusId = erpStatusId;
        this.name = name;
    }

    public static TaskExecutionStatus ofErpStatusId(String value) {
        return Arrays.stream(values())
                .filter(v -> v.getErpStatusId() != null && v.getErpStatusId().equals(value))
                .findFirst()
                .orElse(UNKNOWN);
    }
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/domain/exception/BitrixUserNotFoundException.java
Content:
package ru.liga.evraz.bitrix.domain.exception;

public class BitrixUserNotFoundException extends RuntimeException {

    public BitrixUserNotFoundException(String message) {
        super(message);
    }

    public BitrixUserNotFoundException(String message, Throwable throwable) {
        super(message, throwable);
    }

}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/domain/exception/NotFoundException.java
Content:
package ru.liga.evraz.bitrix.domain.exception;

public class NotFoundException extends RuntimeException {

    public NotFoundException(String message) {
        super(message);
    }

    public NotFoundException(String message, Throwable throwable) {
        super(message, throwable);
    }

}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/common/CommonMapper.java
Content:
package ru.liga.evraz.bitrix.common;

import org.mapstruct.Mapper;

import java.time.LocalDateTime;
import java.time.OffsetDateTime;
import java.util.Optional;

@Mapper(componentModel = "spring")
public interface CommonMapper {
    default OffsetDateTime map(LocalDateTime value) {
        return Optional.ofNullable(value)
            .map(datetime -> OffsetDateTime.of(datetime, OffsetDateTime.now().getOffset()))
            .orElse(null);
    }

    default LocalDateTime map(OffsetDateTime source) {
        return Optional.ofNullable(source)
            .map(OffsetDateTime::toLocalDateTime)
            .orElse(null);
    }
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/application/CancelTaskUseCase.java
Content:
package ru.liga.evraz.bitrix.application;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.springframework.stereotype.Service;
import ru.liga.evraz.bitrix.application.cmd.CancelOrderTasksCmd;
import ru.liga.evraz.bitrix.application.service.BitrixService;
import ru.liga.evraz.bitrix.application.service.HistoryService;
import ru.liga.evraz.bitrix.domain.model.BitrixTask;
import ru.liga.evraz.bitrix.domain.model.TaskExecutionStatus;
import ru.liga.evraz.bitrix.domain.repository.BitrixTaskService;

import java.util.List;

import static ru.liga.evraz.bitrix.application.enums.TaskHistoryOperationType.ARM_TASK_CANCELED;

@Service
@RequiredArgsConstructor
@Slf4j
public class CancelTaskUseCase {
    private final BitrixTaskService bitrixTaskService;
    private final BitrixService bitrixService;
    private final HistoryService historyService;

    public Boolean cancelOrderTasks(CancelOrderTasksCmd cmd) {
        List<BitrixTask> tasks;

        if (Boolean.TRUE.equals(cmd.getCancelAll())) {
            tasks = bitrixTaskService.findAllByOrderId(cmd.getOrderId());
        } else {
            tasks = bitrixTaskService.findAllByOrderIdAndType(cmd.getOrderId(), cmd.getType());
        }

        if (CollectionUtils.isNotEmpty(tasks)) {
            for (BitrixTask task : tasks) {
                if (shouldCancelTaskInBitrix(task) && cancelTask(task)) {
                    task.setCancelled(true);
                    sendHistoryData(task);
                }
            }
            bitrixTaskService.cancel(tasks);

            return true;
        }

        log.info("Tasks not found for order {}", cmd.getOrderId());
        return true;
    }

    private void sendHistoryData(BitrixTask task) {
        try {
            historyService.sendToHistory(ARM_TASK_CANCELED, task);
        } catch (Exception e) {
            log.error("Error during send history data about cancel task request. Task id: {}, bitrixId: {}. Order id: {}",
                task.getId(), task.getBitrixId(), task.getOrderId(), e);
        }
    }

    private boolean cancelTask(BitrixTask task) {
        try {
            return bitrixService.cancelTask(Long.parseLong(task.getBitrixId()));
        } catch (Exception e) {
            log.error("Error during cancel task request. Task id: " + task.getBitrixId(), e);
            return false;
        }
    }

    private boolean shouldCancelTaskInBitrix(BitrixTask task) {
        if (!task.getCancelled() && StringUtils.isNotBlank(task.getBitrixId())) {
            String latestBitrixStatus = bitrixTaskService.latestBitrixStatus(task);
            return !TaskExecutionStatus.DONE.getErpStatusId().equals(latestBitrixStatus);
        }

        return false;
    }
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/application/CreateTaskUseCase.java
Content:
package ru.liga.evraz.bitrix.application;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;
import org.springframework.validation.annotation.Validated;
import ru.liga.evraz.bitrix.adapter.db.entity.BitrixTaskType;
import ru.liga.evraz.bitrix.application.cmd.CreateGroupTaskCmd;
import ru.liga.evraz.bitrix.application.cmd.CreateManagerTaskCmd;
import ru.liga.evraz.bitrix.application.config.BitrixTaskConfig;
import ru.liga.evraz.bitrix.application.converter.BitrixTaskMapper;
import ru.liga.evraz.bitrix.application.service.BitrixService;
import ru.liga.evraz.bitrix.application.service.HistoryService;
import ru.liga.evraz.bitrix.domain.exception.BitrixUserNotFoundException;
import ru.liga.evraz.bitrix.domain.model.BitrixTask;
import ru.liga.evraz.bitrix.domain.repository.BitrixTaskService;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;

import static ru.liga.evraz.bitrix.application.enums.TaskHistoryOperationType.ARM_TASK_CREATED;

@Service
@Validated
@RequiredArgsConstructor
@Slf4j
public class CreateTaskUseCase {

    private final BitrixService bitrixService;
    private final BitrixTaskService bitrixTaskService;
    private final BitrixTaskMapper mapper;
    private final BitrixTaskConfig bitrixTaskConfig;
    private final HistoryService historyService;

    public String createGroupTask(@Valid @NotNull(message = "create.group.task.request.empty") CreateGroupTaskCmd cmd) {
        BitrixTask task = bitrixTaskService.findByOrderIdAndType(cmd.getOrderId(), cmd.getType());
        if (task != null && !isResendableTask(task.getType())) {
            if (!shouldResendTask(task)) {
                log.info("Task was already sent: {}, {}", task.getId(), task.getBitrixId());
                return task.getBitrixId();
            }
            task = fullUpdateBitrixGroupTask(cmd, task.getId());
        } else {
            task = bitrixTaskService.create(mapper.map(cmd));
        }

        final var bitrixId = sendToBitrixAndUpdateBitrixTaskId(cmd, task);
        if (StringUtils.isNotBlank(bitrixId)) {
            sendHistoryData(task);
        }
        return bitrixId;
    }

    public String createManagerTask(@Valid @NotNull(message = "create.manager.task.request.empty") CreateManagerTaskCmd cmd) {
        BitrixTask task = bitrixTaskService.findByOrderIdAndType(cmd.getOrderId(), cmd.getType());
        if (task != null && !isResendableTask(task.getType())) {
            if (!shouldResendTask(task)) {
                log.info("Task was already sent: {}, {}", task.getId(), task.getBitrixId());
                return task.getBitrixId();
            }
            task = fullUpdateBitrixManagerTask(cmd, task.getId());
        } else {
            task = bitrixTaskService.create(mapper.map(cmd));
        }

        final var bitrixId = sendToBitrixAndUpdateBitrixTaskId(cmd, task);
        if (StringUtils.isNotBlank(bitrixId)) {
            sendHistoryData(task);
        }
        return bitrixId;
    }

    private void sendHistoryData(BitrixTask task) {
        try {
            historyService.sendToHistory(ARM_TASK_CREATED, task);
        } catch (Exception e) {
            log.error("Error during send history data about create task request. Task id: {}, bitrixId: {}. Order id: {}",
                task.getId(), task.getBitrixId(), task.getOrderId(), e);
        }
    }

    public Long findResponsibleId(String email) {
        Assert.notNull(email, "email is null");
        try {
            return bitrixService.findResponsibleId(email);
        } catch (BitrixUserNotFoundException e) {
            return null;
        }
    }

    private String sendToBitrixAndUpdateBitrixTaskId(CreateGroupTaskCmd cmd, BitrixTask bitrixTask) {
        try {
            String taskId = bitrixService.createGroupTask(cmd);
            return updateBitrixTaskIdAndReturn(bitrixTask, taskId);
        } catch (Exception e) {
            log.error("sendToBitrixAndUpdateBitrixTaskId, group task error: " + e.getMessage(), e);
            setNeedSendToBitrix(bitrixTask);
        }

        return null;
    }

    private String sendToBitrixAndUpdateBitrixTaskId(CreateManagerTaskCmd cmd, BitrixTask bitrixTask) {
        try {
            String taskId = bitrixService.createManagerTask(cmd);
            return updateBitrixTaskIdAndReturn(bitrixTask, taskId);
        } catch (Exception e) {
            log.error("sendToBitrixAndUpdateBitrixTaskId, manager task error: " + e.getMessage(), e);
            setNeedSendToBitrix(bitrixTask);
        }

        return null;
    }

    BitrixTask fullUpdateBitrixGroupTask(CreateGroupTaskCmd cmd, String id) {
        BitrixTask bitrixTask = mapper.map(cmd);
        bitrixTask.setId(id);
        bitrixTask.setNeedSendToBitrix(false);
        bitrixTaskService.update(bitrixTask);
        return bitrixTask;
    }

    BitrixTask fullUpdateBitrixManagerTask(CreateManagerTaskCmd cmd, String id) {
        BitrixTask bitrixTask = mapper.map(cmd);
        bitrixTask.setId(id);
        bitrixTask.setNeedSendToBitrix(false);
        bitrixTaskService.update(bitrixTask);
        return bitrixTask;
    }

    @Transactional
    void setNeedSendToBitrix(BitrixTask bitrixTask) {
        bitrixTask.setNeedSendToBitrix(true);
        bitrixTaskService.update(bitrixTask);
    }

    @Transactional
    String updateBitrixTaskIdAndReturn(BitrixTask bitrixTask, String taskId) {
        if (StringUtils.isEmpty(taskId)) {
            setNeedSendToBitrix(bitrixTask);
        } else {
            bitrixTask.setBitrixId(taskId);
            bitrixTaskService.update(bitrixTask);
        }
        return taskId;
    }

    private boolean shouldResendTask(BitrixTask task) {
        return StringUtils.isBlank(task.getBitrixId()) || task.isNeedSendToBitrix();
    }

    private boolean isResendableTask(BitrixTaskType taskType) {
        final var configForBitrixTaskType = bitrixTaskConfig.getConfigForTaskType(taskType);
        return configForBitrixTaskType.map(BitrixTaskConfig.TaskConfig::isResendTaskAllowed).orElse(false);
    }
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/application/GetOrderTasksUseCase.java
Content:
package ru.liga.evraz.bitrix.application;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.collections4.CollectionUtils;
import org.springframework.stereotype.Service;
import org.springframework.validation.annotation.Validated;
import ru.liga.evraz.bitrix.application.cmd.GetOrderTasksCmd;
import ru.liga.evraz.bitrix.domain.model.BitrixTask;
import ru.liga.evraz.bitrix.domain.repository.BitrixTaskService;

import java.util.ArrayList;
import java.util.List;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;

@Service
@Validated
@RequiredArgsConstructor
@Slf4j
public class GetOrderTasksUseCase {
    private final BitrixTaskService bitrixTaskService;

    public List<BitrixTask> getOrderTasks(@Valid @NotNull GetOrderTasksCmd cmd) {
        final var sfOrderId = cmd.getSfOrderId();
        final var taskTypes = cmd.getTypes();
        final List<BitrixTask> allBitrixTaskBySfOrderId = new ArrayList<>();
        if (CollectionUtils.isNotEmpty(taskTypes)) {
            allBitrixTaskBySfOrderId.addAll(bitrixTaskService.findByOrderIdAndTypes(sfOrderId, taskTypes));
        } else {
            allBitrixTaskBySfOrderId.addAll(bitrixTaskService.findAllByOrderId(sfOrderId));
        }
        return allBitrixTaskBySfOrderId;
    }
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/application/validation/DeadlineConstraint.java
Content:
package ru.liga.evraz.bitrix.application.validation;

import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
import javax.validation.Constraint;
import javax.validation.Payload;

/**
 * Констраинт для проверки deadline.
 */
@Target(ElementType.FIELD)
@Retention(RetentionPolicy.RUNTIME)
@Constraint(validatedBy = DeadlineValidator.class)
public @interface DeadlineConstraint {

    /**
     * Сообщение по умолчанию.
     *
     * @return - сообщение.
     */
    String message() default "Некорректное значение deadline";

    /**
     * Группа классов.
     *
     * @return - Классы
     */
    Class<?>[] groups() default {};

    /**
     * Payload.
     *
     * @return - Классы
     */
    Class<? extends Payload>[] payload() default {};
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/application/validation/DeadlineValidator.java
Content:
package ru.liga.evraz.bitrix.application.validation;

import java.time.OffsetDateTime;
import java.time.ZoneOffset;
import javax.validation.ConstraintValidator;
import javax.validation.ConstraintValidatorContext;

/**
 * Валидатор для проверки deadline.
 */
public class DeadlineValidator implements ConstraintValidator<DeadlineConstraint, OffsetDateTime> {
    @Override
    public boolean isValid(OffsetDateTime value, ConstraintValidatorContext constraintValidatorContext) {
        return value == null || OffsetDateTime.now(ZoneOffset.UTC).isBefore(value);
    }
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/application/validation/TimezoneConstraint.java
Content:
package ru.liga.evraz.bitrix.application.validation;

import javax.validation.Constraint;
import javax.validation.Payload;
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

/**
 * Констраинт для проверки timezone.
 */
@Target(ElementType.FIELD)
@Retention(RetentionPolicy.RUNTIME)
@Constraint(validatedBy = TimezoneValidator.class)
public @interface TimezoneConstraint {

    /**
     * Сообщение по умолчанию.
     *
     * @return - сообщение.
     */
    String message() default "Некорректное значение timezone";

    /**
     * Группа классов.
     *
     * @return - Классы
     */
    Class<?>[] groups() default {};

    /**
     * Payload.
     *
     * @return - Классы
     */
    Class<? extends Payload>[] payload() default {};
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/application/validation/TimezoneValidator.java
Content:
package ru.liga.evraz.bitrix.application.validation;

import org.apache.commons.lang.StringUtils;

import javax.validation.ConstraintValidator;
import javax.validation.ConstraintValidatorContext;
import java.time.ZoneId;

/**
 * Валидатор для проверки timezone.
 */
public class TimezoneValidator implements ConstraintValidator<TimezoneConstraint, String> {
    @Override
    public boolean isValid(String value, ConstraintValidatorContext constraintValidatorContext) {
        return StringUtils.isEmpty(value) || isValidTimezoneString(value);
    }

    @SuppressWarnings("all")
    private boolean isValidTimezoneString(String value) {
        try {
            ZoneId.of(value);
            return true;
        } catch (Exception e) {
            return false;
        }
    }
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/application/util/MessageFormatter.java
Content:
package ru.liga.evraz.bitrix.application.util;

import lombok.experimental.UtilityClass;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.regex.Pattern;

@UtilityClass
public class MessageFormatter {

    public static String format(String template, Map<String, Object> parameters) {
        var newTemplate = new StringBuilder(template);
        List<Object> valueList = new ArrayList<>();
        var matcher = Pattern.compile("[$][{](\\w+)}").matcher(template);
        while (matcher.find()) {
            var key = matcher.group(1);
            var paramName = "${" + key + "}";
            int index = newTemplate.indexOf(paramName);
            if (index != -1) {
                newTemplate.replace(index, index + paramName.length(), "%s");
                valueList.add(parameters.getOrDefault(key, "{ value not set }"));
            }
        }
        return String.format(newTemplate.toString(), valueList.toArray());
    }
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/application/service/BitrixService.java
Content:
package ru.liga.evraz.bitrix.application.service;

import org.springframework.validation.annotation.Validated;
import ru.liga.evraz.bitrix.application.cmd.CreateGroupTaskCmd;
import ru.liga.evraz.bitrix.application.cmd.CreateManagerTaskCmd;

import javax.validation.constraints.NotBlank;

@Validated
public interface BitrixService {

    String createManagerTask(CreateManagerTaskCmd cmd);

    String createGroupTask(CreateGroupTaskCmd cmd);

    Long findResponsibleId(@NotBlank String email);

    Boolean cancelTask(Long taskId);
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/application/service/HistoryService.java
Content:
package ru.liga.evraz.bitrix.application.service;

import ru.liga.evraz.bitrix.application.enums.TaskHistoryOperationType;
import ru.liga.evraz.bitrix.domain.model.BitrixTask;
import ru.liga.evraz.bitrix.domain.model.BitrixTaskHistory;

public interface HistoryService {

    void sendToHistory(TaskHistoryOperationType historyOperationType, BitrixTask task);

    void sendToHistory(TaskHistoryOperationType historyOperationType, BitrixTask task, BitrixTaskHistory taskHistory);
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/application/service/HistoryServiceImpl.java
Content:
package ru.liga.evraz.bitrix.application.service;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang.StringUtils;
import org.springframework.stereotype.Service;
import ru.liga.evraz.bitrix.adapter.http.out.enums.BitrixTaskResultCode;
import ru.liga.evraz.bitrix.adapter.http.out.feign.OrderFeignClient;
import ru.liga.evraz.bitrix.adapter.http.out.feign.dto.ControllerResult;
import ru.liga.evraz.bitrix.adapter.http.out.feign.dto.HistoryDto;
import ru.liga.evraz.bitrix.application.enums.TaskHistoryOperationType;
import ru.liga.evraz.bitrix.application.util.MessageFormatter;
import ru.liga.evraz.bitrix.domain.model.BitrixTask;
import ru.liga.evraz.bitrix.domain.model.BitrixTaskHistory;

import java.time.Clock;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.HashMap;
import java.util.Map;

import static ru.liga.evraz.bitrix.application.config.TimeFormat.DATE_TIME_ISO_EXTENDED_FORMAT;

@Service
@RequiredArgsConstructor
@Slf4j
public class HistoryServiceImpl implements HistoryService {

    private static final String HISTORY_USER_ID = "evraz_oms_dev-evraz_dev_int";
    private static final String HISTORY_FIRST_NAME = "evraz";
    private static final String HISTORY_LAST_NAME = "integration";

    private final ObjectMapper objectMapper;
    private final OrderFeignClient orderFeignClient;
    private final Clock clock;

    @Override
    public void sendToHistory(TaskHistoryOperationType historyOperationType, BitrixTask task) {
        DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(DATE_TIME_ISO_EXTENDED_FORMAT);

        HistoryDto historyDto = buildHistoryDto(
            historyOperationType, messageTemplateParams(task), dateTimeFormatter);

        try {
            log.info("History Dto {}", objectMapper.writeValueAsString(historyDto));
            ControllerResult controllerResult = orderFeignClient.addHistory(task.getOrderId(), historyDto, task.getTenantId());
            log.info("ControllerResult {}", objectMapper.writeValueAsString(controllerResult));
        } catch (JsonProcessingException e) {
            throw new RuntimeException(e);
        }

    }

    @Override
    public void sendToHistory(TaskHistoryOperationType historyOperationType, BitrixTask task, BitrixTaskHistory taskHistory) {
        DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(DATE_TIME_ISO_EXTENDED_FORMAT);

        HistoryDto historyDto = buildHistoryDto(
            historyOperationType, messageTemplateParams(task, taskHistory), dateTimeFormatter);

        try {
            log.info("History Dto {}", objectMapper.writeValueAsString(historyDto));
            ControllerResult controllerResult = orderFeignClient.addHistory(task.getOrderId(), historyDto, task.getTenantId());
            log.info("ControllerResult {}", objectMapper.writeValueAsString(controllerResult));
        } catch (JsonProcessingException e) {
            throw new RuntimeException(e);
        }
    }

    private HistoryDto buildHistoryDto(TaskHistoryOperationType historyOperationType, Map<String, Object> task, DateTimeFormatter dateTimeFormatter) {
        return HistoryDto.builder()
            .message(MessageFormatter.format(historyOperationType.getMessageTemplate(),
                task))
            .typeId(historyOperationType.name())
            .time(LocalDateTime.now(clock).format(dateTimeFormatter))
            .userId(HISTORY_USER_ID)
            .firstName(HISTORY_FIRST_NAME)
            .lastName(HISTORY_LAST_NAME)
            .build();
    }

    private Map<String, Object> messageTemplateParams(BitrixTask task, BitrixTaskHistory bitrixTaskHistory) {
        Map<String, Object> params = new HashMap<>();
        params.put("bitrix_task_id", task.getBitrixId());
        final var bitrixTaskResult = bitrixTaskHistory.getBitrixTaskResult();
        if (StringUtils.isNotBlank(bitrixTaskResult)) {
            final var bitrixTaskResultCode = BitrixTaskResultCode.getBy(bitrixTaskResult);

            if (BitrixTaskResultCode.UNKNOWN.equals(bitrixTaskResultCode)) {
                log.info("Unknown bitrix task result {} for task id {}, bitrix task id {}",
                    bitrixTaskResult, task.getId(), task.getBitrixId());
            }

            params.put("task_result_description", bitrixTaskResultCode.getHistoryBitrixTaskResultDescription());
        } else {
            log.info("Unknown bitrix task result {} for task id {}, bitrix task id {}",
                bitrixTaskResult, task.getId(), task.getBitrixId());
            params.put("task_result_description", BitrixTaskResultCode.UNKNOWN.getHistoryBitrixTaskResultDescription());
        }
        return params;
    }

    private Map<String, Object> messageTemplateParams(BitrixTask task) {
        Map<String, Object> params = new HashMap<>();
        params.put("task_header", task.getTitle());
        return params;
    }
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/application/kafka/BitrixTaskHistoryMapper.java
Content:
package ru.liga.evraz.bitrix.application.kafka;

import lombok.extern.slf4j.Slf4j;
import org.mapstruct.Mapper;
import org.springframework.beans.factory.annotation.Autowired;
import ru.liga.evraz.bitrix.common.CommonMapper;
import ru.liga.evraz.bitrix.domain.model.BitrixTask;
import ru.liga.evraz.bitrix.domain.model.BitrixTaskHistory;
import ru.liga.evraz.bitrix.domain.model.TaskExecutionStatus;
import ru.liga.evraz.bitrix.kafka.TaskExecutionStatusKafka;

import java.time.Clock;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Optional;
import java.util.UUID;

@Mapper(componentModel = "spring", uses = CommonMapper.class)
@Slf4j
public abstract class BitrixTaskHistoryMapper {

    @Autowired
    private Clock clock;

    public BitrixTaskHistory map(TaskExecutionStatusKafka source, BitrixTask bitrixTask) {
        if (source == null) {
            return null;
        }

        final var status = resolveStatus(source.getSTATUS());

        return BitrixTaskHistory.builder()
            .id(UUID.randomUUID().toString())
            .bitrixTask(bitrixTask)
            .statusBitrixId(Optional.ofNullable(status.getErpStatusId()).orElse(source.getSTATUS()))
            .statusName(status.getName())
            .bitrixTaskResult(source.getUFOMSTASKRESULT())
            .createdAt(OffsetDateTime.now(clock))
            .modifiedAt(OffsetDateTime.now(clock))
            .build();
    }

    private TaskExecutionStatus resolveStatus(String statusId) {
        return Arrays.stream(TaskExecutionStatus.values())
            .filter(taskExecutionStatus -> !taskExecutionStatus.isUnknown()
                && taskExecutionStatus.getErpStatusId().equals(statusId))
            .findFirst()
            .orElseGet(() -> {
                log.error("Could not map Bitrix task execution status {}", statusId);
                return TaskExecutionStatus.UNKNOWN;
            });
    }

}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/application/kafka/KafkaSendTaskExecutionStatusUseCase.java
Content:
package ru.liga.evraz.bitrix.application.kafka;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.validation.annotation.Validated;
import reactor.core.publisher.Mono;
import ru.liga.evraz.bitrix.application.service.HistoryService;
import ru.liga.evraz.bitrix.domain.exception.NotFoundException;
import ru.liga.evraz.bitrix.domain.model.BitrixTask;
import ru.liga.evraz.bitrix.domain.repository.BitrixTaskHistoryService;
import ru.liga.evraz.bitrix.domain.repository.BitrixTaskService;
import ru.liga.evraz.bitrix.kafka.TaskExecutionStatusKafka;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;

import static ru.liga.evraz.bitrix.application.enums.TaskHistoryOperationType.ARM_TASK_STATUS_COMPLETED;
import static ru.liga.evraz.bitrix.util.ValidationUtils.validateBitrixTask;

@Service
@Validated
@RequiredArgsConstructor
@Slf4j
public class KafkaSendTaskExecutionStatusUseCase {
    private static final String TASK_COMPLETED_STATUS_BITRIX_ID = "5";
    private final BitrixTaskHistoryMapper mapper;
    private final BitrixTaskHistoryService bitrixTaskHistoryService;
    private final BitrixTaskService bitrixTaskService;

    private final HistoryService historyService;

    public Mono<Void> sendTaskExecutionStatus(@Valid @NotNull final TaskExecutionStatusKafka taskExecutionStatus) {
        log.info("{} executed. TaskExecutionStatusKafka: {}", this.getClass().getCanonicalName(), taskExecutionStatus);

        final var bitrixTaskId = taskExecutionStatus.getID();
        final var isKnownTask = bitrixTaskService.existsByBitrixId(bitrixTaskId);
        if (isKnownTask) {
            final var bitrixTask = bitrixTaskService.getByBitrixId(bitrixTaskId);
            validate(bitrixTask, taskExecutionStatus);
            final var bitrixTaskHistoryRow = mapper.map(taskExecutionStatus, bitrixTask);
            final var bitrixTaskHistory = bitrixTaskHistoryService.create(bitrixTaskHistoryRow);

            // Отправка в историю заказа информации только для задач со статусом 5 (Выполнена)
            if (TASK_COMPLETED_STATUS_BITRIX_ID.equalsIgnoreCase(bitrixTaskHistory.getStatusBitrixId())) {
                historyService.sendToHistory(ARM_TASK_STATUS_COMPLETED, bitrixTask, bitrixTaskHistory);
            }
        } else {
            log.error("Bitrix taskExecutionStatus not found by bitrix id {}", bitrixTaskId);
            throw new NotFoundException(
                String.format("Bitrix taskExecutionStatus not found by bitrix id: %s", bitrixTaskId));
        }

        // TODO:: что делаем с полученным статусом дальше?
        return Mono.empty();
    }

    protected boolean validate(BitrixTask bitrixTask, @Valid @NotNull TaskExecutionStatusKafka taskExecutionStatus) {
        return validateBitrixTask(bitrixTask, taskExecutionStatus.getUFOMSTASKRESULT());
    }
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/application/enums/TaskHistoryOperationType.java
Content:
package ru.liga.evraz.bitrix.application.enums;

import lombok.Getter;

@Getter
public enum TaskHistoryOperationType {
    ARM_TASK_CREATED("Создана новая задача \"${task_header}\""),
    ARM_TASK_CANCELED("Отменена задача \"${task_header}\""),

    ARM_TASK_STATUS_COMPLETED("Результат выполнения задачи № ${bitrix_task_id}: ${task_result_description}");

    private final String messageTemplate;

    TaskHistoryOperationType(String messageTemplate) {
        this.messageTemplate = messageTemplate;
    }
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/application/converter/BitrixTaskMapper.java
Content:
package ru.liga.evraz.bitrix.application.converter;

import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import ru.liga.evraz.bitrix.application.cmd.CreateGroupTaskCmd;
import ru.liga.evraz.bitrix.application.cmd.CreateManagerTaskCmd;
import ru.liga.evraz.bitrix.domain.model.BitrixTask;

@Mapper(componentModel = "spring")
public interface BitrixTaskMapper {

    @Mapping(target = "bitrixTaskTypeCode", source = "type.bitrixTaskTypeCode")
    BitrixTask map(CreateGroupTaskCmd source);

    @Mapping(target = "bitrixTaskTypeCode", source = "type.bitrixTaskTypeCode")
    BitrixTask map(CreateManagerTaskCmd source);
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/application/config/BitrixTaskConfig.java
Content:
package ru.liga.evraz.bitrix.application.config;

import lombok.Getter;
import lombok.Setter;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.stereotype.Component;
import org.springframework.validation.annotation.Validated;
import ru.liga.evraz.bitrix.adapter.db.entity.BitrixTaskType;

import javax.validation.constraints.NotEmpty;
import java.util.Map;
import java.util.Optional;

@Validated
@Getter
@Setter
@Component
@ConfigurationProperties(prefix = "bitrix")
public class BitrixTaskConfig {
    @NotEmpty
    private Map<BitrixTaskType, TaskConfig> tasksConfig;

    public Optional<TaskConfig> getConfigForTaskType(BitrixTaskType bitrixTaskType) {
        return Optional.ofNullable(this.getTasksConfig().get(bitrixTaskType));
    }

    @Validated
    @Getter
    @Setter
    public static class TaskConfig {
        private boolean resendTaskAllowed;
    }
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/application/config/MessageSourceConfig.java
Content:
package ru.liga.evraz.bitrix.application.config;

import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.MessageSource;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.support.ReloadableResourceBundleMessageSource;
import org.springframework.validation.beanvalidation.LocalValidatorFactoryBean;

@Configuration
class MessageSourceConfig {
    @Bean
    @Qualifier("validationMessageSource")
    public MessageSource validationMessageSource() {
        ReloadableResourceBundleMessageSource messageSource = new ReloadableResourceBundleMessageSource();
        messageSource.setBasename("classpath:Validation");
        messageSource.setDefaultEncoding("UTF-8");
        return messageSource;
    }

    @Bean
    public LocalValidatorFactoryBean validator(@Qualifier("validationMessageSource") MessageSource messageSource) {
        LocalValidatorFactoryBean bean = new LocalValidatorFactoryBean();
        bean.setValidationMessageSource(messageSource);
        return bean;
    }
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/application/config/TimeConfig.java
Content:
package ru.liga.evraz.bitrix.application.config;

import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.time.Clock;

@Configuration
class TimeConfig {

    @Bean
    @ConditionalOnMissingBean
    public Clock clock() {
        return Clock.systemDefaultZone();
    }
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/application/config/TimeFormat.java
Content:
package ru.liga.evraz.bitrix.application.config;

public class TimeFormat {

    public static final String DATE_TIME_ISO_EXTENDED_FORMAT = "yyyy-MM-dd'T'HH:mm:ss.SSS"; // 2020-01-05T00:00:00.000
    public static final String DATE_TIME_ISO_EXTENDED_WITH_OFFSET_FORMAT = "yyyy-MM-dd'T'HH:mm:ss.SSSXXX"; // 2020-01-05T00:00:00.000+03:00
    public static final String DATE_TIME_ISO_FORMAT = "yyyy-MM-dd HH:mm:ss";
    public static final String DATE_FORMAT = "yyyy-MM-dd";
    public static final String DATE_TIME_ISO_EXTEND_WITH_GMT_TIMEZONE = "yyyy-MM-dd'Z'HH:mm:ss";
    public static final String DATE_TIME_FORMAT_SET_TIMERS = "yyyy-MM-dd'T'HH:mm";
    public static final String ISO_DATE_TIME_UTC_OFFSET = "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'";
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/application/cmd/AbstractTaskCmd.java
Content:
package ru.liga.evraz.bitrix.application.cmd;

import lombok.Data;
import org.springframework.validation.annotation.Validated;
import ru.liga.evraz.bitrix.adapter.db.entity.BitrixTaskType;

import javax.validation.constraints.NotEmpty;
import java.time.OffsetDateTime;

@Data
@Validated
public abstract class AbstractTaskCmd {
    @NotEmpty(message = "{create.task.cmd.title.empty}")
    private String title;
    private OffsetDateTime deadline;
    @NotEmpty(message = "{create.task.cmd.clientOrderId.empty}")
    private String clientOrderId;
    @NotEmpty(message = "{create.task.cmd.orderId.empty}")
    private String orderId;
    @NotEmpty(message = "{create.task.cmd.tenantId.empty}")
    private String tenantId;
    @NotEmpty(message = "{create.task.cmd.createdBy.empty}")
    private String createdBy;
    private String zoneId;
    private BitrixTaskType type;
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/application/cmd/CancelOrderTasksCmd.java
Content:
package ru.liga.evraz.bitrix.application.cmd;

import lombok.Data;
import ru.liga.evraz.bitrix.adapter.db.entity.BitrixTaskType;

@Data
public class CancelOrderTasksCmd {
    private String orderId;
    private String tenantId;
    private Boolean cancelAll;
    private BitrixTaskType type;
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/application/cmd/CreateGroupTaskCmd.java
Content:
package ru.liga.evraz.bitrix.application.cmd;

import lombok.Data;
import lombok.EqualsAndHashCode;
import org.springframework.validation.annotation.Validated;

import javax.validation.constraints.NotEmpty;

@EqualsAndHashCode(callSuper = true)
@Data
@Validated
public class CreateGroupTaskCmd extends AbstractTaskCmd {
    @NotEmpty(message = "{create.task.cmd.role.empty}")
    private String role;
    private String description;
    @NotEmpty(message = "{create.task.cmd.branch.empty}")
    private String branch;
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/application/cmd/CreateManagerTaskCmd.java
Content:
package ru.liga.evraz.bitrix.application.cmd;

import lombok.Data;
import lombok.EqualsAndHashCode;
import org.springframework.validation.annotation.Validated;

import javax.validation.constraints.NotEmpty;
import javax.validation.constraints.NotNull;

@EqualsAndHashCode(callSuper = true)
@Data
@Validated
public class CreateManagerTaskCmd extends AbstractTaskCmd {
    @NotNull(message = "{create.task.cmd.responsibleId.empty}")
    private Long responsibleId;
    @NotEmpty(message = "{create.task.cmd.responsibleEmail.empty}")
    private String responsibleEmail;
    @NotEmpty(message = "{create.task.cmd.description.empty}")
    private String description;
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/application/cmd/GetOrderTasksCmd.java
Content:
package ru.liga.evraz.bitrix.application.cmd;

import lombok.Data;
import org.springframework.validation.annotation.Validated;
import ru.liga.evraz.bitrix.adapter.db.entity.BitrixTaskType;

import java.util.Set;
import javax.validation.constraints.NotEmpty;

@Data
@Validated
public class GetOrderTasksCmd {
    @NotEmpty
    private String sfOrderId;
    private Set<BitrixTaskType> types;
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/UuidGenerator.java
Content:
package ru.liga.evraz.bitrix.adapter;

import java.util.UUID;

public interface UuidGenerator {
    default String generateUuid() {
        return UUID.randomUUID().toString();
    }
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/kafka/EvrazErrorHandlingDeserializer.java
Content:
package ru.liga.evraz.bitrix.adapter.kafka;

import lombok.extern.slf4j.Slf4j;
import org.apache.kafka.common.header.Headers;
import org.apache.kafka.common.serialization.Deserializer;
import org.springframework.kafka.support.serializer.ErrorHandlingDeserializer;
import org.springframework.kafka.support.serializer.FailedDeserializationInfo;
import org.springframework.kafka.support.serializer.SerializationUtils;
import org.springframework.util.Assert;
import org.springframework.util.ClassUtils;

import java.util.Map;
import java.util.function.Function;

@Slf4j
public class EvrazErrorHandlingDeserializer<T> extends ErrorHandlingDeserializer<T> {

    /**
     * Header name for deserialization exceptions.
     *
     * @deprecated in favor of {@link SerializationUtils#DESERIALIZER_EXCEPTION_HEADER_PREFIX}.
     */
    @Deprecated
    public static final String KEY_DESERIALIZER_EXCEPTION_HEADER_PREFIX =
        SerializationUtils.DESERIALIZER_EXCEPTION_HEADER_PREFIX;

    /**
     * Header name for deserialization exceptions.
     *
     * @deprecated in favor of {@link SerializationUtils#KEY_DESERIALIZER_EXCEPTION_HEADER}.
     */
    @Deprecated
    public static final String KEY_DESERIALIZER_EXCEPTION_HEADER = SerializationUtils.KEY_DESERIALIZER_EXCEPTION_HEADER;

    /**
     * Header name for deserialization exceptions.
     *
     * @deprecated in favor of {@link SerializationUtils#VALUE_DESERIALIZER_EXCEPTION_HEADER}.
     */
    @Deprecated
    public static final String VALUE_DESERIALIZER_EXCEPTION_HEADER = SerializationUtils.VALUE_DESERIALIZER_EXCEPTION_HEADER;

    /**
     * Supplier for a T when deserialization fails.
     */
    public static final String KEY_FUNCTION = "spring.deserializer.key.function";

    /**
     * Supplier for a T when deserialization fails.
     */
    public static final String VALUE_FUNCTION = "spring.deserializer.value.function";

    /**
     * Property name for the delegate key deserializer.
     */
    public static final String KEY_DESERIALIZER_CLASS = "spring.deserializer.key.delegate.class";

    /**
     * Property name for the delegate value deserializer.
     */
    public static final String VALUE_DESERIALIZER_CLASS = "spring.deserializer.value.delegate.class";

    private Deserializer<T> delegate;

    private boolean isForKey;

    private Function<FailedDeserializationInfo, T> failedDeserializationFunction;

    public EvrazErrorHandlingDeserializer() {
    }

    public EvrazErrorHandlingDeserializer(Deserializer<T> delegate) {
        this.delegate = setupDelegate(delegate);
    }

    /**
     * Provide an alternative supplying mechanism when deserialization fails.
     *
     * @param failedDeserializationFunction the {@link Function} to use.
     * @since 2.2.8
     */
    public void setFailedDeserializationFunction(Function<FailedDeserializationInfo, T> failedDeserializationFunction) {
        this.failedDeserializationFunction = failedDeserializationFunction;
    }

    public boolean isForKey() {
        return this.isForKey;
    }

    /**
     * Set to true if this deserializer is to be used as a key deserializer when
     * configuring outside of Kafka.
     *
     * @param isKey true for a key deserializer, false otherwise.
     * @since 2.2.3
     */
    public void setForKey(boolean isKey) {
        this.isForKey = isKey;
    }

    /**
     * Set to true if this deserializer is to be used as a key deserializer when
     * configuring outside of Kafka.
     *
     * @param isKey true for a key deserializer, false otherwise.
     * @return this
     * @since 2.2.3
     */
    public ErrorHandlingDeserializer<T> keyDeserializer(boolean isKey) {
        this.isForKey = isKey;
        return this;
    }

    @Override
    public void configure(Map<String, ?> configs, boolean isKey) {
        if (this.delegate == null) {
            setupDelegate(configs, isKey ? KEY_DESERIALIZER_CLASS : VALUE_DESERIALIZER_CLASS);
        }
        Assert.state(this.delegate != null, "No delegate deserializer configured");
        this.delegate.configure(configs, isKey);
        this.isForKey = isKey;
        if (this.failedDeserializationFunction == null) {
            setupFunction(configs, isKey ? KEY_FUNCTION : VALUE_FUNCTION);
        }
    }

    public void setupDelegate(Map<String, ?> configs, String configKey) {
        if (configs.containsKey(configKey)) {
            try {
                Object value = configs.get(configKey);
                Class<?> clazz = value instanceof Class ? (Class<?>) value : ClassUtils.forName((String) value, null);
                this.delegate = setupDelegate(clazz.getDeclaredConstructor().newInstance());
            } catch (Exception e) {
                throw new IllegalStateException(e);
            }
        }
    }

    @SuppressWarnings("unchecked")
    private Deserializer<T> setupDelegate(Object delegate) {
        Assert.isInstanceOf(Deserializer.class, delegate, "'delegate' must be a 'Deserializer', not a ");
        return (Deserializer<T>) delegate;
    }

    @SuppressWarnings("unchecked")
    private void setupFunction(Map<String, ?> configs, String configKey) {
        if (configs.containsKey(configKey)) {
            try {
                Object value = configs.get(configKey);
                Class<?> clazz = value instanceof Class ? (Class<?>) value : ClassUtils.forName((String) value, null);
                Assert.isTrue(Function.class.isAssignableFrom(clazz), "'function' must be a 'Function ', not a "
                    + clazz.getName());
                this.failedDeserializationFunction = (Function<FailedDeserializationInfo, T>)
                    clazz.getDeclaredConstructor().newInstance();
            } catch (Exception e) {
                throw new IllegalStateException(e);
            }
        }
    }

    @Override
    public T deserialize(String topic, byte[] data) {
        try {
            return this.delegate.deserialize(topic, data);
        } catch (Exception e) {
            return recoverFromSupplier(topic, null, data, e);
        }
    }

    @Override
    public T deserialize(String topic, Headers headers, byte[] data) {
        try {
            if (this.isForKey) {
                headers.remove(SerializationUtils.KEY_DESERIALIZER_EXCEPTION_HEADER);
            } else {
                headers.remove(SerializationUtils.VALUE_DESERIALIZER_EXCEPTION_HEADER);
            }
            return this.delegate.deserialize(topic, headers, data);
        } catch (Exception e) {
            log.error("Error on Kafka Message Deserialization", e);
            SerializationUtils.deserializationException(headers, data, e, this.isForKey);
            return recoverFromSupplier(topic, headers, data, e);
        }
    }

    private T recoverFromSupplier(String topic, Headers headers, byte[] data, Exception exception) {
        if (this.failedDeserializationFunction != null) {
            FailedDeserializationInfo failedDeserializationInfo =
                new FailedDeserializationInfo(topic, headers, data, this.isForKey, exception);
            return this.failedDeserializationFunction.apply(failedDeserializationInfo);
        } else {
            return null;
        }
    }

    @Override
    public void close() {
        if (this.delegate != null) {
            this.delegate.close();
        }
    }
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/kafka/KafkaBitrixProperties.java
Content:
package ru.liga.evraz.bitrix.adapter.kafka;

import lombok.Getter;
import lombok.Setter;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.validation.annotation.Validated;

import javax.validation.Valid;
import javax.validation.constraints.NotEmpty;
import javax.validation.constraints.NotNull;

@Getter
@Setter
@Validated
@ConfigurationProperties(prefix = "bitrix.kafka")
public class KafkaBitrixProperties {
    @NotNull
    private TopicConfig taskExecutionStatus;

    @Getter
    @Setter
    @Valid
    public static class TopicConfig {
        @NotEmpty
        private String topic;
        private String clientIdPostfix;
    }
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/kafka/in/InKafkaConfig.java
Content:
package ru.liga.evraz.bitrix.adapter.kafka.in;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.kafka.clients.consumer.ConsumerConfig;
import org.apache.kafka.common.serialization.StringDeserializer;
import org.springframework.boot.autoconfigure.kafka.KafkaProperties;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.kafka.support.serializer.ErrorHandlingDeserializer;
import org.springframework.kafka.support.serializer.JsonDeserializer;
import ru.liga.evraz.bitrix.adapter.kafka.KafkaBitrixProperties;
import ru.liga.evraz.bitrix.application.kafka.KafkaSendTaskExecutionStatusUseCase;
import ru.liga.evraz.bitrix.kafka.TaskExecutionStatusKafka;

import java.util.Map;
import java.util.stream.Collectors;

/**
 * Kafka config.
 */
@Configuration
@EnableConfigurationProperties(KafkaBitrixProperties.class)
@RequiredArgsConstructor
@Slf4j
public class InKafkaConfig {

    private final KafkaBitrixProperties kafkaBitrixProperties;
    private final KafkaProperties kafkaProperties;

    @Bean
    KafkaTaskExecutionStatusListener kafkaTaskExecutionStatusEventListener(KafkaSendTaskExecutionStatusUseCase useCase) {
        final var properties = kafkaProperties.buildConsumerProperties();
        addDeserializerProperties(properties);

        properties.put(ConsumerConfig.GROUP_ID_CONFIG, kafkaProperties.getConsumer().getGroupId());

        properties.put(JsonDeserializer.VALUE_DEFAULT_TYPE, TaskExecutionStatusKafka.class);
        properties.put(JsonDeserializer.TRUSTED_PACKAGES, "*");

        log.info("kafkaTaskExecutionStatusEventListener -> {}", properties.entrySet().stream()
            .filter(entry -> !"sasl.jaas.config".equals(entry.getKey()) && !entry.getKey().contains("password"))
            .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue)));
        return new KafkaTaskExecutionStatusListener(kafkaBitrixProperties.getTaskExecutionStatus().getTopic(), properties, useCase);
    }

    private static void addDeserializerProperties(Map<String, Object> properties) {
        properties.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, ErrorHandlingDeserializer.class);
        properties.put(ErrorHandlingDeserializer.KEY_DESERIALIZER_CLASS, StringDeserializer.class.getName());
        properties.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, ErrorHandlingDeserializer.class);
        properties.put(ErrorHandlingDeserializer.VALUE_DESERIALIZER_CLASS, JsonDeserializer.class.getName());
    }

}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/kafka/in/KafkaTaskExecutionStatusListener.java
Content:
package ru.liga.evraz.bitrix.adapter.kafka.in;

import lombok.extern.slf4j.Slf4j;
import reactor.core.publisher.Mono;
import reactor.kafka.receiver.ReceiverRecord;
import ru.liga.evraz.bitrix.application.kafka.KafkaSendTaskExecutionStatusUseCase;
import ru.liga.evraz.bitrix.kafka.TaskExecutionStatusKafka;
import ru.liga.evraz.starter.broker.common.logging.LogUtil;
import ru.liga.evraz.starter.broker.receiver.KafkaReceiverTemplate;
import ru.liga.evraz.starter.broker.util.ContextUtil;

import java.util.Map;

@Slf4j
public class KafkaTaskExecutionStatusListener extends KafkaReceiverTemplate<String, TaskExecutionStatusKafka> {
    private final KafkaSendTaskExecutionStatusUseCase ucSendTaskExecutionStatus;

    public KafkaTaskExecutionStatusListener(String topic, Map<String, Object> receiverProperties,
                                            KafkaSendTaskExecutionStatusUseCase ucSendTaskExecutionStatus) {
        super(topic, receiverProperties);
        this.ucSendTaskExecutionStatus = ucSendTaskExecutionStatus;
    }

    @Override
    protected Mono<ReceiverRecord<String, TaskExecutionStatusKafka>> process(ReceiverRecord<String, TaskExecutionStatusKafka> message) {
        return ucSendTaskExecutionStatus.sendTaskExecutionStatus(message.value())
                .thenReturn(message);
    }

    @Override
    protected Mono<ReceiverRecord<String, TaskExecutionStatusKafka>> errorResume(ReceiverRecord<String, TaskExecutionStatusKafka> message, Throwable ex) {
        return ContextUtil.getContextSafe()
                .doOnEach(LogUtil.logOnNext(item -> log.error("Handled exception: {}", ex.getMessage(), ex)))
                .map(r -> message);
    }
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/http/HttpConfig.java
Content:
package ru.liga.evraz.bitrix.adapter.http;

import org.springframework.context.annotation.Configuration;

@Configuration
class HttpConfig {
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/http/OffsetDateTimeDeserializer.java
Content:
package ru.liga.evraz.bitrix.adapter.http;

import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.datatype.jsr310.deser.InstantDeserializer;
import org.apache.commons.lang3.StringUtils;

import java.io.IOException;
import java.time.LocalTime;
import java.time.OffsetDateTime;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.time.temporal.TemporalAccessor;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.validation.ValidationException;

import static org.apache.commons.lang3.StringUtils.EMPTY;

// Используется в x-field-extra-annotation как кастомный Deserializer
public class OffsetDateTimeDeserializer extends InstantDeserializer<OffsetDateTime> {

    public OffsetDateTimeDeserializer() {
        super(OFFSET_DATE_TIME, DateTimeFormatter.ISO_OFFSET_DATE_TIME);
    }

    protected OffsetDateTimeDeserializer(Class<OffsetDateTime> supportedType, DateTimeFormatter formatter, Function<TemporalAccessor, OffsetDateTime> parsedToValue, Function<FromIntegerArguments, OffsetDateTime> fromMilliseconds, Function<FromDecimalArguments, OffsetDateTime> fromNanoseconds, BiFunction<OffsetDateTime, ZoneId, OffsetDateTime> adjust, boolean replaceZeroOffsetAsZ) {
        super(supportedType, formatter, parsedToValue, fromMilliseconds, fromNanoseconds, adjust, replaceZeroOffsetAsZ);
    }

    protected OffsetDateTimeDeserializer(InstantDeserializer<OffsetDateTime> base, DateTimeFormatter f) {
        super(base, f);
    }

    protected OffsetDateTimeDeserializer(InstantDeserializer<OffsetDateTime> base, Boolean adjustToContextTimezoneOverride) {
        super(base, adjustToContextTimezoneOverride);
    }

    protected OffsetDateTimeDeserializer(InstantDeserializer<OffsetDateTime> base, DateTimeFormatter f, Boolean leniency) {
        super(base, f, leniency);
    }

    @Override
    protected OffsetDateTime _fromString(JsonParser p, DeserializationContext ctxt, String value) throws IOException {
        if (StringUtils.isBlank(value) || value.endsWith("Z")) {
            return super._fromString(p, ctxt, value);
        }

        if (value.length() > 6) {
            Pattern pattern = Pattern.compile("([+-](\\d{2}):[0-5][0-9])$");
            Matcher matcher = pattern.matcher(value);
            if (matcher.find()) {
                final var zonePart = matcher.group(1);
                if (zonePart.startsWith("+")) {
                    return getOffsetDateTime(zonePart, "\\+", 14, p, ctxt, value);
                } else if (zonePart.startsWith("-")) {
                    return getOffsetDateTime(zonePart, "-", 12, p, ctxt, value);
                }
            }
        }
        return super._fromString(p, ctxt, value);

        /*Pattern minusTwelveToPlusFourteenregExp = Pattern.compile(
            "\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d([+-])(((?<=\\+)(00|01|02|03|04|05|06|07|08|09|10|11|12|13|14)|(00|01|02|03|04|05|06|07|08|09|10|11|12)):[0-5]\\d|Z)");
        final var matches = minusTwelveToPlusFourteenregExp.matcher(value).matches();
        if (matches || StringUtils.isBlank(value)) {
            return super._fromString(p, ctxt, value);
        } else {
            throw new ValidationException("Invalid date");
        }*/
    }

    private OffsetDateTime getOffsetDateTime(String zonePart, String regex, int hourLimit,
                                             JsonParser p, DeserializationContext ctxt, String value) throws IOException {
        LocalTime time;
        try {
            time = LocalTime.parse(zonePart.replaceFirst(regex, EMPTY));
        } catch (Exception e) {
            return super._fromString(p, ctxt, value);
        }

        if (time.getHour() > hourLimit
            || time.getHour() == hourLimit && (time.getMinute() > 0 || time.getSecond() > 0 || time.getNano() > 0)) {
            throw new ValidationException("Invalid date");
        } else {
            return super._fromString(p, ctxt, value);
        }

    }
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/http/out/feign/OrderFeignClient.java
Content:
package ru.liga.evraz.bitrix.adapter.http.out.feign;

import org.springframework.cloud.openfeign.FeignClient;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import ru.liga.evraz.bitrix.adapter.http.out.feign.config.FeignClientConfig;
import ru.liga.evraz.bitrix.adapter.http.out.feign.dto.ControllerResult;
import ru.liga.evraz.bitrix.adapter.http.out.feign.dto.HistoryDto;

import javax.validation.Valid;

@FeignClient(name = "${feign.starfish.order.name}", configuration = {FeignClientConfig.class})
public interface OrderFeignClient {
    @PostMapping("/order/{orderId}/history")
    ControllerResult addHistory(@PathVariable("orderId") String orderId,
                                @Valid @RequestBody HistoryDto historyDto,
                                @RequestHeader("tenantId") String tenantId);

}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/http/out/feign/TemplateFeignClient.java
Content:
package ru.liga.evraz.bitrix.adapter.http.out.feign;

import org.springframework.cloud.openfeign.FeignClient;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import ru.liga.evraz.bitrix.adapter.http.out.feign.config.FeignClientConfig;

@FeignClient(name = "external-service", configuration = {FeignClientConfig.class}) // TODO:: change name for required external service
interface TemplateFeignClient {

    @PostMapping("/path_to_do_smth")
    ResponseEntity doSmth(@RequestBody Object body);
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/http/out/feign/dto/ControllerResult.java
Content:
package ru.liga.evraz.bitrix.adapter.http.out.feign.dto;

import lombok.Getter;
import lombok.Setter;
import lombok.ToString;
import org.springframework.http.HttpStatus;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;

import static java.util.Objects.isNull;
import static java.util.Objects.nonNull;

@Getter
@Setter
public class ControllerResult {

    private boolean success = true;
    private String message;
    private String result;
    private List<ProcessingExceptionMessage> processingExceptionMessages;

    @ToString
    @Getter
    @Setter
    public static class ProcessingExceptionMessage {
        private String message;
        private Integer statusCode;
        private String service;
        private Integer order;
    }

    public ProcessingExceptionMessage getRootCause() {
        if (nonNull(processingExceptionMessages) && !processingExceptionMessages.isEmpty()) {
            return processingExceptionMessages.stream()
                    .min(Comparator.comparingInt(ProcessingExceptionMessage::getOrder))
                    .orElseThrow(() -> new IllegalArgumentException("Unreachable state"));
        }
        return null;
    }

    public void addProcessingException(String message, HttpStatus statusCode, String service) {
        if (isNull(processingExceptionMessages)) {
            processingExceptionMessages = new ArrayList<>();
        }
        ProcessingExceptionMessage exceptionMessage = new ProcessingExceptionMessage();
        exceptionMessage.setMessage(message);
        exceptionMessage.setStatusCode(statusCode.value());
        exceptionMessage.setOrder(processingExceptionMessages.size());
        exceptionMessage.setService(service);
        processingExceptionMessages.add(exceptionMessage);
    }

    public ControllerResult() {

    }

    public ControllerResult(boolean success, String message) {
        this.setSuccess(success);
        this.setMessage(message);
    }

    public ControllerResult(boolean success, String message, String result) {
        this.success = success;
        this.message = message;
        this.result = result;
    }

    public static ControllerResult successResult(String message) {
        ControllerResult result = new ControllerResult();
        result.success = true;
        result.message = message;
        return result;
    }

    public static ControllerResult failResult(String message) {
        ControllerResult result = new ControllerResult();
        result.success = false;
        result.message = message;
        return result;
    }


}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/http/out/feign/dto/CustomAttribute.java
Content:
package ru.liga.evraz.bitrix.adapter.http.out.feign.dto;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class CustomAttribute {

    private String name;
    private String value;
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/http/out/feign/dto/HistoryDto.java
Content:
package ru.liga.evraz.bitrix.adapter.http.out.feign.dto;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import javax.validation.constraints.NotBlank;
import java.util.List;

import static ru.liga.evraz.bitrix.application.config.TimeFormat.DATE_TIME_ISO_EXTENDED_FORMAT;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
@Getter
@Setter
@JsonIgnoreProperties(ignoreUnknown = true)
public class HistoryDto {

    @NotBlank(message = "Time must be not empty")
    @JsonFormat(pattern = DATE_TIME_ISO_EXTENDED_FORMAT, shape = JsonFormat.Shape.STRING)
    private String time;

    @NotBlank(message = "TypeId must be not empty")
    private String typeId;

    @NotBlank(message = "Message must be not empty")
    private String message;

    @NotBlank(message = "UserId must be not empty")
    private String userId;

    @NotBlank(message = "FirstName must be not empty")
    private String firstName;

    @NotBlank(message = "LastName must be not empty")
    private String lastName;

    private List<CustomAttribute> contextData;
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/http/out/feign/config/FeignClientConfig.java
Content:
package ru.liga.evraz.bitrix.adapter.http.out.feign.config;

import feign.Client;
import feign.Logger;
import feign.codec.ErrorDecoder;
import lombok.RequiredArgsConstructor;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Profile;
import ru.liga.evraz.bitrix.security.IntegrationTokenConfig;

@RequiredArgsConstructor
@Configuration
public class FeignClientConfig {

    private final IntegrationTokenConfig integrationTokenConfig;

    @Bean
    @Profile("!local")
    public Client feignClient() {
        return new Client.Default(null, null);
    }

    @Bean
    public FeignClientInterceptor feignAccessTokenAuthInterceptor() {
        return new FeignClientInterceptor(integrationTokenConfig.getIntegrationToken());
    }

    @Bean
    Logger.Level feignLoggerLevel() {
        return Logger.Level.FULL;
    }

    @Bean
    public ErrorDecoder errorDecoder() {
        return new ErrorDecoder.Default();
    }
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/http/out/feign/config/FeignClientInterceptor.java
Content:
package ru.liga.evraz.bitrix.adapter.http.out.feign.config;

import feign.RequestInterceptor;
import feign.RequestTemplate;
import lombok.extern.slf4j.Slf4j;

import java.util.Map;

@Slf4j
public class FeignClientInterceptor implements RequestInterceptor {

    private static final String AUTHORIZATION_HEADER = "Authorization";
    private static final String TOKEN_TYPE = "Bearer";
    private static final String TOKEN_KEY = "evraz_oms_dev";
    private final Map<String, String> integrationTokens;

    public FeignClientInterceptor(Map<String, String> integrationTokens) {
        this.integrationTokens = integrationTokens;
    }

    @Override
    public void apply(RequestTemplate requestTemplate) {
        var token = integrationTokens.get(TOKEN_KEY);
        requestTemplate.header(AUTHORIZATION_HEADER, String.format("%s %s", TOKEN_TYPE, token));
    }
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/http/out/enums/BitrixTaskResultCode.java
Content:
package ru.liga.evraz.bitrix.adapter.http.out.enums;

import lombok.Getter;

import java.util.EnumSet;
import java.util.Set;

@Getter
public enum BitrixTaskResultCode {
    SHIPMENT_WITHOUT_CHANGING("shipment-without-changing", "Отгрузка состоится без изменения диспетчеризации"),
    SHIPMENT_CHANGED_DATETIME("shipment-changed-datetime", "Изменена дата/время отгрузки"),
    CLIENT_CANCEL_ORDER_SHIPMENT("client-cancel-order-shipment", "Отказ клиента от заказа"),
    COMPLETED_AUTOMATICALLY_SHIPMENT_CONTROL("completed-automatically-shipment-control", "Завершена автоматически"),
    INVOICE_ISSUED("invoice-issued", "Счет выставлен"),
    CLIENT_CANCEL_ORDER_INVOICE("client-cancel-order-invoice", "Отказ клиента от заказа"),
    INVOICE_ISSUED_LATER("invoice-issued-later", "Счет будет выставлен позже (нужны дополнительные согласования)"),
    COMPLETED_AUTOMATICALLY_INVOICE_CONTROL("completed-automatically-invoice-control", "Завершена автоматически"),
    EXPECT_PAYMENT_ON_TIME("expect-payment-on-time", "Ожидаем оплату вовремя (Не оплатил, но будет платить)"),
    ORDER_PAID("order-paid", "Заказ оплачен (Оплатил, деньги  поступили)"),
    CLIENT_CANCEL_ORDER_PAYMENT("client-cancel-order-payment", "Отказ клиента от заказа (Не оплатил и не будет)"),
    COMPLETED_AUTOMATICALLY_PAYMENT_CONTROL("completed-automatically-payment-control", "Завершена автоматически"),
    RESERVE_EXTENDED("reserve-extended", "Продлен резерв"),
    RESERVE_CANCELED("reserve-canceled", "Резерв отменен"),
    COMPLETED_AUTOMATICALLY_RESERVE_CONTROL("completed-automatically-reserve-control", "Завершена автоматически"),
    RFP_CREATED("rfp-created", "Создана ЗНП"),
    CLIENT_CANCEL_ORDER_SHIPMENT_RESERVATION("client-cancel-order-shipment-reservation", "Отказ клиента от заказа"),
    COMPLETED_AUTOMATICALLY_SHIPMENT_RESERVATION("completed-automatically-shipment-reservation", "Завершена автоматически"),
    COMPLETED_AUTOMATICALLY("completed-automatically", "Завершена автоматически"),
    EXPECT_PAYMENT("expect-payment", "Ожидание оплаты"),
    CLIENT_CANCEL_ORDER("client-cancel-order", "Отказ клиента от заказа"),
    REQUEST_AVAILABILITY_GOODS("request-availability-goods", "Запрос клиентом цен/наличия товара"),
    MAKING_DELIVERY("making-delivery", "Оформление доставки ТС"),
    SPECIFICATION_APPROVAL("specification-approval", "Согласование спецификации"),
    COMPLETED_AUTOMATICALLY_ORDER_CREATE_INFORM("completed-automatically-order-create-inform", "Завершена автоматически"),
    QUOTATION_ISSUED("quotation-issued", "Отправлено КП"),
    CLIENT_CANCEL_ORDER_QUOTATION("client-cancel-order-quotation", "Клиент отказался/истек срок запроса"),
    REQUIRED_ORDER("required-order", "Требуется заказ"),
    CONSULTATION_PROVIDED("consultation-provided", "Предоставлена консультация"),
    COMPLETED_AUTOMATICALLY_REQUIRED_QUOTATION("completed-automatically-required-quotation", "Завершена автоматически"),
    UNKNOWN("UNKNOWN", "Результат не определён");

    private final String bitrixTaskResultCode; //Тип задачи для Bitrix
    private final String historyBitrixTaskResultDescription; // Описание задачи для отображения в истории заказа

    BitrixTaskResultCode(String bitrixTaskResultCode, String historyBitrixTaskResultDescription) {
        this.bitrixTaskResultCode = bitrixTaskResultCode;
        this.historyBitrixTaskResultDescription = historyBitrixTaskResultDescription;
    }

    public static final Set<BitrixTaskResultCode> CLIENT_NOT_ARRIVED_RESULT_CODES = EnumSet.of(
        SHIPMENT_WITHOUT_CHANGING, SHIPMENT_CHANGED_DATETIME, CLIENT_CANCEL_ORDER_SHIPMENT, COMPLETED_AUTOMATICALLY_SHIPMENT_CONTROL
    );

    public static final Set<BitrixTaskResultCode> ORDER_WITHOUT_PAYMENT_RESULT_CODES = EnumSet.of(
        EXPECT_PAYMENT_ON_TIME, ORDER_PAID, CLIENT_CANCEL_ORDER_PAYMENT, COMPLETED_AUTOMATICALLY_PAYMENT_CONTROL
    );

    public static final Set<BitrixTaskResultCode> ORDER_WITHOUT_INVOICE_RESULT_CODES = EnumSet.of(
        INVOICE_ISSUED, CLIENT_CANCEL_ORDER_INVOICE, INVOICE_ISSUED_LATER, COMPLETED_AUTOMATICALLY_INVOICE_CONTROL
    );

    public static final Set<BitrixTaskResultCode> ORDER_PROLONG_RESERVE_RESULT_CODES = EnumSet.of(
        RESERVE_EXTENDED, RESERVE_CANCELED, COMPLETED_AUTOMATICALLY_RESERVE_CONTROL
    );

    public static final Set<BitrixTaskResultCode> SHIPMENT_SLOT_RESERVE_RESULT_CODES = EnumSet.of(
        RFP_CREATED, CLIENT_CANCEL_ORDER_SHIPMENT_RESERVATION, COMPLETED_AUTOMATICALLY_SHIPMENT_RESERVATION
    );

    public static final Set<BitrixTaskResultCode> SALE_MANAGER_ORDER_CREATED_INFORM_RESULT_CODES = EnumSet.of(
      EXPECT_PAYMENT, CLIENT_CANCEL_ORDER, REQUEST_AVAILABILITY_GOODS, MAKING_DELIVERY, SPECIFICATION_APPROVAL, COMPLETED_AUTOMATICALLY_ORDER_CREATE_INFORM
    );

    public static final Set<BitrixTaskResultCode> REQUIRED_QUOTATION_RESULT_CODES = EnumSet.of(
        QUOTATION_ISSUED, CLIENT_CANCEL_ORDER_QUOTATION, REQUIRED_ORDER, CONSULTATION_PROVIDED, COMPLETED_AUTOMATICALLY_REQUIRED_QUOTATION
    );

    public static BitrixTaskResultCode getBy(String bitrixTaskResultCode) {
        for (var value : values()) {
            if (value.bitrixTaskResultCode.equalsIgnoreCase(bitrixTaskResultCode)) {
                return value;
            }
        }
        return UNKNOWN;
    }
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/http/out/bitrix/BitrixApiConfig.java
Content:
package ru.liga.evraz.bitrix.adapter.http.out.bitrix;

import lombok.extern.slf4j.Slf4j;
import org.apache.http.client.HttpClient;
import org.apache.http.client.config.RequestConfig;
import org.apache.http.config.Registry;
import org.apache.http.config.RegistryBuilder;
import org.apache.http.conn.HttpClientConnectionManager;
import org.apache.http.conn.socket.ConnectionSocketFactory;
import org.apache.http.conn.ssl.SSLConnectionSocketFactory;
import org.apache.http.conn.ssl.TrustStrategy;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;
import org.apache.http.ssl.SSLContexts;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.client.BufferingClientHttpRequestFactory;
import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;
import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;
import org.springframework.web.client.RestTemplate;

import javax.net.ssl.SSLContext;

import static java.util.Collections.singletonList;

@Configuration
@Slf4j
public class BitrixApiConfig {

    private static final int CONNECTION_REQUEST_TIMEOUT = 30000;
    private static final int CONNECT_TIMEOUT = 30000;
    private static final int SOCKET_TIMEOUT = 30000;
    private static final int MAX_TOTAL = 20;
    private static final int DEFAULT_MAX_PER_ROUTE = 20;

    @Value("${evraz.bitrix.ssl.trustall:false}")
    private Boolean useTrustAllClient;


    @Bean
    public PoolingHttpClientConnectionManager poolingHttpClientConnectionManager() {
        final var result = new PoolingHttpClientConnectionManager();
        result.setMaxTotal(MAX_TOTAL);
        result.setDefaultMaxPerRoute(DEFAULT_MAX_PER_ROUTE);
        return result;
    }

    @Bean
    public RequestConfig requestConfig() {
        return RequestConfig.custom()
            .setConnectionRequestTimeout(CONNECTION_REQUEST_TIMEOUT)
            .setConnectTimeout(CONNECT_TIMEOUT)
            .setSocketTimeout(SOCKET_TIMEOUT)
            .build();
    }

    @Bean
    public MappingJackson2HttpMessageConverter converter() {
        final var converter = new MappingJackson2HttpMessageConverter();
        return converter;
    }

    @Bean
    @Qualifier("bitrixHttpClient")
    public CloseableHttpClient bitrixHttpClient(PoolingHttpClientConnectionManager poolingHttpClientConnectionManager,
                                                RequestConfig requestConfig) {
        if (useTrustAllClient) {
            return trustAllBitrixHttpClient(poolingHttpClientConnectionManager, requestConfig);
        }

        return HttpClientBuilder
            .create()
            .setConnectionManager(poolingHttpClientConnectionManager)
            .setDefaultRequestConfig(requestConfig)
            .build();
    }

    @Bean
    @Qualifier("bitrixRestTemplate")
    public RestTemplate restTemplate(HttpClient bitrixHttpClient,
                                     RequestResponseLoggingInterceptor loggingInterceptor) {
        HttpComponentsClientHttpRequestFactory requestFactory = new HttpComponentsClientHttpRequestFactory();
        requestFactory.setHttpClient(bitrixHttpClient);
        RestTemplate restTemplate = new RestTemplate();
        restTemplate.setRequestFactory(new BufferingClientHttpRequestFactory(requestFactory));
        restTemplate.setErrorHandler(new BitrixRestHandler());
        restTemplate.setInterceptors(singletonList(loggingInterceptor));
        return restTemplate;
    }

    private static CloseableHttpClient trustAllBitrixHttpClient(PoolingHttpClientConnectionManager poolingHttpClientConnectionManager, RequestConfig requestConfig) {
        SSLContext sslContext = null;
        try {
            sslContext = SSLContexts.custom()
                    .loadTrustMaterial((TrustStrategy) (x509Certificates, s) -> true)
                    .build();
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        SSLConnectionSocketFactory socketFactory =
                new SSLConnectionSocketFactory(sslContext);
        Registry<ConnectionSocketFactory> reg =
                RegistryBuilder.<ConnectionSocketFactory>create()
                        .register("https", socketFactory)
                        .build();
        HttpClientConnectionManager cm = new PoolingHttpClientConnectionManager(reg);

        return HttpClientBuilder
                .create()
                .setConnectionManager(poolingHttpClientConnectionManager)
                .setDefaultRequestConfig(requestConfig)
                .setConnectionManager(cm)
                .build();
    }
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/http/out/bitrix/BitrixHttpProperties.java
Content:
package ru.liga.evraz.bitrix.adapter.http.out.bitrix;

import lombok.Getter;
import lombok.Setter;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.context.annotation.Configuration;
import org.springframework.validation.annotation.Validated;

import java.util.List;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.PositiveOrZero;
import javax.validation.constraints.Size;

@Configuration
@Validated
@ConfigurationProperties(prefix = "bitrix.http")
@Getter
@Setter
public class BitrixHttpProperties {

    private CreateTaskRequest createTask;
    private CreateGroupTaskProperties createGroupTask = new CreateGroupTaskProperties();
    private UpdateTaskProperties updateTask = new UpdateTaskProperties();
    @NotNull
    private Request request;

    private boolean mocked;
    @PositiveOrZero
    private int retryCount = 1;
    @PositiveOrZero
    private long backOffPeriodMillis = 1000L;
    private boolean active = true;
    private Long createdBy;
    private String techEmail;

    @Valid
    @Getter
    @Setter
    public static class CreateTaskRequest {
        @NotNull
        private String url;
        @NotNull
        @Size(max = 2)
        private List<Long> responsibleIdsForTestTasks;
    }

    @Getter
    @Setter
    public static class CreateGroupTaskProperties {
        private String url = "https://devcrm.emi.evraz.com/rest/1/nd9qczlnkya5tjgy/oms.task.assignment.json";
    }

    @Getter
    @Setter
    public static class UpdateTaskProperties {
        private String url = "https://devcrm.emi.evraz.com/rest/468/cp4ltlkfoe1ypsta/tasks.task.update.json";
    }

    @Valid
    @Getter
    @Setter
    static class Request {
        @NotNull
        private String url;
    }
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/http/out/bitrix/BitrixMapper.java
Content:
package ru.liga.evraz.bitrix.adapter.http.out.bitrix;

import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import ru.liga.evraz.bitrix.adapter.http.out.bitrix.model.CreateTaskRequest;
import ru.liga.evraz.bitrix.adapter.http.out.bitrix.model.group.CreateGroupTaskRequest;
import ru.liga.evraz.bitrix.application.cmd.AbstractTaskCmd;
import ru.liga.evraz.bitrix.application.cmd.CreateGroupTaskCmd;
import ru.liga.evraz.bitrix.application.cmd.CreateManagerTaskCmd;
import ru.liga.evraz.bitrix.common.CommonMapper;

import java.time.*;

@Mapper(componentModel = "spring", uses = CommonMapper.class)
interface BitrixMapper {
    @Mapping(target = "deadline", expression = "java(mapDeadlineTask(source))")
    @Mapping(target = "bitrixTaskTypeCode", source = "type.bitrixTaskTypeCode")
    CreateGroupTaskRequest mapToRequest(CreateGroupTaskCmd source);

    @Mapping(target = "deadline", expression = "java(mapDeadlineTask(source))")
    @Mapping(target = "bitrixTaskTypeCode", source = "type.bitrixTaskTypeCode")
    CreateTaskRequest mapToRequest(CreateManagerTaskCmd source);

    default OffsetDateTime mapDeadlineTask(AbstractTaskCmd source) {
        return mapDeadlineValue(source.getDeadline(), source.getZoneId());
    }

    default OffsetDateTime mapDeadlineValue(OffsetDateTime deadline, String zoneIdValue) {
        if (deadline == null || zoneIdValue == null) {
            return deadline;
        }
        LocalDateTime dt = deadline.toLocalDateTime();
        ZoneId zoneId = ZoneId.of(zoneIdValue);
        ZonedDateTime zdt = dt.atZone(zoneId);
        ZoneOffset zoneOffset = zdt.getOffset();
        return deadline.withOffsetSameInstant(zoneOffset);
    }
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/http/out/bitrix/BitrixRestHandler.java
Content:
package ru.liga.evraz.bitrix.adapter.http.out.bitrix;

import lombok.extern.slf4j.Slf4j;
import org.apache.commons.io.IOUtils;
import org.springframework.http.HttpStatus;
import org.springframework.http.client.ClientHttpResponse;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.client.ResponseErrorHandler;

import java.io.IOException;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;

import static org.springframework.http.HttpStatus.Series.CLIENT_ERROR;
import static org.springframework.http.HttpStatus.Series.SERVER_ERROR;

@Slf4j
class BitrixRestHandler implements ResponseErrorHandler {

    @Override
    public boolean hasError(ClientHttpResponse clientHttpResponse) throws IOException {
        return clientHttpResponse.getStatusCode().series() == CLIENT_ERROR
                || clientHttpResponse.getStatusCode().series() == SERVER_ERROR;
    }

    @Override
    public void handleError(ClientHttpResponse clientHttpResponse) throws IOException {
        InputStream body = clientHttpResponse.getBody();
        String responseBodyAsString = IOUtils.toString(body, StandardCharsets.UTF_8.name());

        if (clientHttpResponse.getStatusCode().series() == SERVER_ERROR) {
            log.error("Custom SERVER_ERROR: message: {}", responseBodyAsString);
            throw new HttpClientErrorException(clientHttpResponse.getStatusCode());
        } else if (clientHttpResponse.getStatusCode().series() == CLIENT_ERROR) {
            log.error("Custom CLIENT_ERROR: status: {} message: {}", clientHttpResponse.getStatusText(),
                    responseBodyAsString);
            if (clientHttpResponse.getStatusCode() == HttpStatus.NOT_FOUND) {
                throw new RuntimeException(responseBodyAsString);
            } else if (clientHttpResponse.getStatusCode() == HttpStatus.CONFLICT) {
                log.error("Conflict on request with message: " + responseBodyAsString);
                throw new IllegalArgumentException(responseBodyAsString);
            }
            throw new RuntimeException(clientHttpResponse.getStatusText() + ". Body: " + responseBodyAsString);
        }
    }

}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/http/out/bitrix/BitrixServiceImpl.java
Content:
package ru.liga.evraz.bitrix.adapter.http.out.bitrix;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import org.springframework.http.*;
import org.springframework.retry.support.RetryTemplate;
import org.springframework.stereotype.Service;
import org.springframework.util.Assert;
import org.springframework.util.CollectionUtils;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.util.UriComponentsBuilder;
import ru.liga.evraz.bitrix.adapter.http.out.bitrix.model.CreateTaskRequest;
import ru.liga.evraz.bitrix.adapter.http.out.bitrix.model.CreateTaskResponse;
import ru.liga.evraz.bitrix.adapter.http.out.bitrix.model.GetResponsibleIdResponse;
import ru.liga.evraz.bitrix.adapter.http.out.bitrix.model.group.CreateGroupTaskRequest;
import ru.liga.evraz.bitrix.adapter.http.out.bitrix.model.group.CreateGroupTaskResponse;
import ru.liga.evraz.bitrix.adapter.http.out.bitrix.model.update.UpdateTaskRequest;
import ru.liga.evraz.bitrix.adapter.http.out.bitrix.model.update.UpdateTaskResponse;
import ru.liga.evraz.bitrix.application.cmd.CreateGroupTaskCmd;
import ru.liga.evraz.bitrix.application.cmd.CreateManagerTaskCmd;
import ru.liga.evraz.bitrix.application.service.BitrixService;
import ru.liga.evraz.bitrix.domain.exception.BitrixUserNotFoundException;

import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

@Service
@RequiredArgsConstructor
@Slf4j
@Validated
class BitrixServiceImpl implements BitrixService {

    private static final String HEADER_TYPE_VALUE_JSON_WITH_ENCODING = "application/json; charset=utf-8";
    private static final String HEADER_TYPE_VALUE_JSON = "application/json; charset=utf-8";

    private final BitrixHttpProperties bitrixProperties;
    private final BitrixMapper mapper;
    private final RestTemplate bitrixRestTemplate;
    private final RetryTemplate retryTemplate;

    @Override
    public String createManagerTask(CreateManagerTaskCmd cmd) {
        String url = bitrixProperties.getCreateTask().getUrl();
        CreateTaskRequest request = mapper.mapToRequest(cmd);

        ResponseEntity<CreateTaskResponse> entity = performTaskRequest(url, request, CreateTaskResponse.class);
        if (entity != null && entity.getStatusCode().is2xxSuccessful() && entity.getBody() != null
            && StringUtils.isNotBlank(entity.getBody().getResult())) {
            return entity.getBody().getResult();
        }

        return null;
    }

    @Override
    public String createGroupTask(CreateGroupTaskCmd cmd) {
        String url = bitrixProperties.getCreateGroupTask().getUrl();
        CreateGroupTaskRequest request = mapper.mapToRequest(cmd);

        ResponseEntity<CreateGroupTaskResponse> entity = performTaskRequest(url, request, CreateGroupTaskResponse.class);
        if (entity != null && entity.getStatusCode().is2xxSuccessful() && entity.getBody() != null
            && entity.getBody().isSuccessful()) {
            return entity.getBody().getResult().getTaskId();
        }

        return null;
    }

    @Override
    public Long findResponsibleId(String email) {
        final var headers = buildHttpHeaders();
        final var entity = new HttpEntity<>(headers);

        var urlTemplate = UriComponentsBuilder.fromHttpUrl(bitrixProperties.getRequest().getUrl())
            .queryParam("email", "{email}")
            .queryParam("active", "{active}")
            .encode()
            .toUriString();

        final var active = bitrixProperties.isActive();

        Map<String, Object> params = new HashMap<>();
        params.put("email", email);
        params.put("active", active);

        final var bitrixResponse = bitrixRestTemplate.exchange(urlTemplate, HttpMethod.GET, entity,
            GetResponsibleIdResponse.class, params).getBody();

        if (CollectionUtils.isEmpty(Objects.requireNonNull(bitrixResponse).getResult())) {
            throw new BitrixUserNotFoundException(
                String.format("Can't find user in bitrix by email: %s", email));
        }
        final var responsibleId = bitrixResponse.getResult().get(0).getId();

        return Long.valueOf(responsibleId);
    }

    @Override
    public Boolean cancelTask(Long taskId) {
        Assert.notNull(taskId, "task id is null");

        log.info("Try to cancel task in bitrix {}", taskId);

        String url = bitrixProperties.getUpdateTask().getUrl();

        HttpHeaders headers = buildHttpHeaders();
        HttpEntity<UpdateTaskRequest> entity = new HttpEntity<>(UpdateTaskRequest.buildCancelRequest(taskId, bitrixProperties.getCreatedBy()), headers);

        ResponseEntity<UpdateTaskResponse> response = bitrixRestTemplate.exchange(url, HttpMethod.POST, entity, UpdateTaskResponse.class);
        if (HttpStatus.OK.equals(response.getStatusCode())) {
            log.info("Task canceled in bitrix {}", taskId);
            return true;
        }

        log.error("Cant cancel task {}, response status {}", taskId, response.getStatusCode());
        return false;
    }

    private <T> ResponseEntity<T> performTaskRequest(String url, Object body, Class<T> responseType) {
        HttpHeaders headers = buildHttpHeaders();

        HttpEntity<Object> entity = new HttpEntity<>(body, headers);

        return retryTemplate.execute(context -> {
            if (context.getRetryCount() > 0) {
                log.warn("start retry...");
            }
            return bitrixRestTemplate.exchange(url, HttpMethod.POST, entity, responseType);
        });
    }

    private static HttpHeaders buildHttpHeaders() {
        HttpHeaders headers = new HttpHeaders();
        headers.add(HttpHeaders.CONTENT_TYPE, HEADER_TYPE_VALUE_JSON_WITH_ENCODING);
        headers.add(HttpHeaders.ACCEPT, HEADER_TYPE_VALUE_JSON);
        return headers;
    }
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/http/out/bitrix/RequestResponseLoggingInterceptor.java
Content:
package ru.liga.evraz.bitrix.adapter.http.out.bitrix;

import lombok.extern.slf4j.Slf4j;
import org.slf4j.Marker;
import org.slf4j.MarkerFactory;
import org.springframework.http.HttpRequest;
import org.springframework.http.client.ClientHttpRequestExecution;
import org.springframework.http.client.ClientHttpRequestInterceptor;
import org.springframework.http.client.ClientHttpResponse;
import org.springframework.stereotype.Component;
import org.springframework.util.StreamUtils;

import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;

@Slf4j
@Component
class RequestResponseLoggingInterceptor implements ClientHttpRequestInterceptor {
    private final Marker marker = MarkerFactory.getMarker("BUSINESS");

    @Override
    public ClientHttpResponse intercept(HttpRequest request, byte[] body, ClientHttpRequestExecution execution)
            throws IOException {
        logRequest(request, body);
        ClientHttpResponse response = execution.execute(request, body);
        logResponse(request, response);
        return response;
    }

    private void logRequest(HttpRequest request, byte[] body) throws IOException {
        log.info(marker, "{} |> {} body: {}", request.getURI(), request.getMethod(), new String(body, StandardCharsets.UTF_8));
    }

    private void logResponse(HttpRequest request, ClientHttpResponse response) throws IOException {
        log.info(marker, "{} |< status: {} {} body: {}", request.getURI(), response.getStatusCode(), response.getStatusText(),
                StreamUtils.copyToString(response.getBody(), Charset.defaultCharset()));
    }
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/http/out/bitrix/RetryConfig.java
Content:
package ru.liga.evraz.bitrix.adapter.http.out.bitrix;

import lombok.RequiredArgsConstructor;
import org.springframework.classify.Classifier;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpStatus;
import org.springframework.retry.RetryPolicy;
import org.springframework.retry.backoff.FixedBackOffPolicy;
import org.springframework.retry.policy.ExceptionClassifierRetryPolicy;
import org.springframework.retry.policy.NeverRetryPolicy;
import org.springframework.retry.policy.SimpleRetryPolicy;
import org.springframework.retry.support.RetryTemplate;
import org.springframework.web.client.HttpStatusCodeException;

@Configuration
@RequiredArgsConstructor
class RetryConfig {

    private final BitrixHttpProperties bitrixHttpProperties;
    private final NeverRetryPolicy neverRetryPolicy = new NeverRetryPolicy();

    @Bean
    public RetryTemplate retryTemplate() {
        final var retryTemplate = new RetryTemplate();

        final var simpleRetryPolicy = new SimpleRetryPolicy(bitrixHttpProperties.getRetryCount());

        final var policy = new ExceptionClassifierRetryPolicy();
        policy.setExceptionClassifier(configureStatusCodeBasedRetryPolicy(simpleRetryPolicy));
        retryTemplate.setRetryPolicy(policy);

        final var  fixedBackOffPolicy = new FixedBackOffPolicy();
        fixedBackOffPolicy.setBackOffPeriod(bitrixHttpProperties.getBackOffPeriodMillis());
        retryTemplate.setBackOffPolicy(fixedBackOffPolicy);

        return retryTemplate;
    }

    private Classifier<Throwable, RetryPolicy> configureStatusCodeBasedRetryPolicy(final RetryPolicy retryPolicy) {
        return throwable -> {
            if (throwable instanceof final HttpStatusCodeException exception) {
                return getRetryPolicyForStatus(exception.getStatusCode(), retryPolicy);
            }
            return retryPolicy;
        };
    }

    private RetryPolicy getRetryPolicyForStatus(final HttpStatus httpStatus, final RetryPolicy retryPolicy) {
        return switch (httpStatus) {
            case BAD_GATEWAY, SERVICE_UNAVAILABLE, INTERNAL_SERVER_ERROR, GATEWAY_TIMEOUT -> retryPolicy;
            default -> neverRetryPolicy;
        };
    }
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/http/out/bitrix/model/CreateTaskRequest.java
Content:
package ru.liga.evraz.bitrix.adapter.http.out.bitrix.model;

import com.fasterxml.jackson.annotation.JsonAlias;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.time.OffsetDateTime;

@Builder
@Data
@AllArgsConstructor
@NoArgsConstructor
@JsonTypeInfo(include = JsonTypeInfo.As.WRAPPER_OBJECT, use = JsonTypeInfo.Id.NAME)
@JsonTypeName(value = "arNewTaskData")
public class CreateTaskRequest {

    @JsonProperty("TITLE")
    @JsonAlias("title")
    private String title;

    @JsonProperty("DESCRIPTION")
    @JsonAlias("description")
    private String description;

    @JsonProperty("RESPONSIBLE_ID")
    @JsonAlias("responsibleId")
    private Long responsibleId;

    @JsonProperty("DEADLINE")
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ssXXX")
    @JsonAlias("deadline")
    private OffsetDateTime deadline;

    @JsonProperty("CREATED_BY")
    @JsonAlias("createdBy")
    private Long createdBy;

    @JsonProperty("UF_OMS_TASK_TYPE_CODE")
    private String bitrixTaskTypeCode;
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/http/out/bitrix/model/CreateTaskResponse.java
Content:
package ru.liga.evraz.bitrix.adapter.http.out.bitrix.model;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;

@Builder
@Getter
@AllArgsConstructor
@NoArgsConstructor
public class CreateTaskResponse {
    private String result;
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/http/out/bitrix/model/GetResponsibleIdResponse.java
Content:
package ru.liga.evraz.bitrix.adapter.http.out.bitrix.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;

import java.util.List;

@Builder
@Getter
@AllArgsConstructor
@NoArgsConstructor
public class GetResponsibleIdResponse {

    @JsonProperty("result")
    private List<UserDto> result;

    @Builder
    @Getter
    @AllArgsConstructor
    @NoArgsConstructor
    public static class UserDto {

        @JsonProperty("ID")
        private String id;
    }
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/http/out/bitrix/model/update/UpdatePropertiesDto.java
Content:
package ru.liga.evraz.bitrix.adapter.http.out.bitrix.model.update;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import lombok.AllArgsConstructor;
import lombok.Getter;
import ru.liga.evraz.bitrix.adapter.http.out.bitrix.model.update.json.TaskExecutionStatusDeserializer;
import ru.liga.evraz.bitrix.adapter.http.out.bitrix.model.update.json.TaskExecutionStatusSerializer;
import ru.liga.evraz.bitrix.domain.model.TaskExecutionStatus;


@AllArgsConstructor
@Getter
public class UpdatePropertiesDto {
    @JsonProperty("STATUS")
    @JsonSerialize(using = TaskExecutionStatusSerializer.class)
    @JsonDeserialize(using = TaskExecutionStatusDeserializer.class)
    private TaskExecutionStatus status;

    @JsonProperty("CLOSED_BY")
    private Long closedBy;

    @JsonProperty("UF_OMS_TASK_RESULT")
    private String bitrixTaskResultCode;
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/http/out/bitrix/model/update/UpdateTaskInfoDto.java
Content:
package ru.liga.evraz.bitrix.adapter.http.out.bitrix.model.update;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;

@Getter
@AllArgsConstructor
@NoArgsConstructor
public class UpdateTaskInfoDto {
    private String id;
    private String status;
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/http/out/bitrix/model/update/UpdateTaskRequest.java
Content:
package ru.liga.evraz.bitrix.adapter.http.out.bitrix.model.update;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.AllArgsConstructor;
import lombok.Getter;
import ru.liga.evraz.bitrix.adapter.http.out.enums.BitrixTaskResultCode;
import ru.liga.evraz.bitrix.domain.model.TaskExecutionStatus;

@Getter
@AllArgsConstructor
public class UpdateTaskRequest {
    @JsonProperty("taskId")
    private Long taskId;

    @JsonProperty("fields")
    private UpdatePropertiesDto fields;

    public static UpdateTaskRequest buildCancelRequest(Long taskId, Long createdBy) {
        return new UpdateTaskRequest(taskId, new UpdatePropertiesDto(TaskExecutionStatus.DONE, createdBy, BitrixTaskResultCode.COMPLETED_AUTOMATICALLY.getBitrixTaskResultCode()));
    }

}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/http/out/bitrix/model/update/UpdateTaskResponse.java
Content:
package ru.liga.evraz.bitrix.adapter.http.out.bitrix.model.update;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;

@Getter
@AllArgsConstructor
@NoArgsConstructor
public class UpdateTaskResponse {
    private UpdateTaskResultDto result;
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/http/out/bitrix/model/update/UpdateTaskResultDto.java
Content:
package ru.liga.evraz.bitrix.adapter.http.out.bitrix.model.update;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;

@Getter
@AllArgsConstructor
@NoArgsConstructor
public class UpdateTaskResultDto {
    private UpdateTaskInfoDto task;
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/http/out/bitrix/model/update/json/TaskExecutionStatusDeserializer.java
Content:
package ru.liga.evraz.bitrix.adapter.http.out.bitrix.model.update.json;

import com.fasterxml.jackson.core.JacksonException;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonDeserializer;
import lombok.extern.slf4j.Slf4j;
import ru.liga.evraz.bitrix.domain.model.TaskExecutionStatus;

import java.io.IOException;

@Slf4j
public class TaskExecutionStatusDeserializer extends JsonDeserializer<TaskExecutionStatus> {
    @Override
    public TaskExecutionStatus deserialize(JsonParser jsonParser, DeserializationContext deserializationContext) throws IOException, JacksonException {
        String text = jsonParser.getText();
        if (text != null) {
            TaskExecutionStatus status = TaskExecutionStatus.valueOf(text);
            if (TaskExecutionStatus.UNKNOWN.equals(status)) {
                log.error("Received unknown status: {}, using UNKNOWN", text);
            }
            return status;
        }

        return null;
    }
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/http/out/bitrix/model/update/json/TaskExecutionStatusSerializer.java
Content:
package ru.liga.evraz.bitrix.adapter.http.out.bitrix.model.update.json;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.SerializerProvider;
import ru.liga.evraz.bitrix.domain.model.TaskExecutionStatus;

import java.io.IOException;


public class TaskExecutionStatusSerializer extends JsonSerializer<TaskExecutionStatus> {
    @Override
    public void serialize(TaskExecutionStatus taskExecutionStatus, JsonGenerator jsonGenerator, SerializerProvider serializerProvider) throws IOException {
        Integer value = taskExecutionStatus.getErpStatusId() != null ? Integer.valueOf(taskExecutionStatus.getErpStatusId()) : null;
        jsonGenerator.writeObject(value);
    }
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/http/out/bitrix/model/group/BitrixResponseTimeDto.java
Content:
package ru.liga.evraz.bitrix.adapter.http.out.bitrix.model.group;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;

@AllArgsConstructor
@NoArgsConstructor
@Getter
public class BitrixResponseTimeDto {
    private Double start;
    private Double finish;
    private Double duration;
    private Double processing;

    @JsonProperty("date_start")
    private String dateStart;

    @JsonProperty("date_finish")
    private String dateFinish;
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/http/out/bitrix/model/group/CreateGroupTaskRequest.java
Content:
package ru.liga.evraz.bitrix.adapter.http.out.bitrix.model.group;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.AllArgsConstructor;
import lombok.Getter;

import java.time.OffsetDateTime;

@Getter
@AllArgsConstructor
public class CreateGroupTaskRequest {
    @JsonProperty("ROLE")
    private String role;

    @JsonProperty("BRANCH")
    private String branch;

    @JsonProperty("TITLE")
    private String title;

    @JsonProperty("CREATED_BY")
    private Long createdBy;

    @JsonProperty("DEADLINE")
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "dd.MM.yyyy HH:mm:ss")
    private OffsetDateTime deadline;

    @JsonProperty("DESCRIPTION")
    private String description;

    @JsonProperty("UF_OMS_TASK_TYPE_CODE")
    private String bitrixTaskTypeCode;
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/http/out/bitrix/model/group/CreateGroupTaskResponse.java
Content:
package ru.liga.evraz.bitrix.adapter.http.out.bitrix.model.group;

import com.fasterxml.jackson.annotation.JsonIgnore;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import org.apache.commons.lang3.StringUtils;

@Getter
@AllArgsConstructor
@NoArgsConstructor
public class CreateGroupTaskResponse {
    private GroupTaskResultDto result;

    private BitrixResponseTimeDto time;

    @JsonIgnore
    public Boolean isSuccessful() {
        return result != null && result.getError() == null && StringUtils.isNotBlank(result.getTaskId());
    }
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/http/out/bitrix/model/group/GroupTaskResultDto.java
Content:
package ru.liga.evraz.bitrix.adapter.http.out.bitrix.model.group;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;

@NoArgsConstructor
@AllArgsConstructor
@Getter
public class GroupTaskResultDto {
    @JsonProperty("TASK_ID")
    private String taskId;

    @JsonProperty("ERROR")
    private String error;
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/http/in/RestExceptionHandler.java
Content:
package ru.liga.evraz.bitrix.adapter.http.in;

import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import lombok.Builder;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestControllerAdvice;
import ru.liga.evraz.bitrix.domain.exception.BitrixUserNotFoundException;

import javax.validation.ConstraintViolationException;
import javax.validation.ValidationException;

@RestControllerAdvice
@ConditionalOnWebApplication
@Slf4j
public class RestExceptionHandler {

    @ExceptionHandler(MethodArgumentNotValidException.class)
    ResponseEntity<?> processRuntimeException(MethodArgumentNotValidException e) {
        final var status = HttpStatus.BAD_REQUEST;
        final var fault = Fault.builder()
            .code(status.name())
            .details(e.getMessage())
            .build();

        log.error("Fault: {}", fault, e);

        return new ResponseEntity<>(fault, status);
    }

    @ExceptionHandler(ConstraintViolationException.class)
    ResponseEntity<?> processRuntimeException(ConstraintViolationException e) {
        final var status = HttpStatus.BAD_REQUEST;
        final var fault = Fault.builder()
            .code(status.name())
            .details(e.getMessage())
            .build();

        log.error("Fault: {}", fault, e);

        return new ResponseEntity<>(fault, status);
    }

    @ExceptionHandler(RuntimeException.class)
    ResponseEntity<?> processRuntimeException(RuntimeException e) {
        final var fault = Fault.builder()
            .code(HttpStatus.INTERNAL_SERVER_ERROR.name())
            .details(e.getMessage())
            .build();

        log.error("Fault: {}", fault, e);

        return new ResponseEntity<>(fault, HttpStatus.INTERNAL_SERVER_ERROR);
    }

    @ExceptionHandler(ValidationException.class)
    ResponseEntity<?> processRuntimeException(ValidationException e) {
        final var status = HttpStatus.BAD_REQUEST;
        final var fault = Fault.builder()
                .code(status.name())
                .details(e.getMessage())
                .build();

        log.error("Fault: {}", fault, e);

        return new ResponseEntity<>(fault, status);
    }

    @ExceptionHandler(BitrixUserNotFoundException.class)
    ResponseEntity<?> processBitrixUserNotFoundException(BitrixUserNotFoundException e) {
        final var status = HttpStatus.NOT_FOUND;
        final var fault = Fault.builder()
            .code(status.name())
            .details(e.getMessage())
            .build();

        log.error("Fault: {}", fault, e);

        return new ResponseEntity<>(fault, status);
    }

    @Builder
    @Getter
    @JsonTypeInfo(include = JsonTypeInfo.As.WRAPPER_OBJECT, use = JsonTypeInfo.Id.NAME)
    @JsonTypeName(value = "fault")
    private static class Fault {
        private String code;
        private String details;

        @Override
        public String toString() {
            return String.format("Fault { Code: %s, Details: %s }", this.code, this.details);
        }
    }
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/http/in/TaskController.java
Content:
package ru.liga.evraz.bitrix.adapter.http.in;

import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RestController;
import ru.liga.evraz.bitrix.adapter.http.out.bitrix.BitrixHttpProperties;
import ru.liga.evraz.bitrix.api.adapter.in.http.TaskApi;
import ru.liga.evraz.bitrix.api.adapter.in.http.model.CancelOrderTasksRequestHttp;
import ru.liga.evraz.bitrix.api.adapter.in.http.model.CancelOrderTasksResponseHttp;
import ru.liga.evraz.bitrix.api.adapter.in.http.model.CreateGroupTaskRequestHttp;
import ru.liga.evraz.bitrix.api.adapter.in.http.model.CreateManagerTaskRequestHttp;
import ru.liga.evraz.bitrix.api.adapter.in.http.model.CreateTaskResponseHttp;
import ru.liga.evraz.bitrix.api.adapter.in.http.model.FindUserInfoResponseHttp;
import ru.liga.evraz.bitrix.api.adapter.in.http.model.GetOrderBitrixTaskHttp;
import ru.liga.evraz.bitrix.api.adapter.in.http.model.GetOrderBitrixTaskRequestHttp;
import ru.liga.evraz.bitrix.api.adapter.in.http.model.GetOrderBitrixTaskResponseHttp;
import ru.liga.evraz.bitrix.api.adapter.in.http.model.GetOrderBitrixTasksDataHttp;
import ru.liga.evraz.bitrix.application.CancelTaskUseCase;
import ru.liga.evraz.bitrix.application.CreateTaskUseCase;
import ru.liga.evraz.bitrix.application.GetOrderTasksUseCase;
import ru.liga.evraz.bitrix.application.cmd.CancelOrderTasksCmd;
import ru.liga.evraz.bitrix.application.cmd.CreateGroupTaskCmd;
import ru.liga.evraz.bitrix.application.cmd.CreateManagerTaskCmd;
import ru.liga.evraz.bitrix.application.cmd.GetOrderTasksCmd;
import ru.liga.evraz.bitrix.domain.model.BitrixTask;

import java.util.List;

@RestController
@Validated
@RequiredArgsConstructor
class TaskController implements TaskApi {

    private final BitrixHttpProperties properties;

    // Mappers
    private final TaskMapper taskMapper;
    // UseCases
    private final CreateTaskUseCase ucCreateTask;
    private final CancelTaskUseCase cancelTaskUseCase;
    private final GetOrderTasksUseCase getOrderTasksUseCase;

    @Override
    public ResponseEntity<GetOrderBitrixTaskResponseHttp> getCreatedTasksForOrder(GetOrderBitrixTaskRequestHttp getOrderBitrixTaskRequestHttp) {
        final GetOrderTasksCmd cmd = taskMapper.mapToGetOrderTasksCmd(getOrderBitrixTaskRequestHttp);
        final List<BitrixTask> orderTasks = getOrderTasksUseCase.getOrderTasks(cmd);

        final List<GetOrderBitrixTaskHttp> tasks = taskMapper.mapToGetOrderBitrixTasksDataHttp(orderTasks);

        return ResponseEntity.ok(GetOrderBitrixTaskResponseHttp.builder()
            .payload(GetOrderBitrixTasksDataHttp.builder()
                .tasks(tasks)
                .build())
            .fault(null)
            .build());
    }

    @Override
    public ResponseEntity<CreateTaskResponseHttp> createGroupTask(CreateGroupTaskRequestHttp createGroupTaskRequestHttp) {
        CreateGroupTaskCmd cmd = taskMapper.mapToCreateGroupTaskCmd(createGroupTaskRequestHttp, properties.getCreatedBy());
        String taskId = ucCreateTask.createGroupTask(cmd);

        return ResponseEntity.ok(buildResponse(taskId));
    }

    @Override
    public ResponseEntity<CreateTaskResponseHttp> createManagerTask(CreateManagerTaskRequestHttp createManagerTaskRequestHttp) {
        CreateManagerTaskCmd cmd = taskMapper.mapToCreateManagerTaskCmd(createManagerTaskRequestHttp, properties.getCreatedBy());
        String taskId = ucCreateTask.createManagerTask(cmd);

        return ResponseEntity.ok(buildResponse(taskId));
    }

    @Override
    public ResponseEntity<FindUserInfoResponseHttp> findUserInfo(String email) {
        Long responsibleId = ucCreateTask.findResponsibleId(email);

        FindUserInfoResponseHttp response = FindUserInfoResponseHttp.builder()
                .responsibleId(responsibleId)
                .build();

        return ResponseEntity.ok(response);
    }

    @Override
    public ResponseEntity<CancelOrderTasksResponseHttp> cancelTasks(CancelOrderTasksRequestHttp cancelOrderTasksRequestHttp) {
        CancelOrderTasksCmd cmd = taskMapper.mapToCancelOrderTasksCmd(cancelOrderTasksRequestHttp);
        Boolean result = cancelTaskUseCase.cancelOrderTasks(cmd);

        return ResponseEntity.ok(CancelOrderTasksResponseHttp.builder().success(result).build());
    }

    private CreateTaskResponseHttp buildResponse(String taskId) {
        return CreateTaskResponseHttp.builder()
                .id(taskId)
                .build();
    }
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/http/in/TaskMapper.java
Content:
package ru.liga.evraz.bitrix.adapter.http.in;

import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import ru.liga.evraz.bitrix.api.adapter.in.http.model.CancelOrderTasksRequestHttp;
import ru.liga.evraz.bitrix.api.adapter.in.http.model.CreateGroupTaskRequestHttp;
import ru.liga.evraz.bitrix.api.adapter.in.http.model.CreateManagerTaskRequestHttp;
import ru.liga.evraz.bitrix.api.adapter.in.http.model.GetOrderBitrixTaskHttp;
import ru.liga.evraz.bitrix.api.adapter.in.http.model.GetOrderBitrixTaskRequestHttp;
import ru.liga.evraz.bitrix.application.cmd.CancelOrderTasksCmd;
import ru.liga.evraz.bitrix.application.cmd.CreateGroupTaskCmd;
import ru.liga.evraz.bitrix.application.cmd.CreateManagerTaskCmd;
import ru.liga.evraz.bitrix.application.cmd.GetOrderTasksCmd;
import ru.liga.evraz.bitrix.common.CommonMapper;
import ru.liga.evraz.bitrix.domain.model.BitrixTask;

import java.util.List;

@Mapper(componentModel = "spring", uses = CommonMapper.class)
interface TaskMapper {

    @Mapping(target = "zoneId", constant = "Etc/GMT-3")
    @Mapping(target = "createdBy", source = "createdBy")
    CreateGroupTaskCmd mapToCreateGroupTaskCmd(CreateGroupTaskRequestHttp source, Long createdBy);

    @Mapping(target = "zoneId", constant = "Etc/GMT-3")
    @Mapping(target = "createdBy", source = "createdBy")
    CreateManagerTaskCmd mapToCreateManagerTaskCmd(CreateManagerTaskRequestHttp source, Long createdBy);

    CancelOrderTasksCmd mapToCancelOrderTasksCmd(CancelOrderTasksRequestHttp source);

    GetOrderTasksCmd mapToGetOrderTasksCmd(GetOrderBitrixTaskRequestHttp source);

    List<GetOrderBitrixTaskHttp> mapToGetOrderBitrixTasksDataHttp(List<BitrixTask> tasks);
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/http/in/doc/OpenApi30Config.java
Content:
package ru.liga.evraz.bitrix.adapter.http.in.doc;

import io.swagger.v3.oas.annotations.OpenAPIDefinition;
import io.swagger.v3.oas.annotations.enums.SecuritySchemeType;
import io.swagger.v3.oas.annotations.info.Info;
import io.swagger.v3.oas.annotations.security.SecurityScheme;
import org.springframework.context.annotation.Configuration;

@Configuration
@OpenAPIDefinition(info = @Info(title = "bitrix-adapter", version = "v1"))
@SecurityScheme(
    name = "bearerAuth",
    type = SecuritySchemeType.HTTP,
    bearerFormat = "JWT",
    scheme = "bearer"
)
public class OpenApi30Config {

}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/db/ArmMetrics.java
Content:
package ru.liga.evraz.bitrix.adapter.db;

import io.micrometer.core.instrument.MeterRegistry;
import io.micrometer.core.instrument.Tag;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.RandomUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.kafka.common.Uuid;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;
import ru.liga.evraz.bitrix.adapter.db.entity.BitrixTaskEntity;
import ru.liga.evraz.bitrix.adapter.db.entity.BitrixTaskType;
import ru.liga.evraz.bitrix.adapter.db.entity.MetricConfigEntity;

import java.time.Clock;
import java.time.Duration;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.function.Predicate;
import java.util.stream.Collectors;
import javax.annotation.PostConstruct;

import static org.apache.commons.lang3.StringUtils.SPACE;

@Component
@RequiredArgsConstructor
@Slf4j
public class ArmMetrics {

    private static final BitrixTaskType[] ARM_TYPES = BitrixTaskType.values();
    private static final String TASK_TYPE_CODE = "taskTypeCode";
    private static final String ALL_TASKS_COUNT_PER_COLLECT = "arm_task_all_count";
    private static final String FAILED_TO_SEND_TASKS_COUNT_PER_COLLECT = "arm_task_failed_to_sent";
    private static final String SUCCESSFULLY_SENT_TASKS_COUNT_PER_COLLECT = "arm_task_successfully_sent";
    private static final String CANCELLED_TASKS_COUNT_PER_COLLECT = "arm_task_cancelled";

    private final Clock clock;
    private final BitrixTaskJpaRepository armTaskJpaRepo;

    private final MetricsConfigRepo metricsConfigRepo;

    private final MeterRegistry meterRegistry;

    final AtomicInteger allArmTasksCount = new AtomicInteger(0);

    ConcurrentHashMap<String, AtomicInteger> gaugeMetric2value = new ConcurrentHashMap<>();

    @Value("${bitrix.tasks.metrics.period:PT1M}")
    private Duration duration;

    @Value("${bitrix.tasks.metrics.enabled:true}")
    private Boolean metricsEnabled;

    @Value("${bitrix.tasks.metrics.is-test:false}")
    private Boolean metricsTest;

    @PostConstruct
    public void initMetrics() {

        if (metricsEnabled) {

            final var allTasksPerPeriod = getAllArmTasksPerPeriod();

            final var allTasksPerPeriodCount = allTasksPerPeriod.size();
            allArmTasksCount.getAndSet(allTasksPerPeriodCount);
            meterRegistry.gauge(ALL_TASKS_COUNT_PER_COLLECT, Set.of(Tag.of(TASK_TYPE_CODE, "all")), allArmTasksCount);

            // All 4 ARM typeCode
            final Map<String, List<BitrixTaskEntity>> allByType = collectAndGroupByType(
                List.of(),
                bte -> true);
            // Successfully sent 4 ARM typeCode
            final Map<String, List<BitrixTaskEntity>> successSentByType = collectAndGroupByType(
                List.of(),
                bte -> StringUtils.isNotBlank(bte.getBitrixId()));
            // Cancelled 4 ARM typeCode
            final Map<String, List<BitrixTaskEntity>> cancelledByType = collectAndGroupByType(
                List.of(),
                bte -> Boolean.FALSE.equals(bte.getActive()) || Boolean.TRUE.equals(bte.getCancelled()));
            // Failed 4 ARM typeCode
            final Map<String, List<BitrixTaskEntity>> failedToSentByType = collectAndGroupByType(
                List.of(),
                bte -> StringUtils.isBlank(bte.getBitrixId()));

            for (final var type : ARM_TYPES) {
                fillGaugeMetricForType(ALL_TASKS_COUNT_PER_COLLECT, type, allByType);
                fillGaugeMetricForType(SUCCESSFULLY_SENT_TASKS_COUNT_PER_COLLECT, type, successSentByType);
                fillGaugeMetricForType(FAILED_TO_SEND_TASKS_COUNT_PER_COLLECT, type, failedToSentByType);
                fillGaugeMetricForType(CANCELLED_TASKS_COUNT_PER_COLLECT, type, cancelledByType);
            }
        }

    }

    private List<BitrixTaskEntity> getAllArmTasksPerPeriod() {
        final var currentDateTime = LocalDateTime.now(clock);
        final var metricsConfigSelectionDelta = getSelectionDeltaFromDbOrDefault();
        final var allTasksPerPeriod = new ArrayList<BitrixTaskEntity>();

        if (!metricsTest) {
            allTasksPerPeriod.addAll(
                armTaskJpaRepo.findAllByCreatedAtIsLessThanEqualAndCreatedAtIsGreaterThan(
                    currentDateTime,
                    currentDateTime.minus(metricsConfigSelectionDelta))
            );
        } else {
            generateDataForTest(allTasksPerPeriod);
        }
        return allTasksPerPeriod;
    }

    private Duration getSelectionDeltaFromDbOrDefault() {
        return metricsConfigRepo.findAll().stream()
            .findFirst()
            .map(MetricConfigEntity::getSelectionDelta)
            .map(Duration::parse)
            .orElse(duration);
    }

    @Scheduled(cron = "${bitrix.tasks.metrics.collectorCron:0/5 * * * * *}")
    public void collectArmTaskMetrics() {
        if (metricsEnabled) {
            final var allArmTaskPerPeriod = getAllArmTasksPerPeriod();

            final var allTasksPerHour = allArmTaskPerPeriod.size();
            allArmTasksCount.getAndSet(allTasksPerHour);

            // All 4 ARM typeCode
            final Map<String, List<BitrixTaskEntity>> allByType = collectAndGroupByType(
                allArmTaskPerPeriod,
                bte -> true);
            // Successfully sent 4 ARM typeCode
            final Map<String, List<BitrixTaskEntity>> successSentByType = collectAndGroupByType(
                allArmTaskPerPeriod,
                bte -> StringUtils.isNotBlank(bte.getBitrixId()));
            // Cancelled 4 ARM typeCode
            final Map<String, List<BitrixTaskEntity>> cancelledByType = collectAndGroupByType(
                allArmTaskPerPeriod,
                bte -> Boolean.FALSE.equals(bte.getActive()) || Boolean.TRUE.equals(bte.getCancelled()));
            // Failed 4 ARM typeCode
            final Map<String, List<BitrixTaskEntity>> failedToSentByType = collectAndGroupByType(
                allArmTaskPerPeriod,
                bte -> StringUtils.isBlank(bte.getBitrixId()));

            for (final var type : ARM_TYPES) {
                fillGaugeMetricForType(ALL_TASKS_COUNT_PER_COLLECT, type, allByType);
                fillGaugeMetricForType(SUCCESSFULLY_SENT_TASKS_COUNT_PER_COLLECT, type, successSentByType);
                fillGaugeMetricForType(FAILED_TO_SEND_TASKS_COUNT_PER_COLLECT, type, failedToSentByType);
                fillGaugeMetricForType(CANCELLED_TASKS_COUNT_PER_COLLECT, type, cancelledByType);
            }
        }
    }

    private static void generateDataForTest(ArrayList<BitrixTaskEntity> allArmTaskPerPeriod) {
        final var randomLastHourTasks = new ArrayList<BitrixTaskEntity>();
        int counter = RandomUtils.nextInt(0, 100);
        while (counter > 0) {
            final var armTypes = BitrixTaskType.values();
            final var armTypesSize = armTypes.length;

            final var bitrixTaskEntity = new BitrixTaskEntity();
            bitrixTaskEntity.setId(Uuid.randomUuid().toString());
            bitrixTaskEntity.setBitrixTaskTypeCode(armTypes[RandomUtils.nextInt(0, armTypesSize)].getBitrixTaskTypeCode());
            final var bitrixId = RandomUtils.nextBoolean() ? null : String.valueOf(RandomUtils.nextInt(0, Integer.MAX_VALUE));
            bitrixTaskEntity.setBitrixId(bitrixId);
            bitrixTaskEntity.setActive(RandomUtils.nextBoolean());
            bitrixTaskEntity.setCancelled(RandomUtils.nextBoolean());
            bitrixTaskEntity.setNeedSendToBitrix(StringUtils.isNotBlank(bitrixId));
            randomLastHourTasks.add(bitrixTaskEntity);
            counter--;
        }
        allArmTaskPerPeriod.addAll(randomLastHourTasks);
    }

    private void fillGaugeMetricForType(String metricName, BitrixTaskType type, Map<String, List<BitrixTaskEntity>> dataByType4Metrics) {
        final var key = metricName + SPACE + type.getBitrixTaskTypeCode();

        final int value = Optional.ofNullable(dataByType4Metrics.get(type.getBitrixTaskTypeCode()))
            .map(List::size)
            .orElse(0);

        if (gaugeMetric2value.containsKey(key)) {
            final var atomicInt = gaugeMetric2value.get(key);
            atomicInt.getAndSet(value);
        } else {
            final var atomicValue = new AtomicInteger(value);
            gaugeMetric2value.put(key, atomicValue);
            meterRegistry.gauge(metricName, Set.of(Tag.of(TASK_TYPE_CODE, type.getBitrixTaskTypeCode())), atomicValue);
        }
    }

    private Map<String, List<BitrixTaskEntity>> collectAndGroupByType(Collection<BitrixTaskEntity> collection,
                                                                      Predicate<? super BitrixTaskEntity> filterPredicate) {
        return collection.stream()
            .filter(filterPredicate)
            .collect(Collectors.groupingBy(BitrixTaskEntity::getBitrixTaskTypeCode));
    }
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/db/BitrixTaskHistoryJpaRepository.java
Content:
package ru.liga.evraz.bitrix.adapter.db;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import org.springframework.validation.annotation.Validated;
import ru.liga.evraz.bitrix.adapter.db.entity.BitrixTaskEntity;
import ru.liga.evraz.bitrix.adapter.db.entity.BitrixTaskHistoryEntity;

import javax.validation.constraints.NotNull;
import java.util.List;
import java.util.Optional;

@Repository
@Validated
interface BitrixTaskHistoryJpaRepository extends JpaRepository<BitrixTaskHistoryEntity, String> {
    List<BitrixTaskHistoryEntity> findAllByBitrixTask(@NotNull BitrixTaskEntity entity);

    Optional<BitrixTaskHistoryEntity> findFirstByBitrixTaskOrderByCreatedAtDesc(BitrixTaskEntity task);
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/db/BitrixTaskHistoryRepo.java
Content:
package ru.liga.evraz.bitrix.adapter.db;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Repository;
import ru.liga.evraz.bitrix.adapter.db.converter.BitrixTaskEntityMapper;
import ru.liga.evraz.bitrix.domain.model.BitrixTaskHistory;
import ru.liga.evraz.bitrix.domain.repository.BitrixTaskHistoryService;

@Repository
@RequiredArgsConstructor
@Slf4j
class BitrixTaskHistoryRepo implements BitrixTaskHistoryService {

    private final BitrixTaskEntityMapper mapper;
    private final BitrixTaskHistoryJpaRepository repo;
    private final BitrixTaskHistoryUuidGenerator uuidGenerator;

    @Override
    public BitrixTaskHistory create(BitrixTaskHistory taskHistoryRow) {
        final var draftEntity = mapper.map(taskHistoryRow);
        draftEntity.setNewEntity(true);
        draftEntity.setId(uuidGenerator.generateUuid());
        final var createdEntity = repo.save(draftEntity);
        return mapper.map(createdEntity);
    }
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/db/BitrixTaskHistoryUuidGenerator.java
Content:
package ru.liga.evraz.bitrix.adapter.db;

import org.springframework.stereotype.Component;
import ru.liga.evraz.bitrix.adapter.UuidGenerator;

@Component
class BitrixTaskHistoryUuidGenerator implements UuidGenerator {

}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/db/BitrixTaskJpaRepository.java
Content:
package ru.liga.evraz.bitrix.adapter.db;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import org.springframework.validation.annotation.Validated;
import ru.liga.evraz.bitrix.adapter.db.entity.BitrixTaskEntity;
import ru.liga.evraz.bitrix.adapter.db.entity.BitrixTaskType;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import javax.validation.constraints.NotEmpty;

@Repository
@Validated
interface BitrixTaskJpaRepository extends JpaRepository<BitrixTaskEntity, String> {
    BitrixTaskEntity getByBitrixId(@NotEmpty String bitrixTaskId);

    boolean existsByBitrixId(@NotEmpty String bitrixTaskId);

    List<BitrixTaskEntity> findAllByOrderIdAndActiveTrue(@NotEmpty String orderId);

    Optional<BitrixTaskEntity> findFirstByOrderIdAndTypeAndActiveTrue(String orderId, BitrixTaskType type);

    List<BitrixTaskEntity> findAllByOrderIdAndTypeIsIn(String orderId, Set<BitrixTaskType> type);

    List<BitrixTaskEntity> findAllByOrderIdAndTypeAndActiveTrue(String orderId, BitrixTaskType type);

    List<BitrixTaskEntity> findAllByCreatedAtIsLessThanEqualAndCreatedAtIsGreaterThan(LocalDateTime start, LocalDateTime end);
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/db/BitrixTaskRepo.java
Content:
package ru.liga.evraz.bitrix.adapter.db;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.lang.StringUtils;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;
import ru.liga.evraz.bitrix.adapter.db.converter.BitrixTaskEntityMapper;
import ru.liga.evraz.bitrix.adapter.db.entity.BitrixTaskEntity;
import ru.liga.evraz.bitrix.adapter.db.entity.BitrixTaskHistoryEntity;
import ru.liga.evraz.bitrix.adapter.db.entity.BitrixTaskType;
import ru.liga.evraz.bitrix.domain.model.BitrixTask;
import ru.liga.evraz.bitrix.domain.repository.BitrixTaskService;

import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

@Repository
@RequiredArgsConstructor
@Slf4j
class BitrixTaskRepo implements BitrixTaskService {

    private final BitrixTaskEntityMapper mapper;
    private final BitrixTaskJpaRepository bitrixTaskJpaRepo;
    private final BitrixTaskHistoryJpaRepository bitrixTaskHistoryJpaRepo;
    private final BitrixTaskUuidGenerator bitrixTaskUuidGenerator;

    @Override
    public BitrixTask getByBitrixId(String bitrixId) {
        try {
            final var entity = bitrixTaskJpaRepo.getByBitrixId(bitrixId);
            return mapper.map(entity);
        } catch (Exception e) {
            log.error(e.getLocalizedMessage());
            return null;
        }
    }

    @Override
    public boolean existsByBitrixId(String bitrixId) {
        return bitrixTaskJpaRepo.existsByBitrixId(bitrixId);
    }

    @Override
    @Transactional(readOnly = true)
    public BitrixTask findByOrderIdAndType(String orderId, BitrixTaskType type) {
        return bitrixTaskJpaRepo.findFirstByOrderIdAndTypeAndActiveTrue(orderId, type)
                .map(mapper::map)
                .orElse(null);
    }

    @Override
    @Transactional(readOnly = true)
    public List<BitrixTask> findByOrderIdAndTypes(String orderId, Set<BitrixTaskType> types) {
        return bitrixTaskJpaRepo.findAllByOrderIdAndTypeIsIn(orderId, types).stream()
            .map(mapper::map)
            .collect(Collectors.toList());
    }

    @Override
    @Transactional(readOnly = true)
    public List<BitrixTask> findAllByOrderId(String orderId) {
        return bitrixTaskJpaRepo.findAllByOrderIdAndActiveTrue(orderId).stream()
            .map(mapper::map)
            .collect(Collectors.toList());
    }

    @Override
    @Transactional(readOnly = true)
    public List<BitrixTask> findAllByOrderIdAndType(String orderId, BitrixTaskType type) {
        return bitrixTaskJpaRepo.findAllByOrderIdAndTypeAndActiveTrue(orderId, type).stream()
                .map(mapper::map)
                .collect(Collectors.toList());
    }

    @Override
    @Transactional(readOnly = true)
    public BitrixTask getById(String guid) {
        try {
            final var entity = bitrixTaskJpaRepo.getById(guid);
            return mapper.map(entity);
        } catch (Exception e) {
            log.error(e.getLocalizedMessage());
            return null;
        }
    }

    @Override
    public BitrixTask create(BitrixTask bitrixTask) {
        final var draftEntity = mapper.map(bitrixTask);
        draftEntity.setNewEntity(true);
        draftEntity.setActive(true);
        draftEntity.setCancelled(false);
        draftEntity.setId(generateId(bitrixTask.getGuid()));
        draftEntity.setNeedSendToBitrix(false);
        final var createdEntity = bitrixTaskJpaRepo.save(draftEntity);
        return mapper.map(createdEntity);
    }

    @Override
    public BitrixTask update(BitrixTask bitrixTask) {
        final var draftEntity = mapper.map(bitrixTask);
        draftEntity.setNewEntity(false);
        if (draftEntity.getActive() == null) {
            draftEntity.setActive(true);
        }
        if (draftEntity.getCancelled() == null) {
            draftEntity.setCancelled(false);
        }
        final var bitrixTaskHistoryRows = bitrixTaskHistoryJpaRepo.findAllByBitrixTask(draftEntity);
        draftEntity.setHistoryEntities(bitrixTaskHistoryRows);
        final var createdEntity = bitrixTaskJpaRepo.save(draftEntity);
        return mapper.map(createdEntity);
    }
    @Override
    public void deleteAll() {
        bitrixTaskJpaRepo.deleteAll();
    }

    @Override
    public void cancel(List<BitrixTask> tasks) {
        if (CollectionUtils.isNotEmpty(tasks)) {
            tasks.forEach(t -> {
                log.info("Try to deactivate task: {}", t.getId());
                t.setActive(false);
                update(t);
            });
        }
    }

    @Override
    public String latestBitrixStatus(BitrixTask task) {
        BitrixTaskEntity draftEntity = mapper.map(task);
        draftEntity.setNewEntity(false);

        return bitrixTaskHistoryJpaRepo.findFirstByBitrixTaskOrderByCreatedAtDesc(draftEntity)
                .map(BitrixTaskHistoryEntity::getStatusBitrixId)
                .orElse(null);
    }

    private String generateId(String guid) {
        return StringUtils.isNotBlank(guid) ? guid : bitrixTaskUuidGenerator.generateUuid();
    }
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/db/BitrixTaskUuidGenerator.java
Content:
package ru.liga.evraz.bitrix.adapter.db;

import org.springframework.stereotype.Component;
import ru.liga.evraz.bitrix.adapter.UuidGenerator;

@Component
public class BitrixTaskUuidGenerator implements UuidGenerator {

}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/db/MetricsConfigRepo.java
Content:
package ru.liga.evraz.bitrix.adapter.db;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import org.springframework.validation.annotation.Validated;
import ru.liga.evraz.bitrix.adapter.db.entity.MetricConfigEntity;

@Repository
@Validated
interface MetricsConfigRepo extends JpaRepository<MetricConfigEntity, String> {
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/db/entity/BitrixTaskEntity.java
Content:
package ru.liga.evraz.bitrix.adapter.db.entity;

import lombok.Data;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.annotation.CreatedDate;
import org.springframework.data.annotation.LastModifiedDate;
import org.springframework.data.annotation.Transient;
import org.springframework.data.domain.Persistable;
import org.springframework.data.jpa.domain.support.AuditingEntityListener;
import org.springframework.validation.annotation.Validated;
import ru.liga.evraz.bitrix.application.validation.TimezoneConstraint;

import javax.persistence.*;
import java.time.LocalDateTime;
import java.util.List;

@Entity
@Table(name = "bitrix_task")
@EntityListeners(AuditingEntityListener.class)
@Data
@Slf4j
@Validated
public class BitrixTaskEntity implements Persistable<String> {

    @Id
    private String id;

    @Column(name = "bitrix_id")
    private String bitrixId;

    @Column(name = "title")
    private String title;

    @Column(name = "description")
    private String description;

    @Column(name = "responsible_id")
    private String responsibleId;

    @Column(name = "responsible_email")
    private String responsibleEmail;

    @Column(name = "deadline")
    private LocalDateTime deadline;

    @Column(name = "client_order_id", nullable = false)
    private String clientOrderId;

    @Column(name = "order_id")
    private String orderId;

    @Column(name = "tenant_id")
    private String tenantId;

    @TimezoneConstraint
    @Column(name = "zone_id")
    private String zoneId;

    @Column(name = "need_send_to_bitrix")
    private boolean needSendToBitrix;

    @Enumerated(EnumType.STRING)
    @Column(name = "type", nullable = false)
    private BitrixTaskType type;

    @OneToMany(mappedBy = "bitrixTask", orphanRemoval = true, cascade = CascadeType.ALL)
    private List<BitrixTaskHistoryEntity> historyEntities;

    @Column(name = "created_at", nullable = false, updatable = false)
    @CreatedDate
    private LocalDateTime createdAt;

    @Column(name = "modified_at")
    @LastModifiedDate
    private LocalDateTime modifiedAt;

    @Column(name = "created_by")
    private Long createdBy;

    @Column(name = "role")
    private String role;

    @Column(name = "branch")
    private String branch;

    @Column(name = "active", nullable = false)
    private Boolean active;

    @Column(name = "cancelled", nullable = false)
    private Boolean cancelled;

    @Column(name = "bitrix_task_type_code")
    private String bitrixTaskTypeCode;

    @Transient
    private transient boolean newEntity;

    @Override
    public String getId() {
        return this.id;
    }

    @Override
    @Transient
    public boolean isNew() {
        return newEntity;
    }
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/db/entity/BitrixTaskHistoryEntity.java
Content:
package ru.liga.evraz.bitrix.adapter.db.entity;

import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.ToString;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.annotation.CreatedDate;
import org.springframework.data.annotation.LastModifiedDate;
import org.springframework.data.annotation.Transient;
import org.springframework.data.domain.Persistable;
import org.springframework.data.jpa.domain.support.AuditingEntityListener;
import org.springframework.validation.annotation.Validated;

import java.time.LocalDateTime;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EntityListeners;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

@Entity
@Table(name = "bitrix_task_status_history")
@EntityListeners(AuditingEntityListener.class)
@Data
@Slf4j
@Validated
public class BitrixTaskHistoryEntity implements Persistable<String> {
    @Id
    private String id;
    /*@Column(name = "task_id")
    private String taskId;*/
    @Column(name = "status_name")
    private String statusName;
    @Column(name = "status_bitrix_id")
    private String statusBitrixId;
    @Column(name = "created_at", nullable = false, updatable = false)
    @CreatedDate
    private LocalDateTime createdAt;
    @Column(name = "modified_at")
    @LastModifiedDate
    private LocalDateTime modifiedAt;

    @ManyToOne(optional = false, fetch = FetchType.LAZY)
    @JoinColumn(name = "task_id", nullable = false)
    @EqualsAndHashCode.Exclude
    @ToString.Exclude
    private BitrixTaskEntity bitrixTask;

    @Column(name = "bitrix_task_result")
    private String bitrixTaskResult;

    @Transient
    private transient boolean newEntity;

    @Override
    public String getId() {
        return this.id;
    }

    @Override
    @Transient
    public boolean isNew() {
        return newEntity;
    }
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/db/entity/BitrixTaskType.java
Content:
package ru.liga.evraz.bitrix.adapter.db.entity;

import lombok.Getter;
import ru.liga.evraz.bitrix.adapter.http.out.enums.BitrixTaskResultCode;

import java.util.List;
import java.util.Set;


@Getter
public enum BitrixTaskType {
    CLIENT_NOT_ARRIVED("shipment-control", BitrixTaskResultCode.CLIENT_NOT_ARRIVED_RESULT_CODES),
    ORDER_WITHOUT_PAYMENT("payment-control", BitrixTaskResultCode.ORDER_WITHOUT_PAYMENT_RESULT_CODES),
    ORDER_WITHOUT_INVOICE("invoice-control", BitrixTaskResultCode.ORDER_WITHOUT_INVOICE_RESULT_CODES),
    ORDER_PROLONG_RESERVE("reserve-control", BitrixTaskResultCode.ORDER_PROLONG_RESERVE_RESULT_CODES),
    SHIPMENT_SLOT_RESERVE("shipment-reservation", BitrixTaskResultCode.SHIPMENT_SLOT_RESERVE_RESULT_CODES),
    SALE_MANAGER_ORDER_CREATED_INFORM("order-create-inform", BitrixTaskResultCode.SALE_MANAGER_ORDER_CREATED_INFORM_RESULT_CODES),
    REQUIRED_QUOTATION("required-quotation", BitrixTaskResultCode.REQUIRED_QUOTATION_RESULT_CODES);

    private final String bitrixTaskTypeCode; //Символьный код типа задачи для Bitrix
    private final Set<BitrixTaskResultCode> bitrixTaskResultCodes; //Символьный код результата выполнения задачи для Bitrix

    BitrixTaskType(String bitrixTaskTypeCode, Set<BitrixTaskResultCode> bitrixTaskResultCodes) {
        this.bitrixTaskTypeCode = bitrixTaskTypeCode;
        this.bitrixTaskResultCodes = bitrixTaskResultCodes;
    }

    public static boolean isValidBitrixTaskResultCode(BitrixTaskType taskType, String taskResult) {
        List<String> validResultCodes = taskType.getBitrixTaskResultCodes().stream().map(BitrixTaskResultCode::getBitrixTaskResultCode).toList();
        return validResultCodes.contains(taskResult);
    }
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/db/entity/MetricConfigEntity.java
Content:
package ru.liga.evraz.bitrix.adapter.db.entity;

import lombok.Data;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.annotation.Transient;
import org.springframework.data.domain.Persistable;
import org.springframework.data.jpa.domain.support.AuditingEntityListener;
import org.springframework.validation.annotation.Validated;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EntityListeners;
import javax.persistence.Id;
import javax.persistence.Table;

@Entity
@Table(name = "metrics")
@EntityListeners(AuditingEntityListener.class)
@Data
@Slf4j
@Validated
public class MetricConfigEntity implements Persistable<String> {
    @Id
    private String id;
    @Column(name = "selection_delta")
    private String selectionDelta;

    @Transient
    private transient boolean newEntity;

    @Override
    public String getId() {
        return this.id;
    }

    @Override
    @Transient
    public boolean isNew() {
        return newEntity;
    }
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/db/converter/BitrixTaskEntityMapper.java
Content:
package ru.liga.evraz.bitrix.adapter.db.converter;

import org.mapstruct.Mapper;
import ru.liga.evraz.bitrix.adapter.db.entity.BitrixTaskEntity;
import ru.liga.evraz.bitrix.adapter.db.entity.BitrixTaskHistoryEntity;
import ru.liga.evraz.bitrix.common.CommonMapper;
import ru.liga.evraz.bitrix.domain.model.BitrixTask;
import ru.liga.evraz.bitrix.domain.model.BitrixTaskHistory;

@Mapper(componentModel = "spring", uses = CommonMapper.class)
public interface BitrixTaskEntityMapper {
    BitrixTaskEntity map(BitrixTask model);
    BitrixTask map(BitrixTaskEntity entity);

    BitrixTaskHistoryEntity map(BitrixTaskHistory model);
    BitrixTaskHistory map(BitrixTaskHistoryEntity entity);
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/src/main/java/ru/liga/evraz/bitrix/adapter/db/config/AuditConfig.java
Content:
package ru.liga.evraz.bitrix.adapter.db.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.auditing.DateTimeProvider;
import org.springframework.data.jpa.repository.config.EnableJpaAuditing;
import org.springframework.transaction.annotation.EnableTransactionManagement;

import java.time.Clock;
import java.time.LocalDateTime;
import java.util.Optional;

/**
 * Конфигурация для аудита. TODO:: need to check workability.
 */
@Configuration
@EnableTransactionManagement
@EnableJpaAuditing(dateTimeProviderRef = "evrazDateTimeProvider")
class AuditConfig {

    /**
     * Для формирования значений полей дат создания/обновления сущностей БД.
     *
     * @param clock - {@link Clock}
     * @return - {@link DateTimeProvider}
     */
    @Bean(name = "evrazDateTimeProvider")
    public DateTimeProvider evrazDateTimeProvider(Clock clock) {
        return () -> Optional.of(LocalDateTime.now(clock));
    }

}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/openapi/yaml/api.yaml
Content:
openapi: 3.0.3
info:
  title: Документация по API
  description: Описание API
  contact:
    email: no-reply@liga.ru
  version: 0.1.0
tags:
  - name: Task
    description: Работа с задачами

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - bearerAuth: [ ]

paths:
  /v1/task/byOrder:
    post:
      tags:
        - Task
      operationId: getCreatedTasksForOrder
      description: Получить информацию по текущим созданным задачам по заказу, в том числе и неуспешно созданным в Bitrix
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './http/bitrix.task.getAll.4order.yaml#/GetOrderBitrixTaskRequest'
      responses:
        200:
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: './http/bitrix.task.getAll.4order.yaml#/GetOrderBitrixTaskResponse'
  /v1/task/manager:
    post:
      tags:
        - Task
      operationId: createManagerTask
      description: Передача информации по созданию задачи из OMS в Bitrix24 (клиент не приехал)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './http/bitrix.task.create.yaml#/CreateManagerTaskRequest'
      responses:
        200:
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: './http/bitrix.task.create.yaml#/CreateTaskResponse'
  /v1/task/group:
    post:
      tags:
        - Task
      operationId: createGroupTask
      description: Передача информации по созданию задачи из OMS в Bitrix24 (клиент не приехал)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './http/bitrix.task.create.yaml#/CreateGroupTaskRequest'
      responses:
        200:
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: './http/bitrix.task.create.yaml#/CreateTaskResponse'
  /v1/task/user-info:
    get:
      tags:
        - Task
      operationId: findUserInfo
      description: Поиск информации о пользователе Bitrix24
      parameters:
        - in: query
          name: email
          schema:
            type: string
          required: true
          description: email пользователя
      responses:
        200:
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: './http/bitrix.task.create.yaml#/FindUserInfoResponse'
  /v1/task/order/cancel:
    post:
      tags:
        - Task
      operationId: cancelTasks
      description: Отмена ранее поставленных задач по заказу
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './http/bitrix.task.create.yaml#/CancelOrderTasksRequest'
      responses:
        200:
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: './http/bitrix.task.create.yaml#/CancelOrderTasksResponse'


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/openapi/yaml/kafka-api.yaml
Content:
openapi: 3.0.1
info:
  title: Документация по взаимодействию с Kafka API для сервиса bitrix-adapter
  description: Описание взаимодействия с Kafka API для сервиса bitrix-adapter
  contact:
    email: no-reply@liga.ru
  version: 0.1.0

paths: {}

components:
  schemas:
    TaskExecutionStatus:
      $ref: './kafka/bitrix.task.execution.status.yaml#/TaskExecutionStatus'


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/openapi/yaml/kafka/bitrix.task.execution.status.yaml
Content:
TaskExecutionStatus:
  type: object
  required:
    - ID
    - STATUS
  properties:
    ID:
      description: Идентификатор задачи
      type: string
      example: "55555"
    STATUS:
      description: >
        Статус
        2 - Ждет выполнения,
        3 - Выполняется,
        4 - Ожидает контроля,
        5 - Завершена,
        6 - Отложена.
        По умолчанию - 2
      type: string
      example: "5"
    UF_OMS_TASK_RESULT:
      description: Результат завершения задачи
      type: string
      example: "shipment-without-changing"



File: /evrazropos/EMI_evraz_oms_bitrix_adapter/openapi/yaml/http/bitrix.task.create.yaml
Content:
CreateTaskResponse:
  type: object
  description: Тело ответа на создание задачи в Bitrix24
  properties:
    id:
      description: ID созданной задачи в Bitrix24
      type: string
      example: "55555"

BaseTaskRequest:
  type: object
  required:
    - title
    - clientOrderId
    - orderId
    - tenantId
  properties:
    title:
      description: Название задачи
      type: string
      example: "Задание на перевозку"
    description:
      description: Описание - ccылка на заказ в 1С, email, регион + подразделение
      type: string
      example: "ccылка на заказ в 1С - ИН00-1102, test@ya.ru, "
    deadline:
      description: Крайний срок
      type: string
      format: date-time
      example: "2022-12-01T16:06:06+03:00"
      x-field-extra-annotation: >-
        @com.fasterxml.jackson.databind.annotation.JsonDeserialize(using = 
        ru.liga.evraz.bitrix.adapter.http.OffsetDateTimeDeserializer.class)
    clientOrderId:
      description: guid заказа 1C
      type: string
      example: "BF-12345-15"
    orderId:
      type: string
      example: "tnt-9357710"
    tenantId:
      type: string
      example: "evraz_oms_dev"
    type:
      type: string
      enum:
        - CLIENT_NOT_ARRIVED
        - ORDER_WITHOUT_PAYMENT
        - ORDER_WITHOUT_INVOICE
        - ORDER_PROLONG_RESERVE
        - SHIPMENT_SLOT_RESERVE
        - SALE_MANAGER_ORDER_CREATED_INFORM
        - REQUIRED_QUOTATION
      default: CLIENT_NOT_ARRIVED


CreateManagerTaskRequest:
  type: object
  description: Тело запроса на создание задачи в Bitrix24
  required:
    - responsibleId
    - responsibleEmail
    - description
  allOf:
    - $ref: '#/BaseTaskRequest'
    - properties:
        responsibleId:
          description: ID Ответственного менеджера
          type: long
          example: 123456
        responsibleEmail:
          description: Email Ответственного менеджера
          type: string
          example: "OMS_EVRAZ@evraz.com"


CreateGroupTaskRequest:
  type: object
  description: Тело запроса на создание задачи в Bitrix24
  required:
    - role
    - branch
  allOf:
    - $ref: '#/BaseTaskRequest'
    - properties:
        role:
          description: Роль
          type: string
          example: "Продажи"
        branch:
          description: Филиал
          type: string
          example: "Москва"

FindUserInfoResponse:
  type: object
  description: Информация о пользователе Bitrix24
  properties:
    responsibleId:
      description: ID пользователя Bitrix24
      type: long
      example: 55555

CancelOrderTasksRequest:
  type: object
  description: Тело запроса на отмену задач по заказу в Bitrix24
  required:
    - tenantId
    - orderId
  properties:
    orderId:
      type: string
      example: "tnt-9357710"
    tenantId:
      type: string
      example: "evraz_oms_dev"
    cancelAll:
      type: boolean
      default: false
    type:
      type: string
      enum:
        - CLIENT_NOT_ARRIVED
        - ORDER_WITHOUT_PAYMENT
        - ORDER_WITHOUT_INVOICE
        - ORDER_PROLONG_RESERVE
        - SHIPMENT_SLOT_RESERVE
        - SALE_MANAGER_ORDER_CREATED_INFORM
        - REQUIRED_QUOTATION
      default: CLIENT_NOT_ARRIVED

CancelOrderTasksResponse:
  type: object
  description: Тело ответа на отмену задач по заказу в Bitrix24
  properties:
    success:
      description: Признак успешного выполнения запроса
      type: boolean
      example: true


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/openapi/yaml/http/bitrix.task.getAll.4order.yaml
Content:
GetOrderBitrixTaskRequest:
  type: object
  description: Запрос на получение задач по заказу
  required:
    - sfOrderId
  properties:
    sfOrderId:
      description: ID заказа в SF24 (order-service)
      type: string
      example: "evraz_oms_dev-erpDocumentId___createdDate-3288"
    types:
      description: >
        Тип задачи (внутренний):
        1) CLIENT_NOT_ARRIVED
        2) ORDER_WITHOUT_PAYMENT
        3) ORDER_WITHOUT_INVOICE
        4) ORDER_PROLONG_RESERVE
        5) SHIPMENT_SLOT_RESERVE
      type: array
      items:
        type: string
        description: >
          1) CLIENT_NOT_ARRIVED
          2) ORDER_WITHOUT_PAYMENT
          3) ORDER_WITHOUT_INVOICE
          4) ORDER_PROLONG_RESERVE
          5) SHIPMENT_SLOT_RESERVE
      

GetOrderBitrixTaskResponse:
  type: object
  description: Ответ на запрос получения задач по заказу
  properties:
    payload:
      description: Тело ответа
      $ref: '#/GetOrderBitrixTasksData'
    fault:
      $ref: './common.yaml#/Fault'
      description: Информация об ошибке

GetOrderBitrixTasksData:
  type: object
  description: Контейнер с информацией о созданных задачах
  properties:
    tasks:
      description: >
        Массив с созданными задачами
      type: array
      items:
        $ref: '#/GetOrderBitrixTask'

GetOrderBitrixTask:
  type: object
  description: Информация о созданной в адаптере задаче
  properties:
    orderId:
      description: ID заказа в SF24 (order-service)
      type: string
      example: "evraz_oms_dev-erpDocumentId___createdDate-3288"
    bitrixId:
      description: Идентификатор созданной задачи в ARM (Bitrix)
      type: string
      example: 1234
    type:
      description: Внутренний тип задачи в ARM (Bitrix)
      type: string
    bitrixTaskTypeCode:
      description: Тип задачи для ARM (Bitrix)
      type: string
    responsibleId:
      description: Идентификатор ответственного в ARM (Bitrix)
      type: string
    role:
      description: Роль для ARM (Bitrix)
      type: string
      example: Продажи
    branch:
      description: Наименование подразделения для ARM (Bitrix)
      type: string
      example: Липецк
    needSendToBitrix:
      description: Признак необходимости отправки в ARM (Bitrix)
      type: boolean
      example: false
    active:
      description: Признак активной задачи в ARM (Bitrix)
      type: boolean
      example: true
    cancelled:
      description: Признак отменной задачи в ARM (Bitrix)
      type: boolean
      example: false

File: /evrazropos/EMI_evraz_oms_bitrix_adapter/openapi/yaml/http/common.yaml
Content:
Fault:
  type: object
  properties:
    code:
      description: Код ошибки
      type: string
      example: "NOT_FOUND"
    details:
      description: Сообщение об ошибке
      type: string
      example: "Не удалось создать заказ"

File: /evrazropos/EMI_evraz_oms_bitrix_adapter/openapi/templates/additionalProperties.mustache
Content:
{{#additionalPropertiesType}}
    /**
    * A container for additional, undeclared properties.
    * This is a holder for any undeclared properties as specified with
    * the 'additionalProperties' keyword in the OAS document.
    */
    private Map<String, {{{.}}}> additionalProperties;

    /**
    * Set the additional (undeclared) property with the specified name and value.
    * If the property does not already exist, create it otherwise replace it.
    */
    @JsonAnySetter
    public {{classname}} putAdditionalProperty(String key, {{{.}}} value) {
        if (this.additionalProperties == null) {
            this.additionalProperties = new HashMap<String, {{{.}}}>();
        }
        this.additionalProperties.put(key, value);
        return this;
    }

    /**
    * Return the additional (undeclared) property.
    */
    @JsonAnyGetter
    public Map<String, {{{.}}}> getAdditionalProperties() {
        return additionalProperties;
    }

    /**
    * Return the additional (undeclared) property with the specified name.
    */
    public {{{.}}} getAdditionalProperty(String key) {
        if (this.additionalProperties == null) {
            return null;
        }
        return this.additionalProperties.get(key);
    }
{{/additionalPropertiesType}}

File: /evrazropos/EMI_evraz_oms_bitrix_adapter/openapi/templates/api.mustache
Content:
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) ({{{generatorVersion}}}).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package {{package}};

{{#imports}}import {{import}};
{{/imports}}
{{#swagger2AnnotationLibrary}}
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
{{/swagger2AnnotationLibrary}}
{{#swagger1AnnotationLibrary}}
import io.swagger.annotations.*;
{{/swagger1AnnotationLibrary}}
{{#jdk8-no-delegate}}
{{#virtualService}}
import io.virtualan.annotation.ApiVirtual;
import io.virtualan.annotation.VirtualService;
{{/virtualService}}
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
{{/jdk8-no-delegate}}
{{#useBeanValidation}}
import org.springframework.validation.annotation.Validated;
{{/useBeanValidation}}
{{#useSpringController}}
import org.springframework.stereotype.Controller;
{{/useSpringController}}
import org.springframework.web.bind.annotation.*;
{{#jdk8-no-delegate}}
{{^reactive}}
import org.springframework.web.context.request.NativeWebRequest;
{{/reactive}}
{{/jdk8-no-delegate}}
import org.springframework.web.multipart.MultipartFile;
{{#reactive}}
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import org.springframework.http.codec.multipart.Part;
{{/reactive}}

{{#useBeanValidation}}
import javax.validation.Valid;
import javax.validation.constraints.*;
{{/useBeanValidation}}
import java.util.List;
import java.util.Map;
{{#jdk8-no-delegate}}
import java.util.Optional;
{{/jdk8-no-delegate}}
{{^jdk8-no-delegate}}
{{#useOptional}}
import java.util.Optional;
{{/useOptional}}
{{/jdk8-no-delegate}}
{{#async}}
import java.util.concurrent.{{^jdk8}}Callable{{/jdk8}}{{#jdk8}}CompletableFuture{{/jdk8}};
{{/async}}
import javax.annotation.Generated;

{{>generatedAnnotation}}
{{#useBeanValidation}}
@Validated
{{/useBeanValidation}}
{{#useSpringController}}
@Controller
{{/useSpringController}}
{{#swagger2AnnotationLibrary}}
@Tag(name = "{{{baseName}}}", description = "the {{{baseName}}} API")
{{/swagger2AnnotationLibrary}}
{{#swagger1AnnotationLibrary}}
@Api(value = "{{{baseName}}}", description = "the {{{baseName}}} API")
{{/swagger1AnnotationLibrary}}
{{#operations}}
{{#virtualService}}
@VirtualService
{{/virtualService}}
public interface {{classname}} {
{{#jdk8-default-interface}}
    {{^isDelegate}}
        {{^reactive}}

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }
        {{/reactive}}
    {{/isDelegate}}
    {{#isDelegate}}

    default {{classname}}Delegate getDelegate() {
        return new {{classname}}Delegate() {};
    }
    {{/isDelegate}}
{{/jdk8-default-interface}}
{{#operation}}

    /**
     * {{httpMethod}} {{{path}}}{{#summary}} : {{.}}{{/summary}}
    {{#notes}}
     * {{.}}
    {{/notes}}
     *
    {{#allParams}}
     * @param {{paramName}} {{description}}{{#required}} (required){{/required}}{{^required}} (optional{{#defaultValue}}, default to {{.}}{{/defaultValue}}){{/required}}
    {{/allParams}}
     * @return {{#responses}}{{message}} (status code {{code}}){{^-last}}
     *         or {{/-last}}{{/responses}}
    {{#isDeprecated}}
     * @deprecated
    {{/isDeprecated}}
    {{#externalDocs}}
     * {{description}}
     * @see <a href="{{url}}">{{summary}} Documentation</a>
    {{/externalDocs}}
     */
    {{#virtualService}}
    @ApiVirtual
    {{/virtualService}}
    {{#swagger2AnnotationLibrary}}
    @Operation(
        operationId = "{{{operationId}}}",
        {{#summary}}
        summary = "{{{.}}}",
        {{/summary}}
        {{#vendorExtensions.x-tags}}
        tags = { {{#vendorExtensions.x-tags}}"{{tag}}"{{^-last}}, {{/-last}}{{/vendorExtensions.x-tags}} },
        {{/vendorExtensions.x-tags}}
        responses = {
            {{#responses}}
            @ApiResponse(responseCode = "{{{code}}}", description = "{{{message}}}"{{#baseType}}, content = @Content(mediaType = "application/json", schema = @Schema(implementation =  {{{baseType}}}.class)){{/baseType}}){{^-last}},{{/-last}}
            {{/responses}}
        }{{#hasAuthMethods}},
        security = {
            {{#authMethods}}
            @SecurityRequirement(name = "{{name}}"{{#isOAuth}}, scopes={ {{#scopes}}"{{scope}}"{{^-last}}, {{/-last}}{{/scopes}} }{{/isOAuth}}){{^-last}},{{/-last}}
            {{/authMethods}}
        }{{/hasAuthMethods}}
    )
    {{/swagger2AnnotationLibrary}}
    {{#swagger1AnnotationLibrary}}
    @ApiOperation(
        tags = { {{#vendorExtensions.x-tags}}"{{tag}}"{{^-last}}, {{/-last}}{{/vendorExtensions.x-tags}} },
        value = "{{{summary}}}",
        nickname = "{{{operationId}}}",
        notes = "{{{notes}}}"{{#returnBaseType}},
        response = {{{.}}}.class{{/returnBaseType}}{{#returnContainer}},
        responseContainer = "{{{.}}}"{{/returnContainer}}{{#hasAuthMethods}},
        authorizations = {
        {{#authMethods}}
        {{#isOAuth}}
            @Authorization(value = "{{name}}", scopes = {
            {{#scopes}}
                @AuthorizationScope(scope = "{{scope}}", description = "{{description}}"){{^-last}},{{/-last}}
            {{/scopes}}
            }){{^-last}},{{/-last}}
        {{/isOAuth}}
        {{^isOAuth}}
            @Authorization(value = "{{name}}"){{^-last}},{{/-last}}
        {{/isOAuth}}
        {{/authMethods}} }{{/hasAuthMethods}}
    )
    @ApiResponses({
        {{#responses}}
        @ApiResponse(code = {{{code}}}, message = "{{{message}}}"{{#baseType}}, response = {{{.}}}.class{{/baseType}}{{#containerType}}, responseContainer = "{{{.}}}"{{/containerType}}){{^-last}},{{/-last}}
        {{/responses}}
    })
    {{/swagger1AnnotationLibrary}}
    {{#implicitHeaders}}
    {{#swagger2AnnotationLibrary}}
    @Parameters({
        {{#headerParams}}
        {{>paramDoc}}{{^-last}},{{/-last}}
        {{/headerParams}}
    {{/swagger2AnnotationLibrary}}
    {{#swagger1AnnotationLibrary}}
    @ApiImplicitParams({
        {{#headerParams}}
        {{>implicitHeader}}{{^-last}},{{/-last}}
        {{/headerParams}}
    {{/swagger1AnnotationLibrary}}
    })
    {{/implicitHeaders}}
    @RequestMapping(
        method = RequestMethod.{{httpMethod}},
        value = "{{{path}}}"{{#singleContentTypes}}{{#hasProduces}},
        produces = "{{{vendorExtensions.x-accepts}}}"{{/hasProduces}}{{#hasConsumes}},
        consumes = "{{{vendorExtensions.x-contentType}}}"{{/hasConsumes}}{{/singleContentTypes}}{{^singleContentTypes}}{{#hasProduces}},
        produces = { {{#produces}}"{{{mediaType}}}"{{^-last}}, {{/-last}}{{/produces}} }{{/hasProduces}}{{#hasConsumes}},
        consumes = { {{#consumes}}"{{{mediaType}}}"{{^-last}}, {{/-last}}{{/consumes}} }{{/hasConsumes}}{{/singleContentTypes}}
    )
    {{#jdk8-default-interface}}default {{/jdk8-default-interface}}{{#responseWrapper}}{{.}}{{/responseWrapper}}<{{>returnTypes}}{{#responseWrapper}}>{{/responseWrapper}} {{#delegate-method}}_{{/delegate-method}}{{operationId}}(
        {{#allParams}}{{>queryParams}}{{>pathParams}}{{>headerParams}}{{>bodyParams}}{{>formParams}}{{>cookieParams}}{{^-last}},
        {{/-last}}{{/allParams}}{{#reactive}}{{#hasParams}},
        {{/hasParams}}{{#swagger2AnnotationLibrary}}@Parameter(hidden = true){{/swagger2AnnotationLibrary}}{{#springFoxDocumentationProvider}}@ApiIgnore{{/springFoxDocumentationProvider}} final ServerWebExchange exchange{{/reactive}}{{#vendorExtensions.x-spring-paginated}}{{#hasParams}},
        {{/hasParams}}{{#springFoxDocumentationProvider}}@ApiIgnore {{/springFoxDocumentationProvider}}{{#springDocDocumentationProvider}}@ParameterObject {{/springDocDocumentationProvider}}final Pageable pageable{{/vendorExtensions.x-spring-paginated}}
    ){{^jdk8-default-interface}};{{/jdk8-default-interface}}{{#jdk8-default-interface}}{{#unhandledException}} throws Exception{{/unhandledException}} {
        {{#delegate-method}}
        return {{operationId}}({{#allParams}}{{paramName}}{{^-last}}, {{/-last}}{{/allParams}}{{#reactive}}{{#hasParams}}, {{/hasParams}}exchange{{/reactive}}{{#vendorExtensions.x-spring-paginated}}, pageable{{/vendorExtensions.x-spring-paginated}});
    }

    // Override this method
    {{#jdk8-default-interface}}default {{/jdk8-default-interface}} {{#responseWrapper}}{{.}}{{/responseWrapper}}<{{>returnTypes}}{{#responseWrapper}}>{{/responseWrapper}} {{operationId}}({{#allParams}}{{^isFile}}{{^isBodyParam}}{{>optionalDataType}}{{/isBodyParam}}{{#isBodyParam}}{{^reactive}}{{{dataType}}}{{/reactive}}{{#reactive}}{{^isArray}}Mono<{{{dataType}}}>{{/isArray}}{{#isArray}}Flux<{{{baseType}}}>{{/isArray}}{{/reactive}}{{/isBodyParam}}{{/isFile}}{{#isFile}}{{#reactive}}Flux<Part>{{/reactive}}{{^reactive}}MultipartFile{{/reactive}}{{/isFile}} {{paramName}}{{^-last}}, {{/-last}}{{/allParams}}{{#reactive}}{{#hasParams}}, {{/hasParams}}{{#springFoxDocumentationProvider}}@ApiIgnore{{/springFoxDocumentationProvider}} final ServerWebExchange exchange{{/reactive}}{{#vendorExtensions.x-spring-paginated}}, {{#springFoxDocumentationProvider}}@ApiIgnore{{/springFoxDocumentationProvider}} final Pageable pageable{{/vendorExtensions.x-spring-paginated}}){{#unhandledException}} throws Exception{{/unhandledException}} {
        {{/delegate-method}}
        {{^isDelegate}}
        {{>methodBody}}
        {{/isDelegate}}
        {{#isDelegate}}
        return getDelegate().{{operationId}}({{#allParams}}{{paramName}}{{^-last}}, {{/-last}}{{/allParams}}{{#reactive}}{{#hasParams}}, {{/hasParams}}exchange{{/reactive}}{{#vendorExtensions.x-spring-paginated}}, pageable{{/vendorExtensions.x-spring-paginated}});
        {{/isDelegate}}
    }{{/jdk8-default-interface}}

{{/operation}}
}
{{/operations}}

File: /evrazropos/EMI_evraz_oms_bitrix_adapter/openapi/templates/methodBody.mustache
Content:
{{^reactive}}
{{#examples}}
    {{#-first}}
        {{#jdk8}}
            {{#async}}
return CompletableFuture.supplyAsync(()-> {
            {{/async}}getRequest().ifPresent(request -> {
{{#async}}    {{/async}}            {{/jdk8}}for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
    {{/-first}}
{{#async}}        {{/async}}{{^async}}{{#jdk8}}    {{/jdk8}}{{/async}}            if (mediaType.isCompatibleWith(MediaType.valueOf("{{{contentType}}}"))) {
{{#async}}        {{/async}}{{^async}}{{#jdk8}}    {{/jdk8}}{{/async}}                String exampleString = {{>exampleString}};
{{#async}}        {{/async}}{{^async}}{{#jdk8}}    {{/jdk8}}{{/async}}                ApiUtil.setExampleResponse(request, "{{{contentType}}}", exampleString);
{{#async}}        {{/async}}{{^async}}{{#jdk8}}    {{/jdk8}}{{/async}}                break;
{{#async}}        {{/async}}{{^async}}{{#jdk8}}    {{/jdk8}}{{/async}}            }
    {{#-last}}
{{#async}}        {{/async}}{{^async}}{{#jdk8}}    {{/jdk8}}{{/async}}        }
        {{#jdk8}}
{{#async}}    {{/async}}        });
        {{/jdk8}}
{{#async}}    {{/async}}        return new ResponseEntity<>({{#returnSuccessCode}}HttpStatus.valueOf({{{statusCode}}}){{/returnSuccessCode}}{{^returnSuccessCode}}HttpStatus.NOT_IMPLEMENTED{{/returnSuccessCode}});
        {{#jdk8}}
            {{#async}}
        }, Runnable::run);
            {{/async}}
        {{/jdk8}}
    {{/-last}}
{{/examples}}
{{^examples}}
return {{#jdk8}}{{#async}}CompletableFuture.completedFuture({{/async}}{{/jdk8}}new ResponseEntity<>({{#returnSuccessCode}}HttpStatus.OK{{/returnSuccessCode}}{{^returnSuccessCode}}HttpStatus.NOT_IMPLEMENTED{{/returnSuccessCode}}){{#jdk8}}{{#async}}){{/async}}{{/jdk8}};
{{/examples}}
{{/reactive}}
{{#reactive}}
Mono<Void> result = Mono.empty();
    {{#examples}}
        {{#-first}}
        exchange.getResponse().setStatusCode({{#returnSuccessCode}}HttpStatus.valueOf({{{statusCode}}}){{/returnSuccessCode}}{{^returnSuccessCode}}HttpStatus.NOT_IMPLEMENTED{{/returnSuccessCode}});
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
        {{/-first}}
            if (mediaType.isCompatibleWith(MediaType.valueOf("{{{contentType}}}"))) {
                String exampleString = {{>exampleString}};
                result = ApiUtil.getExampleResponse(exchange, mediaType, exampleString);
                break;
            }
        {{#-last}}
        }
        {{/-last}}
    {{/examples}}
{{^examples}}
        exchange.getResponse().setStatusCode({{#returnSuccessCode}}HttpStatus.OK{{/returnSuccessCode}}{{^returnSuccessCode}}HttpStatus.NOT_IMPLEMENTED{{/returnSuccessCode}});
{{/examples}}
        return result.then(Mono.empty());
{{/reactive}}

File: /evrazropos/EMI_evraz_oms_bitrix_adapter/openapi/templates/pojo.mustache
Content:
/**
 * {{description}}{{^description}}{{classname}}{{/description}}
 */
{{>additionalModelTypeAnnotations}}
{{#description}}
{{#swagger1AnnotationLibrary}}
@ApiModel(description = "{{{description}}}")
{{/swagger1AnnotationLibrary}}
{{#swagger2AnnotationLibrary}}
@Schema({{#name}}name = "{{name}}", {{/name}}description = "{{{description}}}")
{{/swagger2AnnotationLibrary}}
{{/description}}
{{#discriminator}}
{{>typeInfoAnnotation}}
{{/discriminator}}
{{#jackson}}
{{#isClassnameSanitized}}
{{^hasDiscriminatorWithNonEmptyMapping}}
@JsonTypeName("{{name}}")
{{/hasDiscriminatorWithNonEmptyMapping}}
{{/isClassnameSanitized}}
{{/jackson}}
{{#withXml}}
{{>xmlAnnotation}}
{{/withXml}}
{{>generatedAnnotation}}
{{#vendorExtensions.x-class-extra-annotation}}
{{{vendorExtensions.x-class-extra-annotation}}}
{{/vendorExtensions.x-class-extra-annotation}}
public class {{classname}}{{#parent}} extends {{{parent}}}{{/parent}}{{^parent}}{{#hateoas}} extends RepresentationModel<{{classname}}> {{/hateoas}}{{/parent}}{{#vendorExtensions.x-implements}}{{#-first}} implements {{{.}}}{{/-first}}{{^-first}}, {{{.}}}{{/-first}}{{/vendorExtensions.x-implements}} {
{{#serializableModel}}

  private static final long serialVersionUID = 1L;
{{/serializableModel}}
  {{#vars}}

    {{#isEnum}}
    {{^isContainer}}
{{>enumClass}}
    {{/isContainer}}
    {{#isContainer}}
    {{#mostInnerItems}}
{{>enumClass}}
    {{/mostInnerItems}}
    {{/isContainer}}
    {{/isEnum}}
  {{#jackson}}
  {{#withXml}}
  @JacksonXmlProperty({{#isXmlAttribute}}isAttribute = true, {{/isXmlAttribute}}{{#xmlNamespace}}namespace="{{.}}", {{/xmlNamespace}}localName = "{{xmlName}}{{^xmlName}}{{baseName}}{{/xmlName}}")
  {{/withXml}}
  {{/jackson}}
  {{#gson}}
  @SerializedName("{{baseName}}")
  {{/gson}}
  {{#vendorExtensions.x-field-extra-annotation}}
  {{{vendorExtensions.x-field-extra-annotation}}}
  {{/vendorExtensions.x-field-extra-annotation}}
  {{#isContainer}}
  {{#useBeanValidation}}@Valid{{/useBeanValidation}}
  {{#openApiNullable}}
  private {{>nullableDataType}} {{name}}{{#isNullable}} = JsonNullable.undefined(){{/isNullable}}{{^isNullable}}{{#defaultValue}} = {{{.}}}{{/defaultValue}}{{/isNullable}};
  {{/openApiNullable}}
  {{^openApiNullable}}
  private {{>nullableDataType}} {{name}}{{#defaultValue}} = {{{.}}}{{/defaultValue}};
  {{/openApiNullable}}
  {{/isContainer}}
  {{^isContainer}}
  {{#isDate}}
  @DateTimeFormat(iso = DateTimeFormat.ISO.DATE)
  {{/isDate}}
  {{#isDateTime}}
  @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME)
  {{/isDateTime}}
  {{#openApiNullable}}
  private {{>nullableDataType}} {{name}}{{#isNullable}} = JsonNullable.undefined(){{/isNullable}}{{^isNullable}}{{#defaultValue}} = {{{.}}}{{/defaultValue}}{{/isNullable}};
  {{/openApiNullable}}
  {{^openApiNullable}}
  private {{>nullableDataType}} {{name}}{{#isNullable}} = null{{/isNullable}}{{^isNullable}}{{#defaultValue}} = {{{.}}}{{/defaultValue}}{{/isNullable}};
  {{/openApiNullable}}
  {{/isContainer}}
  {{/vars}}
  {{#generatedConstructorWithRequiredArgs}}
  {{#hasRequired}}

  public {{classname}}() {
    super();
  }

  /**
   * Constructor with only required parameters
   */
  public {{classname}}({{#requiredVars}}{{{datatypeWithEnum}}} {{name}}{{^-last}}, {{/-last}}{{/requiredVars}}) {
    {{#parent}}
    super({{#parentRequiredVars}}{{name}}{{^-last}}, {{/-last}}{{/parentRequiredVars}});
    {{/parent}}
    {{#vars}}
    {{#required}}
    {{#openApiNullable}}
    this.{{name}} = {{#isNullable}}JsonNullable.of({{name}}){{/isNullable}}{{^isNullable}}{{name}}{{/isNullable}};
    {{/openApiNullable}}
    {{^openApiNullable}}
    this.{{name}} = {{name}};
    {{/openApiNullable}}
    {{/required}}
    {{/vars}}
  }
  {{/hasRequired}}
  {{/generatedConstructorWithRequiredArgs}}
  {{#vars}}

  {{! begin feature: fluent setter methods }}
  public {{classname}} {{name}}({{{datatypeWithEnum}}} {{name}}) {
    {{#openApiNullable}}
    this.{{name}} = {{#isNullable}}JsonNullable.of({{name}}){{/isNullable}}{{^isNullable}}{{name}}{{/isNullable}};
    {{/openApiNullable}}
    {{^openApiNullable}}
    this.{{name}} = {{name}};
    {{/openApiNullable}}
    return this;
  }
  {{#isArray}}

  public {{classname}} add{{nameInCamelCase}}Item({{{items.datatypeWithEnum}}} {{name}}Item) {
    {{#openApiNullable}}
    if (this.{{name}} == null{{#isNullable}} || !this.{{name}}.isPresent(){{/isNullable}}) {
      this.{{name}} = {{#isNullable}}JsonNullable.of({{/isNullable}}{{{defaultValue}}}{{^defaultValue}}new {{#uniqueItems}}LinkedHashSet{{/uniqueItems}}{{^uniqueItems}}ArrayList{{/uniqueItems}}<>(){{/defaultValue}}{{#isNullable}}){{/isNullable}};
    }
    this.{{name}}{{#isNullable}}.get(){{/isNullable}}.add({{name}}Item);
    {{/openApiNullable}}
    {{^openApiNullable}}
    if (this.{{name}} == null) {
      this.{{name}} = {{{defaultValue}}}{{^defaultValue}}new {{#uniqueItems}}LinkedHashSet{{/uniqueItems}}{{^uniqueItems}}ArrayList{{/uniqueItems}}<>(){{/defaultValue}};
    }
    this.{{name}}.add({{name}}Item);
    {{/openApiNullable}}
    return this;
  }
  {{/isArray}}
  {{#isMap}}

  public {{classname}} put{{nameInCamelCase}}Item(String key, {{{items.datatypeWithEnum}}} {{name}}Item) {
    if (this.{{name}} == null) {
      this.{{name}} = {{{defaultValue}}}{{^defaultValue}}new HashMap<>(){{/defaultValue}};
    }
    this.{{name}}.put(key, {{name}}Item);
    return this;
  }
  {{/isMap}}
  {{! end feature: fluent setter methods }}
  {{! begin feature: getter and setter }}

  /**
  {{#description}}
   * {{{.}}}
  {{/description}}
  {{^description}}
   * Get {{name}}
  {{/description}}
  {{#minimum}}
   * minimum: {{.}}
  {{/minimum}}
  {{#maximum}}
   * maximum: {{.}}
  {{/maximum}}
   * @return {{name}}
  */
  {{#vendorExtensions.x-extra-annotation}}
  {{{vendorExtensions.x-extra-annotation}}}
  {{/vendorExtensions.x-extra-annotation}}
  {{#useBeanValidation}}
  {{>beanValidation}}
  {{/useBeanValidation}}
  {{^useBeanValidation}}
  {{#required}}@NotNull{{/required}}
  {{/useBeanValidation}}
  {{#swagger2AnnotationLibrary}}
  @Schema(name = "{{{baseName}}}"{{#isReadOnly}}, accessMode = Schema.AccessMode.READ_ONLY{{/isReadOnly}}{{#example}}, example = "{{{.}}}"{{/example}}{{#description}}, description = "{{{.}}}"{{/description}}, requiredMode = {{#required}}Schema.RequiredMode.REQUIRED{{/required}}{{^required}}Schema.RequiredMode.NOT_REQUIRED{{/required}})
  {{/swagger2AnnotationLibrary}}
  {{#swagger1AnnotationLibrary}}
  @ApiModelProperty({{#example}}example = "{{{.}}}", {{/example}}{{#required}}required = {{required}}, {{/required}}{{#isReadOnly}}readOnly = {{{isReadOnly}}}, {{/isReadOnly}}value = "{{{description}}}")
  {{/swagger1AnnotationLibrary}}
  {{#jackson}}
  @JsonProperty("{{baseName}}")
  {{/jackson}}
  public {{>nullableDataType}} {{getter}}() {
    return {{name}};
  }

  {{#vendorExtensions.x-setter-extra-annotation}}
  {{{vendorExtensions.x-setter-extra-annotation}}}
  {{/vendorExtensions.x-setter-extra-annotation}}
  public void {{setter}}({{>nullableDataType}} {{name}}) {
    this.{{name}} = {{name}};
  }
  {{! end feature: getter and setter }}
  {{/vars}}
{{>additionalProperties}}
  {{#parentVars}}

  {{! begin feature: fluent setter methods for inherited properties }}
  public {{classname}} {{name}}({{{datatypeWithEnum}}} {{name}}) {
    super.{{setter}}({{name}});
    return this;
  }
  {{#isArray}}

  public {{classname}} add{{nameInCamelCase}}Item({{{items.datatypeWithEnum}}} {{name}}Item) {
    super.add{{nameInCamelCase}}Item({{name}}Item);
    return this;
  }
  {{/isArray}}
  {{#isMap}}

  public {{classname}} put{{nameInCamelCase}}Item(String key, {{{items.datatypeWithEnum}}} {{name}}Item) {
    super.put{{nameInCamelCase}}Item(key, {{name}}Item);
    return this;
  }
  {{/isMap}}
  {{! end feature: fluent setter methods for inherited properties }}
  {{/parentVars}}
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }{{#hasVars}}
    {{classname}} {{classVarName}} = ({{classname}}) o;
    return {{#vars}}{{#vendorExtensions.x-is-jackson-optional-nullable}}equalsNullable(this.{{name}}, {{classVarName}}.{{name}}){{/vendorExtensions.x-is-jackson-optional-nullable}}{{^vendorExtensions.x-is-jackson-optional-nullable}}{{#isByteArray}}Arrays{{/isByteArray}}{{^isByteArray}}Objects{{/isByteArray}}.equals(this.{{name}}, {{classVarName}}.{{name}}){{/vendorExtensions.x-is-jackson-optional-nullable}}{{^-last}} &&
        {{/-last}}{{/vars}}{{#additionalPropertiesType}} &&
    Objects.equals(this.additionalProperties, {{classVarName}}.additionalProperties){{/additionalPropertiesType}}{{#parent}} &&
        super.equals(o){{/parent}};{{/hasVars}}{{^hasVars}}
    return true;{{/hasVars}}
  }{{#vendorExtensions.x-jackson-optional-nullable-helpers}}

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }{{/vendorExtensions.x-jackson-optional-nullable-helpers}}

  @Override
  public int hashCode() {
    return Objects.hash({{#vars}}{{#vendorExtensions.x-is-jackson-optional-nullable}}hashCodeNullable({{name}}){{/vendorExtensions.x-is-jackson-optional-nullable}}{{^vendorExtensions.x-is-jackson-optional-nullable}}{{^isByteArray}}{{name}}{{/isByteArray}}{{#isByteArray}}Arrays.hashCode({{name}}){{/isByteArray}}{{/vendorExtensions.x-is-jackson-optional-nullable}}{{^-last}}, {{/-last}}{{/vars}}{{#parent}}{{#hasVars}}, {{/hasVars}}super.hashCode(){{/parent}}{{#additionalPropertiesType}}{{#hasVars}}, {{/hasVars}}{{^hasVars}}{{#parent}}, {{/parent}}{{/hasVars}}additionalProperties{{/additionalPropertiesType}});
  }{{#vendorExtensions.x-jackson-optional-nullable-helpers}}

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }{{/vendorExtensions.x-jackson-optional-nullable-helpers}}

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class {{classname}} {\n");
    {{#parent}}
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    {{/parent}}
    {{#vars}}sb.append("    {{name}}: ").append(toIndentedString({{name}})).append("\n");
    {{/vars}}{{#additionalPropertiesType}}
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    {{/additionalPropertiesType}}sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/deployment_old/Dockerfile
Content:
FROM sib-reg-001.sib.evraz.com:5005/maven:3.8.5-openjdk-17 as build

WORKDIR /usr/src/mymaven
RUN mkdir -p /usr/src/mymaven/target
COPY ./deployment/settings.xml /root/.m2/settings.xml
COPY . .
#RUN export TESTCONTAINERS_RYUK_DISABLED=true && \
#    mvn clean versions:set package -DnewVersion=${version} && \
#    mvn clean deploy -P ci -s settings.xml -Dmaven.wagon.http.ssl.insecure=true -Dmaven.wagon.http.ssl.allowall=true -Dmaven.wagon.http.ssl.ignore.validity.dates=true
RUN mvn clean deploy -P ci -s /root/.m2/settings.xml -Dmaven.wagon.http.ssl.insecure=true -Dmaven.wagon.http.ssl.allowall=true -Dmaven.wagon.http.ssl.ignore.validity.dates=true


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/deployment_old/azure-pipeline.yaml
Content:
resources:
  repositories:
    - repository: templates
      type: git
      name: DevOps%20boards/azure-templates
      ref: refs/heads/main
      endpoint: azure-templates-connection

trigger:
  - main

variables:
  TestDeployment: $[eq( variables['Build.SourceBranchName'], 'test')]
  ProdDeployment: $[eq( variables['Build.SourceBranchName'], 'main')]
  IsPr: $[eq( variables['Build.Reason'], 'PullRequest')]
  Tag: $(Stage)_$(Build.BuildId)
  Region: sib
  PROXY: http://sib-prx-009.sib.evraz.com:3128
  PROXY_HOST: sib-prx-009.sib.evraz.com
  RegistryServer: sib-reg-001.sib.evraz.com
  MavenRepoUrl: https://$(RegistryServer)/repository/$(Region)-maven2-group/
  HelmRepoUrl: https://$(RegistryServer)/repository/$(Region)-helm/
  HelmRepoUser: osh.azure.nexus.prx
  HelmRepoPass: $(HELM_PASSWORD_SIB)
  HelmTimeout: 5m
  Namespace: $(Project)-$(Stage)
  PackageVer: "0.1.0"

  Project: "emi-9887"
  App: $(Project)-bitrix-adapter
  AppImageName: $(App)

stages:
  - stage: AppScreenerTest
    condition: and(succeeded(), eq(variables['IsPr'], True))

    jobs:
      - deployment: AppScreenerTest
        environment: WithoutApproval
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                  clean: "true"

                - template: appscreener.yml@templates
                  parameters:
                    ProjectName: $(App)
                    ProjectUuid: ""
                    Languages: "CS,CONFIG,HTML5,JAVASCRIPT,PHP,PLSQL,PYTHON,TSQL,TYPESCRIPT,JAVA"

  - stage: ProdBuild
    condition: and(eq(variables['ProdDeployment'], True), eq(variables['IsPr'], False))
    pool: sib
    jobs:
      - deployment: TestDeploy
        environment: WithoutApproval
        variables:
          Stage: test
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                  clean: True
                - template: pre-build.yml@templates
                - template: replacer.yml@templates
                  parameters:
                    targetFiles: |
                      deployment/settings.xml
                      pom.xml
                    rootDirectory: "$(Build.Repository.LocalPath)/"
                - task: Docker@2
                  name: BuildMaven
                  displayName: Build Maven
                  inputs:
                    command: "build"
                    Dockerfile: deployment/Dockerfile
                    buildContext: .
                    arguments: --build-arg HTTP_PROXY=$(PROXY) --build-arg HTTPS_PROXY=$(PROXY) --build-arg http_proxy=$(PROXY) --build-arg https_proxy=$(PROXY) --build-arg version=$(PackageVer)
                    tags: $(Tag)

                - template: final.yml@templates


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/deployment_old/settings.xml
Content:
<settings>
    <servers>
        <server>
            <id>__RegistryServer__</id>
            <username>__HelmRepoUser__</username>
            <password>__HelmRepoPass__</password>
        </server>
    </servers>
    <mirrors>
        <mirror>
            <id>nexus-proxy</id>
            <url>>__MavenRepoUrl__</url>
            <mirrorOf>central</mirrorOf>
        </mirror>
    </mirrors>
</settings>

File: /evrazropos/EMI_evraz_oms_bitrix_adapter/deployment/Dockerfile
Content:
FROM sib-reg-001.sib.evraz.com:5005/maven:3.8.5-openjdk-17 as build

WORKDIR /usr/src/mymaven
RUN mkdir /usr/src/mymaven/target
COPY ./deployment/settings.xml /root/.m2/settings.xml
COPY . .
VOLUME ["/var/run/docker.sock"]
RUN export TESTCONTAINERS_RYUK_DISABLED=true && \
    mvn -B clean package -P ci -Dmaven.test.skip=true -D liquibase.skip=true -Dmaven.wagon.http.ssl.insecure=true -Dmaven.wagon.http.ssl.allowall=true -Dmaven.wagon.http.ssl.ignore.validity.dates=true

FROM sib-reg-001.sib.evraz.com:5005/library/openjdk:17-alpine as final

ENV TZ=Europe/Moscow
COPY --from=build /usr/src/mymaven/target/bitrix-adapter-0.1.0.jar bitrix-adapter.jar

COPY client.truststore.jks /etc/security/ssl

RUN apk add --no-cache curl libc6-compat && rm -rf /var/cache/apk/*  && \
    ln -s /lib/libc.musl-x86_64.so.1 /lib/ld-linux-x86-64.so.2

RUN keytool -delete -alias YandexCA -keystore /etc/security/ssl -storepass qazwsx; exit 0

RUN mkdir -p /usr/local/share/ca-certificates/Yandex/ && mkdir -p /root/.postgresql && \
    curl https://storage.yandexcloud.net/cloud-certs/CA.pem > /usr/local/share/ca-certificates/Yandex/YandexCA.crt && \
    cp /usr/local/share/ca-certificates/Yandex/YandexCA.crt /root/.postgresql/root.crt && \
    chmod 655 /usr/local/share/ca-certificates/Yandex/YandexCA.crt && chmod 0600 /root/.postgresql/root.crt && \
    keytool -importcert -alias YandexCA -file /usr/local/share/ca-certificates/Yandex/YandexCA.crt -keystore /etc/security/ssl -storepass qazwsx --noprompt && \
    keytool -importcert -alias EvrazCA1 -file /usr/local/share/ca-certificates/EVRAZ_SIB_Offline_CA_1.crt -keystore /etc/security/ssl -storepass qazwsx --noprompt && \
    keytool -importcert -alias EvrazCA2 -file /usr/local/share/ca-certificates/EVRAZ_SIB_ECA_001.crt -keystore /etc/security/ssl -storepass qazwsx --noprompt && \
    keytool -importcert -alias EvrazCA3 -file /usr/local/share/ca-certificates/EVRAZ_Root_Offline_CA_1.crt -keystore /etc/security/ssl -storepass qazwsx --noprompt

ENTRYPOINT exec java $JAVA_OPTS -jar /bitrix-adapter.jar


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/deployment/azure-pipeline.yaml
Content:
resources:
  repositories:
    - repository: templates
      type: git
      name: DevOps%20boards/azure-templates
      ref: refs/heads/main
      endpoint: azure-templates-connection

pool: sib

trigger:
  - main
  - dev

variables:
  DevTestDeploy: $[eq( variables['Build.SourceBranchName'], 'dev')]
  ProdDeployment: $[eq( variables['Build.SourceBranchName'], 'main')]
  IsPr: $[eq( variables['Build.Reason'], 'PullRequest')]
  Tag: $(Stage)_$(Build.BuildId)
  Region: sib
  PROXY: http://sib-prx-009.sib.evraz.com:3128
  PROXY_HOST: sib-prx-009.sib.evraz.com
  RegistryServer: sib-reg-001.sib.evraz.com
  MavenRepoUrl: https://$(RegistryServer)/repository/$(Region)-maven2-group/
  HelmRepoUrl: https://$(RegistryServer)/repository/$(Region)-helm/
  HelmRepoUser: osh.azure.nexus.prx
  HelmRepoPass: $(HELM_PASSWORD_SIB)
  HelmTimeout: 5m
  Namespace: $(Project)-$(Stage)
  appscreener: appScreener-sib

  Project: "emi-9887"
  App: $(Project)-bitrix-adapter
  AppImageName: $(App)

stages:
  - stage: Linters
    condition: and(succeeded(), eq(variables['IsPr'], True))

    jobs:
      - deployment: Linters
        environment: WithoutApproval
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                  clean: "true"

                - template: appscreener.yml@templates
                  parameters:
                    ProjectName: $(Project)
                    ProjectUuid: "53cbbb39-afef-46f5-9840-e3b1370c20c5"
                    Languages: "CS,CONFIG,HTML5,JAVASCRIPT,PHP,PLSQL,PYTHON,TSQL,TYPESCRIPT"

                # - template: linters.yml@templates
                #   parameters:
                #     Region: sib

  - stage: DevTestDeploy
    condition: and(or(eq(variables['DevTestDeploy'], True), eq(variables['ProdDeployment'], True)), eq(variables['IsPr'], False))
    jobs:
      - deployment: DevTestDeploy
        environment: WithoutApproval
        variables:
          ${{ if eq( variables['Build.SourceBranchName'], 'dev') }}:
            Stage: dev
            REGISTRY: $(RegistryServer):5011
            ContainerRegistryConnection: nexus-evraz-9887-dev
            ContainerRegistry: evraz-9887-dev
            KubeUser: admin-user
            KubeApiServer: https://10.240.37.246
            KubeCaData: $(KUBE_CA_DATA_TEST)
            KubeToken: $(KUBE_TOKEN_TEST)
            KubeClusterName: starfish
            HelmOpts: |
              --set imagePullSecrets.$(App)=$(JSONCONFIG_DEV) \
              --set tls.crt=$(CRT) \
              --set tls.key=$(KEY) \
              -f deployment/helm/values.dev.yml
            SecretEnvs: |
              CONFIG_SERVER_ADDRESS: $(CONFIG_SERVER_ADDRESS)
              JAVA_OPTS: $(JAVA_OPTS)
              SPRING_PROFILES_ACTIVE: $(SPRING_PROFILES_ACTIVE)
          ${{ if eq( variables['Build.SourceBranchName'], 'main') }}:
            Stage: test
            REGISTRY: $(RegistryServer):5010
            ContainerRegistryConnection: nexus-evraz-9887-test
            ContainerRegistry: evraz-9887-test
            KubeUser: admin-user
            KubeApiServer: https://10.240.37.246
            KubeCaData: $(KUBE_CA_DATA_TEST)
            KubeToken: $(KUBE_TOKEN_TEST)
            KubeClusterName: starfish
            HelmOpts: |
              --set imagePullSecrets.$(App)=$(JSONCONFIG_TEST) \
              --set tls.crt=$(CRT) \
              --set tls.key=$(KEY) \
              -f deployment/helm/values.test.yml
            SecretEnvs: |
              CONFIG_SERVER_ADDRESS: $(CONFIG_SERVER_ADDRESS)
              JAVA_OPTS: $(JAVA_OPTS)
              SPRING_PROFILES_ACTIVE: $(SPRING_PROFILES_ACTIVE)
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                  clean: True

                - template: pre-build.yml@templates

                - template: replacer.yml@templates
                  parameters:
                    targetFiles: |
                      deployment/settings.xml
                      deployment/k8s/kubeconfig
                      pom.xml
                    rootDirectory: "$(Build.Repository.LocalPath)/"

                - template: docker.yml@templates
                  parameters:
                    AppName: StarfishBitrixAdapter
                    ContainerRegistryConnection: $(ContainerRegistryConnection)
                    ContainerRegistry: $(ContainerRegistry)
                    DockerfilePath: deployment/Dockerfile
                    ImageName: $(AppImageName)
                    buildContext: .
                    arguments: --build-arg HTTP_PROXY=$(PROXY) --build-arg HTTPS_PROXY=$(PROXY) --build-arg http_proxy=$(PROXY) --build-arg https_proxy=$(PROXY)

                - task: CmdLine@2
                  displayName: Deploy
                  inputs:
                    script: |
                      set -x
                      export HTTP_PROXY=http://sib-prx-009.sib.evraz.com:3128
                      export HTTPS_PROXY=http://sib-prx-009.sib.evraz.com:3128
                      export KUBECONFIG=$(Build.Repository.LocalPath)/deployment/k8s/kubeconfig

                      helm repo add evraz $(HelmRepoUrl) --username $(HelmRepoUser) --password $(HelmRepoPass) --insecure-skip-tls-verify
                      helm repo update
                      helm upgrade $(App) evraz/evraz-helm-chart \
                      --install --wait \
                      --debug \
                      --timeout $(HelmTimeout) \
                      --namespace $(Namespace) \
                      --set nameOverride=$(App) \
                      --set app.defaultImageTag=$(Tag) \
                      --set app.secretEnvs='$(SecretEnvs)' \
                      -f $(Build.Repository.LocalPath)/deployment/helm/values.default.yml \
                      $(HelmOpts)

                - task: CmdLine@2
                  displayName: Unset KUBECONFIG
                  condition: always()
                  inputs:
                    script: |
                      unset KUBECONFIG

                - template: final.yml@templates

  - stage: ProdDeploy
    dependsOn: DevTestDeploy
    condition: and(eq(dependencies.DevTestDeploy.result,'Succeeded'), eq( variables['ProdDeployment'], True), eq(variables['IsPr'] ,False))
    jobs:
      - deployment: ProdDeploy
        environment: WithApproval-evraz-9887
        variables:
          Stage: prod
          REGISTRY: $(RegistryServer):5012
          ContainerRegistryConnection: nexus-evraz-9887-prod
          ContainerRegistry: evraz-9887-prod
          ContainerRegistryConnectionTest: nexus-evraz-9887-test
          ContainerRegistryTest: evraz-9887-test
          RegistryTest: $(RegistryServer):5010
          TestTag: test_$(Build.BuildId)
          KubeUser: admin-user
          KubeApiServer: https://10.240.39.26
          KubeCaData: $(KUBE_CA_DATA_PROD)
          KubeToken: $(KUBE_TOKEN_PROD)
          KubeClusterName: starfish
          HelmOpts: |
            --set imagePullSecrets.$(App)=$(JSONCONFIG_PROD) \
            --set tls.crt=$(CRT) \
            --set tls.key=$(KEY) \
            -f deployment/helm/values.prod.yml
          SecretEnvs: |
            CONFIG_SERVER_ADDRESS: $(CONFIG_SERVER_ADDRESS)
            JAVA_OPTS: $(JAVA_OPTS)
            SPRING_PROFILES_ACTIVE: $(SPRING_PROFILES_ACTIVE)
        strategy:
          runOnce:
            deploy:
              steps:
                - download: none

                - checkout: self
                  clean: True

                - template: pre-build.yml@templates

                - template: replacer.yml@templates
                  parameters:
                    targetFiles: |
                      k8s/kubeconfig
                    rootDirectory: "$(Build.Repository.LocalPath)/deployment/"

                - template: docker-prod.yml@templates
                  parameters:
                    AppName: StarfishBitrixAdapter
                    ImageName: $(AppImageName)
                    ContainerRegistryConnectionTest: $(ContainerRegistryConnectionTest)
                    ContainerRegistryConnection: $(ContainerRegistryConnection)
                    RegistryTest: $(RegistryTest)
                    Registry: $(REGISTRY)
                    ContainerRegistryTest: $(ContainerRegistryTest)
                    ContainerRegistry: $(ContainerRegistry)
                    TestTag: $(TestTag)
                    Tag: $(Tag)

                - task: CmdLine@2
                  displayName: Deploy
                  inputs:
                    script: |
                      set -x
                      export HTTP_PROXY=http://sib-prx-009.sib.evraz.com:3128
                      export HTTPS_PROXY=http://sib-prx-009.sib.evraz.com:3128
                      export KUBECONFIG=$(Build.Repository.LocalPath)/deployment/k8s/kubeconfig

                      helm repo add evraz $(HelmRepoUrl) --username $(HelmRepoUser) --password $(HelmRepoPass) --insecure-skip-tls-verify
                      helm repo update
                      helm upgrade $(App) evraz/evraz-helm-chart \
                      --install --wait \
                      --debug \
                      --timeout $(HelmTimeout) \
                      --namespace $(Namespace) \
                      --set nameOverride=$(App) \
                      --set app.defaultImageTag=$(Tag) \
                      --set app.secretEnvs='$(SecretEnvs)' \
                      -f $(Build.Repository.LocalPath)/deployment/helm/values.default.yml \
                      $(HelmOpts)

                - task: CmdLine@2
                  displayName: Unset KUBECONFIG
                  condition: always()
                  inputs:
                    script: |
                      unset KUBECONFIG

                - template: final.yml@templates


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/deployment/settings.xml
Content:
<settings>
    <servers>
        <server>
            <id>__RegistryServer__</id>
            <username>__HelmRepoUser__</username>
            <password>__HelmRepoPass__</password>
        </server>
    </servers>
    <mirrors>
        <mirror>
            <id>nexus-proxy</id>
            <url>__MavenRepoUrl__</url>
            <mirrorOf>central</mirrorOf>
        </mirror>
    </mirrors>
    </settings>


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/deployment/k8s/kubeconfig
Content:
apiVersion: v1
clusters:
  - cluster:
      server: __KubeApiServer__
      certificate-authority-data: __KubeCaData__
    name: __KubeClusterName__
contexts:
  - context:
      cluster: __KubeClusterName__
      user: __KubeUser__
    name: starfish
current-context: starfish
kind: Config
preferences: {}
users:
  - name: __KubeUser__
    user:
      token: __KubeToken__


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/deployment/k8s/ns.yaml
Content:
apiVersion: v1
kind: Namespace
metadata:
  name: emi-9887-test


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/deployment/k8s/rq.yaml
Content:
apiVersion: v1
kind: ResourceQuota
metadata:
  name: emi-9887-test
  namespace: emi-9887-test
spec:
  hard:
    requests.cpu: '5'
    requests.memory: 5Gi
    limits.cpu: '5'
    limits.memory: 5Gi


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/deployment/helm/values.default.yml
Content:
app:
  defaultImage: sib-reg-001.sib.evraz.com:5011/evraz-9887-dev/emi-9887-bitrix-adapter
  defaultImageTag: latest
  domain: order-service.starfish.evraz.com
  envs:
    JAVA_OPTS: "-Xmx512m -XX:+ExitOnOutOfMemoryError -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/tmp/dumps/bitrix-adapter/"
    CONFIG_SERVER_ADDRESS: "http://config-server"
    SPRING_PROFILES_ACTIVE: "dev"
    HOST_NAME: "api.dev.oms.evraz.market"

# ingress:
#   enabled: true
#   annotations:
#     kubernetes.io/ingress.class: 'nginx'
#   hosts:
#     - hostname: app.starfish.evraz.com
#       paths:
#         - path: /
#           servicePort: http
#           serviceName: app

# services:
#   app:
#     ports:
#       - name: http
#         protocol: TCP
#         port: 80
#         targetPort: 8080
#     extraSelectorLabels:
#       app: bitrix-adapter

deployments:
  bitrix-adapter:
    replicas: 1
    extraSelectorLabels:
      app: bitrix-adapter
      svc: int-svc-ingress
    initContainers:
      init-conf-srv:
        image: curlimages/curl
        tag: "8.2.1"
        command:
          - sh
          - -c
          - |
            while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' http://config-server-actuator:18080/actuator/health)" != "200" ]]; do 
              sleep 15; 
            done
            while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' http://adapter-actuator:18080/actuator/health)" != "200" ]]; do 
              sleep 15; 
            done
            while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' http://parser-actuator:18080/actuator/health)" != "200" ]]; do 
              sleep 15; 
            done
            while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' http://message-gateway-actuator:18080/actuator/health)" != "200" ]]; do 
              sleep 15; 
            done
            while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' http://delivery-actuator:18080/actuator/health)" != "200" ]]; do 
              sleep 15; 
            done
            while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' http://dwh-adapter-actuator:18080/actuator/health)" != "200" ]]; do 
              sleep 15; 
            done
        resources:
          requests:
            memory: "20Mi"
            cpu: "10m"
          limits:
            memory: "30Mi"
            cpu: "20m"
    containers:
      bitrix-adapter:
        livenessProbe:
          failureThreshold: 5
          httpGet:
            path: /actuator/health
            port: 18080
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 15
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /actuator/health
            port: 18080
            scheme: HTTP
          initialDelaySeconds: 45
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 15
        imagePullPolicy: Always
        resources:
          limits:
            memory: 800Mi
            cpu: "0.3"
          requests:
            memory: 700Mi
            cpu: "0.3"
        envsFromConfigmap:
          envs:
            - JAVA_OPTS
            - CONFIG_SERVER_ADDRESS
            - SPRING_PROFILES_ACTIVE
        volumeMounts:
          - name: dumps
            mountPath: /tmp/dumps
    volumes:
      - name: dumps
        persistentVolumeClaim:
          claimName: "emi-9887-config-server-dumps"

extraDeploy:
  - |
    apiVersion: v1
    kind: Service
    metadata:
      name: bitrix-adapter
      namespace: {{ $.Release.Namespace }}
    spec:
      ports:
        - name: http
          protocol: TCP
          port: 80
          targetPort: 8080
      selector:
        app: bitrix-adapter
        app.kubernetes.io/instance: emi-9887-bitrix-adapter
        app.kubernetes.io/name: emi-9887-bitrix-adapter
      type: ClusterIP
      sessionAffinity: None
    ---
    apiVersion: v1
    kind: Service
    metadata:
      name: bitrix-adapter-actuator
      namespace: {{ $.Release.Namespace }}
    spec:
      ports:
        - name: http
          protocol: TCP
          port: 18080
          targetPort: 18080
      selector:
        app: bitrix-adapter
        app.kubernetes.io/instance: emi-9887-bitrix-adapter
        app.kubernetes.io/name: emi-9887-bitrix-adapter
      type: ClusterIP
      sessionAffinity: None
    ---
    apiVersion: networking.k8s.io/v1
    kind: Ingress
    metadata:
      name: emi-9887-bitrix-adapter
      namespace: {{ $.Release.Namespace }}
      annotations:
        nginx.ingress.kubernetes.io/ssl-redirect: 'true'
        kubernetes.io/ingress.class: 'nginx'
        nginx.ingress.kubernetes.io/use-regex: 'true'
        nginx.ingress.kubernetes.io/rewrite-target: /$2
    spec:
      tls:
        - hosts:
            - {{ $.Values.app.envs.HOST_NAME }}
          secretName: emi-9887-tls-conf
      rules:
        - host: {{ $.Values.app.envs.HOST_NAME }}
          http:
            paths:
              - path: /api/bitrix-adapter(/|$)(.*)
                pathType: Prefix
                backend:
                  service:
                    name: bitrix-adapter
                    port:
                      name: http


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/deployment/helm/values.dev.yml
Content:


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/deployment/helm/values.prod.yml
Content:
app:
  defaultImage: sib-reg-001.sib.evraz.com:5012/evraz-9887-prod/emi-9887-bitrix-adapter
  envs:
    SPRING_PROFILES_ACTIVE: "prod"
    HOST_NAME: "api.oms.evraz.market"

deployments:
  bitrix-adapter:
    replicas: 2


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/deployment/helm/values.test.yml
Content:
app:
  defaultImage: sib-reg-001.sib.evraz.com:5010/evraz-9887-test/emi-9887-bitrix-adapter
  envs:
    SPRING_PROFILES_ACTIVE: "test"
    HOST_NAME: "api.test.oms.evraz.market"


File: /evrazropos/EMI_evraz_oms_bitrix_adapter/ci/checkstyle.xml
Content:
<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
        "-//Checkstyle//DTD Checkstyle Configuration 1.3//EN"
        "https://checkstyle.org/dtds/configuration_1_3.dtd">

<!--

  Checkstyle configuration that checks the sun coding conventions from:

    - the Java Language Specification at
      https://docs.oracle.com/javase/specs/jls/se11/html/index.html

    - the Sun Code Conventions at https://www.oracle.com/java/technologies/javase/codeconventions-contents.html

    - the Javadoc guidelines at
      https://www.oracle.com/technical-resources/articles/java/javadoc-tool.html

    - the JDK Api documentation https://docs.oracle.com/en/java/javase/11/

    - some best practices

  Checkstyle is very configurable. Be sure to read the documentation at
  https://checkstyle.org (or in your downloaded distribution).

  Most Checks are configurable, be sure to consult the documentation.

  To completely disable a check, just comment it out or delete it from the file.
  To suppress certain violations please review suppression filters.

  Finally, it is worth reading the documentation.

-->

<module name="Checker">
    <!--
        If you set the basedir property below, then all reported file
        names will be relative to the specified directory. See
        https://checkstyle.org/config.html#Checker

        <property name="basedir" value="${basedir}"/>
    -->
    <property name="severity" value="error"/>

    <property name="fileExtensions" value="java, properties, xml"/>

    <!-- Excludes all 'module-info.java' files              -->
    <!-- See https://checkstyle.org/config_filefilters.html -->
    <module name="BeforeExecutionExclusionFileFilter">
        <property name="fileNamePattern" value="module\-info\.java$"/>
    </module>

    <!-- https://checkstyle.org/config_filters.html#SuppressionFilter -->
    <module name="SuppressionFilter">
        <property name="file" value="ci/suppression-filter.xml"/>
        <property name="optional" value="true"/>
    </module>

    <!-- Checks whether files end with a new line.                        -->
    <!-- See https://checkstyle.org/config_misc.html#NewlineAtEndOfFile -->
    <module name="NewlineAtEndOfFile"/>

    <!-- Checks for Size Violations.                    -->
    <!-- See https://checkstyle.org/config_sizes.html -->
    <module name="FileLength"/>
    <module name="LineLength">
        <property name="fileExtensions" value="java"/>
        <property name="max" value="120"/>
        <property name="severity" value="warning"/>
    </module>

    <!-- Checks for whitespace                               -->
    <!-- See https://checkstyle.org/config_whitespace.html -->
    <module name="FileTabCharacter"/>

    <!-- Miscellaneous other checks.                   -->
    <!-- See https://checkstyle.org/config_misc.html -->
    <module name="RegexpSingleline">
        <property name="format" value="\s+$"/>
        <property name="minimum" value="0"/>
        <property name="maximum" value="0"/>
        <property name="message" value="Line has trailing spaces."/>
    </module>

    <module name="TreeWalker">

        <!-- Checks for Javadoc comments.                     -->
        <!-- See https://checkstyle.org/config_javadoc.html -->
        <module name="InvalidJavadocPosition"/>
        <module name="JavadocStyle"/>
        <!--        <module name="MissingJavadocMethod"/>-->

        <!-- Checks for Naming Conventions.                  -->
        <!-- See https://checkstyle.org/config_naming.html -->
        <module name="ConstantName"/>
        <module name="LocalFinalVariableName"/>
        <module name="LocalVariableName"/>
        <module name="MemberName"/>
        <module name="MethodName">
            <property name="format" value="^[a-z][_a-zA-Z0-9]*$"/>
        </module>
        <module name="PackageName"/>
        <module name="ParameterName"/>
        <module name="StaticVariableName"/>
        <module name="TypeName"/>

        <!-- Checks for imports                              -->
        <!-- See https://checkstyle.org/config_imports.html -->
        <module name="IllegalImport"/> <!-- defaults to sun.* packages -->
        <module name="RedundantImport"/>
        <module name="UnusedImports">
            <property name="processJavadoc" value="false"/>
        </module>

        <!-- Checks for Size Violations.                    -->
        <!-- See https://checkstyle.org/config_sizes.html -->
        <module name="MethodLength">
            <property name="max" value="160"/>
        </module>
        <module name="ParameterNumber">
            <property name="max" value="12"/>
        </module>

        <!-- Checks for whitespace                               -->
        <!-- See https://checkstyle.org/config_whitespace.html -->
        <module name="EmptyForIteratorPad"/>
        <module name="GenericWhitespace"/>
        <module name="MethodParamPad"/>
        <module name="NoWhitespaceAfter"/>
        <module name="NoWhitespaceBefore"/>
        <module name="OperatorWrap"/>
        <module name="ParenPad"/>
        <module name="TypecastParenPad"/>
        <module name="WhitespaceAfter"/>
        <module name="WhitespaceAround"/>

        <!-- Modifier Checks                                    -->
        <!-- See https://checkstyle.org/config_modifiers.html -->
        <module name="ModifierOrder"/>
        <module name="RedundantModifier"/>

        <!-- Checks for blocks. You know, those {}'s         -->
        <!-- See https://checkstyle.org/config_blocks.html -->
        <module name="AvoidNestedBlocks"/>
        <module name="EmptyBlock"/>
        <module name="LeftCurly"/>
        <module name="NeedBraces"/>
        <module name="RightCurly"/>

        <!-- Checks for common coding problems               -->
        <!-- See https://checkstyle.org/config_coding.html -->
        <module name="EmptyStatement"/>
        <module name="EqualsHashCode"/>
        <module name="HiddenField">
            <property name="severity" value="warning"/>
        </module>
        <module name="IllegalInstantiation"/>
        <module name="InnerAssignment"/>
        <module name="MagicNumber">
            <property name="severity" value="warning"/>
        </module>
        <module name="MissingSwitchDefault"/>
        <module name="MultipleVariableDeclarations"/>
        <module name="SimplifyBooleanExpression"/>
        <module name="SimplifyBooleanReturn"/>

        <!-- Checks for class design                         -->
        <!-- See https://checkstyle.org/config_design.html -->
        <module name="FinalClass"/>
        <module name="InterfaceIsType"/>

        <!-- Miscellaneous other checks.                   -->
        <!-- See https://checkstyle.org/config_misc.html -->
        <module name="ArrayTypeStyle"/>
        <module name="TodoComment">
            <property name="severity" value="warning"/>
        </module>
        <module name="UpperEll"/>

        <!-- https://checkstyle.org/config_filters.html#SuppressionXpathFilter -->
        <module name="SuppressionXpathFilter">
            <property name="file" value="${org.checkstyle.sun.suppressionxpathfilter.config}"
                      default="checkstyle-xpath-suppressions.xml" />
            <property name="optional" value="true"/>
        </module>

    </module>

</module>

File: /evrazropos/EMI_evraz_oms_bitrix_adapter/ci/suppression-filter.xml
Content:
<?xml version="1.0"?>

<!DOCTYPE suppressions PUBLIC
        "-//Checkstyle//DTD SuppressionFilter Configuration 1.2//EN"
        "https://checkstyle.org/dtds/suppressions_1_2.dtd">

<suppressions>
    <suppress files="package\-info\.java$" checks=".*"/>
    <suppress files="[/\\]target[/\\]" checks=".*"/>
    <suppress files="[/\\]resources[/\\]" checks=".*"/>
</suppressions>


